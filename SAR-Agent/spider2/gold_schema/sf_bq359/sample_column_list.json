{"GITHUB_REPOS.GITHUB_REPOS.SAMPLE_COMMITS": {"commit": "76cdd58e558669366adfaded436fda01b30cce3e", "tree": "deaccb499752c928919693edea65f9ea4c1fe756", "parent": "[\n  \"1c12c4cf9411eb130b245fa8d0fbbaf989477c7b\"\n]", "author": "{\n  \"date\": 1210806352000000,\n  \"email\": \"8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com\",\n  \"name\": \"Heiko Carstens\",\n  \"time_sec\": 1210806352,\n  \"tz_offset\": -420\n}", "committer": "{\n  \"date\": 1210817475000000,\n  \"email\": \"69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org\",\n  \"name\": \"Linus Torvalds\",\n  \"time_sec\": 1210817475,\n  \"tz_offset\": -420\n}", "subject": "memory_hotplug: always initialize pageblock bitmap", "message": "memory_hotplug: always initialize pageblock bitmap\n\nTrying to online a new memory section that was added via memory hotplug\nsometimes results in crashes when the new pages are added via __free_page.\n Reason for that is that the pageblock bitmap isn't initialized and hence\ncontains random stuff.  That means that get_pageblock_migratetype()\nreturns also random stuff and therefore\n\n\tlist_add(&page->lru,\n\t\t&zone->free_area[order].free_list[migratetype]);\n\nin __free_one_page() tries to do a list_add to something that isn't even\nnecessarily a list.\n\nThis happens since 86051ca5eaf5e560113ec7673462804c54284456 (\"mm: fix\nusemap initialization\") which makes sure that the pageblock bitmap gets\nonly initialized for pages present in a zone.  Unfortunately for hot-added\nmemory the zones \"grow\" after the memmap and the pageblock memmap have\nbeen initialized.  Which means that the new pages have an unitialized\nbitmap.  To solve this the calls to grow_zone_span() and grow_pgdat_span()\nare moved to __add_zone() just before the initialization happens.\n\nThe patch also moves the two functions since __add_zone() is the only\ncaller and I didn't want to add a forward declaration.\n\nSigned-off-by: Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>\nCc: Andy Whitcroft <b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org>\nCc: Dave Hansen <e169c2064f54e292652f83bb35eed10e1aa33f38@us.ibm.com>\nCc: Gerald Schaefer <7a67bf9a8691f9f1ca8ce9577e14c37413ea5f58@de.ibm.com>\nCc: KAMEZAWA Hiroyuki <634f508bd7c47cf0ee4126243675c3e598920fbc@jp.fujitsu.com>\nCc: Yasunori Goto <5e8c143c1cccd8ccee45b5a7b90115158373a5d7@jp.fujitsu.com>\nCc: <4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org>\nSigned-off-by: Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\nSigned-off-by: Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\n", "trailer": "[\n  {\n    \"email\": \"8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com\",\n    \"key\": \"Signed-off-by\",\n    \"value\": \"Heiko Carstens <8dcf0f69152f32f23184f83357a3731522e56b9c@de.ibm.com>\"\n  },\n  {\n    \"email\": \"b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org\",\n    \"key\": \"Cc\",\n    \"value\": \"Andy Whitcroft <b4658fdd7fbd645c2859b0e39d71018f32058d12@shadowen.org>\"\n  },\n  {\n    \"email\": \"e169c2064f54e292652f83bb35eed10e1aa33f38@us.ibm.com\",\n    \"key\": \"Cc\",\n    \"value\": \"Dave Hansen <e169c2064f54e292652f83bb35eed10e1aa33f38@us.ibm.com>\"\n  },\n  {\n    \"email\": \"7a67bf9a8691f9f1ca8ce9577e14c37413ea5f58@de.ibm.com\",\n    \"key\": \"Cc\",\n    \"value\": \"Gerald Schaefer <7a67bf9a8691f9f1ca8ce9577e14c37413ea5f58@de.ibm.com>\"\n  },\n  {\n    \"email\": \"634f508bd7c47cf0ee4126243675c3e598920fbc@jp.fujitsu.com\",\n    \"key\": \"Cc\",\n    \"value\": \"KAMEZAWA Hiroyuki <634f508bd7c47cf0ee4126243675c3e598920fbc@jp.fujitsu.com>\"\n  },\n  {\n    \"email\": \"5e8c143c1cccd8ccee45b5a7b90115158373a5d7@jp.fujitsu.com\",\n    \"key\": \"Cc\",\n    \"value\": \"Yasunori Goto <5e8c143c1cccd8ccee45b5a7b90115158373a5d7@jp.fujitsu.com>\"\n  },\n  {\n    \"email\": \"4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org\",\n    \"key\": \"Cc\",\n    \"value\": \"<4fbacc2fa0ffdbb11bf1ad6925b886ebd08dd15f@kernel.org>\"\n  },\n  {\n    \"email\": \"5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org\",\n    \"key\": \"Signed-off-by\",\n    \"value\": \"Andrew Morton <5c1e68b099950c134891f0b6e179498a8ebe9cf9@linux-foundation.org>\"\n  },\n  {\n    \"email\": \"69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org\",\n    \"key\": \"Signed-off-by\",\n    \"value\": \"Linus Torvalds <69652caca27c8b940640ad396ab71f93cacec34f@linux-foundation.org>\"\n  }\n]", "difference": "[\n  {\n    \"new_mode\": 33188,\n    \"new_path\": \"mm/memory_hotplug.c\",\n    \"new_sha1\": \"833f854eabe50ad226696667db7e49d332840bb6\",\n    \"old_mode\": 33188,\n    \"old_path\": \"mm/memory_hotplug.c\",\n    \"old_sha1\": \"656ad1c65422f0440a56b422b8431891e5304827\"\n  },\n  {\n    \"new_mode\": 33188,\n    \"new_path\": \"mm/page_alloc.c\",\n    \"new_sha1\": \"63835579323a7ca70722154f5b3e6560872da409\",\n    \"old_mode\": 33188,\n    \"old_path\": \"mm/page_alloc.c\",\n    \"old_sha1\": \"bdd5c432c426fdf6714ff90e1eebdfccfdccee8c\"\n  }\n]", "difference_truncated": null, "repo_name": "torvalds/linux", "encoding": null}}