[
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`county`",
            "schools.`cdscode`",
            "frpm.`free meal count (k-12)`",
            "frpm.`enrollment (k-12)`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "K-12 students",
            "schools in Alameda County"
        ]
    },
    {
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.`free meal count (ages 5-17)`",
            "frpm.`enrollment (ages 5-17)`",
            "frpm.`cdscode`",
            "frpm.`school type`",
            "schools.`cdscode`",
            "schools.`school`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "students aged 5-17",
            "continuation schools"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`zip`",
            "schools.`cdscode`",
            "schools.`charter`",
            "schools.`county`",
            "frpm.`district name`",
            "frpm.`charter school (y/n)`",
            "frpm.`county name`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "charter schools",
            "Fresno County Office of Education"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`mailstreet`",
            "schools.`cdscode`",
            "frpm.`frpm count (k-12)`",
            "frpm.`cdscode`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "school with the highest FRPM count",
            "K-12 students"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`phone`",
            "schools.`opendate`",
            "schools.`cdscode`",
            "schools.`charter`",
            "schools.`school`",
            "frpm.`charter school (y/n)`",
            "frpm.`cdscode`",
            "frpm.`charter funding type`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "direct charter-funded schools",
            "opened after 2000/1/1"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`virtual`",
            "schools.`cdscode`",
            "satscores.`avgscrmath`",
            "satscores.`cds`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "="
        ],
        "conditions": [
            "average score in Math greater than 400",
            "exclusively virtual"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`magnet`",
            "schools.`cdscode`",
            "schools.`school`",
            "satscores.`numtsttakr`",
            "satscores.`enroll12`",
            "satscores.`cds`",
            "satscores.`sname`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "SAT test takers of over 500",
            "magnet schools",
            "offer a magnet program"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`phone`",
            "schools.`cdscode`",
            "schools.`school`",
            "satscores.`numge1500`",
            "satscores.`cds`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "highest number of test takers",
            "SAT score of over 1500"
        ]
    },
    {
        "tables": [
            "frpm",
            "schools",
            "satscores"
        ],
        "columns": [
            "frpm.`frpm count (k-12)`",
            "frpm.`cdscode`",
            "schools.`cdscode`",
            "satscores.`numtsttakr`",
            "satscores.`cds`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "schools with the highest FRPM count for K-12 students"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`charter`",
            "schools.`fundingtype`",
            "satscores.`avgscrmath`",
            "satscores.`cds`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "DISTINCT"
        ],
        "conditions": [
            "average score in Math over 560 in the SAT test",
            "directly charter-funded"
        ]
    },
    {
        "tables": [
            "satscores",
            "schools",
            "frpm"
        ],
        "columns": [
            "satscores.`avgscrread`",
            "satscores.`cds`",
            "schools.`cdscode`",
            "frpm.`frpm count (ages 5-17)`",
            "frpm.`cdscode`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "school with the highest average score in Reading in the SAT test",
            "FRPM count for students aged 5-17"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`school`",
            "frpm.`enrollment (k-12)`",
            "frpm.`enrollment (ages 5-17)`"
        ],
        "sql_keywords": [
            "JOIN",
            "SUM",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "total enrollment of over 500"
        ]
    },
    {
        "tables": [
            "satscores",
            "schools",
            "frpm"
        ],
        "columns": [
            "satscores.`numge1500`",
            "satscores.`numtsttakr`",
            "satscores.`cds`",
            "schools.`cdscode`",
            "frpm.`free meal count (ages 5-17)`",
            "frpm.`enrollment (ages 5-17)`",
            "frpm.`cdscode`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "SAT excellence rate of over 0.3",
            "students aged 5-17"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`phone`",
            "satscores.`numge1500`",
            "satscores.`numtsttakr`"
        ],
        "sql_keywords": [
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "schools with the top 3 SAT excellence rate"
        ]
    },
    {
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.`cdscode`",
            "frpm.`enrollment (ages 5-17)`",
            "schools.`ncesschool`"
        ],
        "sql_keywords": [
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "top five schools",
            "descending order",
            "highest to lowest",
            "most number of Enrollment (Ages 5-17)",
            "NCES school identification number"
        ]
    },
    {
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "satscores.`avgscrread`",
            "satscores.`cds`",
            "schools.`district`",
            "schools.`statustype`",
            "schools.`cdscode`",
            "schools.`school`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "active district",
            "highest average score in Reading"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`county`",
            "schools.`cdscode`",
            "schools.`school`",
            "satscores.`numtsttakr`",
            "satscores.`cds`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "COUNT"
        ],
        "conditions": [
            "number of test takers less than 100"
        ]
    },
    {
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "satscores.`avgscrwrite`",
            "satscores.`cds`",
            "schools.`cdscode`",
            "schools.`charternum`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "average score in Writing greater than 499"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`school`",
            "schools.`city`",
            "schools.`fundingtype`",
            "satscores.`numtsttakr`",
            "satscores.`cds`"
        ],
        "sql_keywords": [
            "=",
            "<="
        ],
        "conditions": [
            "schools in Fresno",
            "directly funded",
            "number of test takers not more than 250"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`phone`",
            "schools.`cdscode`",
            "satscores.`avgscrmath`",
            "satscores.`cds`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "highest average score in Math"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`county`",
            "schools.`cdscode`",
            "schools.`school`",
            "frpm.`high grade`",
            "frpm.`low grade`",
            "frpm.`cdscode`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "Low Grade is 9",
            "High Grade is 12"
        ]
    },
    {
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.`free meal count (k-12)`",
            "frpm.`frpm count (k-12)`",
            "frpm.`cdscode`",
            "frpm.`county name`",
            "schools.`county`",
            "schools.`cdscode`",
            "schools.`school`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "more than 500 free meals",
            "less than 700 free or reduced price meals",
            "for K-12"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`county`",
            "schools.`cdscode`",
            "schools.`school`",
            "satscores.`numtsttakr`",
            "satscores.`cds`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "school in Contra Costa",
            "highest number of test takers"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`school`",
            "schools.`street`",
            "frpm.`enrollment (k-12)`",
            "frpm.`enrollment (ages 5-17)`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "SELECT"
        ],
        "conditions": [
            "more than 30 difference in enrollements between K-12 and ages 5-17",
            "full street adress of the schools"
        ]
    },
    {
        "tables": [
            "frpm",
            "schools",
            "satscores"
        ],
        "columns": [
            "frpm.`cdscode`",
            "frpm.`school name`",
            "frpm.`enrollment (k-12)`",
            "frpm.`free meal count (k-12)`",
            "schools.`cdscode`",
            "schools.`school`",
            "satscores.`cds`",
            "satscores.`numge1500`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "AND",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "percent eligible for free meals in K-12 is more than 0.1",
            "test takers whose test score is greater than or equal to 1500"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`school`",
            "schools.`fundingtype`",
            "satscores.`avgscrmath`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "HAVING",
            "="
        ],
        "conditions": [
            "schools in Riverside",
            "average math score for SAT is greater than 400",
            "funding type of these schools"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`school`",
            "schools.`street`",
            "schools.`city`",
            "schools.`state`",
            "schools.`zip`",
            "frpm.`free meal count (ages 5-17)`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "LIKE"
        ],
        "conditions": [
            "high schools in Monterey",
            "more than 800 free or reduced price meals",
            "ages 15-17"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`school`",
            "schools.`phone`",
            "schools.`opendate`",
            "schools.`closeddate`",
            "satscores.`avgscrwrite`",
            "satscores.`sname`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "OR",
            "GROUP BY",
            "AVG"
        ],
        "conditions": [
            "schools opened after 1991",
            "schools closed before 2000"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`school`",
            "schools.`doc`",
            "frpm.`enrollment (k-12)`",
            "frpm.`enrollment (ages 5-17)`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "average difference between K-12 enrollment and 15-17 enrollment",
            "schools that are locally funded",
            "difference above this average"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`opendate`",
            "schools.`cdscode`",
            "frpm.`enrollment (k-12)`",
            "frpm.`cdscode`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "first-through-twelfth-grade school",
            "largest enrollment"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`city`",
            "schools.`school`",
            "frpm.`cdscode`",
            "frpm.`enrollment (k-12)`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "top 5 lowest enrollment number",
            "students in grades 1 through 12"
        ]
    },
    {
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.`cdscode`",
            "frpm.`enrollment (k-12)`",
            "frpm.`free meal count (k-12)`",
            "schools.`cdscode`",
            "schools.`school`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "students in grades 1 through 12",
            "10th and 11th schools with the highest enrolment"
        ]
    },
    {
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.`frpm count (k-12)`",
            "frpm.`enrollment (k-12)`",
            "frpm.`cdscode`",
            "schools.`soc`",
            "schools.`cdscode`",
            "schools.`school`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "grades 1-12",
            "highest free or reduced price meal count",
            "ownership code 66"
        ]
    },
    {
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.`free meal count (ages 5-17)`",
            "frpm.`cdscode`",
            "schools.`cdscode`",
            "schools.`school`",
            "schools.`website`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "free meal count of 1,900-2,000",
            "students aged 5-17"
        ]
    },
    {
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.`free meal count (ages 5-17)`",
            "frpm.`cdscode`",
            "frpm.`enrollment (ages 5-17)`",
            "schools.`cdscode`",
            "schools.`admlname1`",
            "schools.`school`",
            "schools.`admfname1`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "students between the ages of 5 and 17"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`admemail1`",
            "frpm.`cdscode`",
            "frpm.`charter school (y/n)`",
            "frpm.`enrollment (k-12)`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "administrator's email address",
            "chartered school",
            "fewest students enrolled",
            "grades 1 through 12"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`admfname1`",
            "schools.`admlname1`",
            "schools.`admfname2`",
            "schools.`admlname2`",
            "schools.`admfname3`",
            "schools.`admlname3`",
            "satscores.`numge1500`",
            "satscores.`cds`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "school with the highest number of students scoring 1500 or more on the SAT",
            "administration",
            "full names"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`street`",
            "schools.`city`",
            "schools.`zip`",
            "schools.`state`",
            "satscores.`numge1500`",
            "satscores.`numtsttakr`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "school with the lowest excellence rate",
            "complete address",
            "Street",
            "City",
            "Zip",
            "State"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`county`",
            "schools.`website`",
            "schools.`school`",
            "satscores.`numtsttakr`",
            "satscores.`cds`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "Los Angeles County school",
            "between 2,000 and 3,000 test takers"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`county`",
            "schools.`opendate`",
            "schools.`school`",
            "satscores.`numtsttakr`",
            "satscores.`cds`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE",
            "BETWEEN"
        ],
        "conditions": [
            "schools from Fresno",
            "opened between 1/1/1980 and 12/31/1980"
        ]
    },
    {
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "satscores.`avgscrread`",
            "satscores.`cds`",
            "schools.`district`",
            "schools.`phone`",
            "schools.`cdscode`",
            "schools.`school`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "school with the lowest average score in reading",
            "Fresno Unified"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`virtual`",
            "schools.`county`",
            "schools.`school`",
            "satscores.`avgscrread`",
            "satscores.`cds`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "virtual schools",
            "top 5",
            "respective counties",
            "average reading scores"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores",
            "frpm"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`school`",
            "satscores.`avgscrmath`",
            "satscores.`cds`",
            "frpm.`educational option type`",
            "frpm.`school type`",
            "frpm.`cdscode`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "scored the highest average in Math"
        ]
    },
    {
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "satscores.`avgscrmath`",
            "satscores.`avgscrread`",
            "satscores.`avgscrwrite`",
            "satscores.`cds`",
            "schools.`county`",
            "schools.`cdscode`",
            "schools.`school`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "average math score",
            "school with the lowest average score for all subjects",
            "county location"
        ]
    },
    {
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "satscores.`avgscrwrite`",
            "satscores.`numge1500`",
            "satscores.`numtsttakr`",
            "satscores.`cds`",
            "schools.`cdscode`",
            "schools.`city`",
            "schools.`school`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "highest number of test takers",
            "total SAT scores are greater or equal to 1500",
            "average writing score",
            "city to where the school is situated"
        ]
    },
    {
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "satscores.`avgscrwrite`",
            "schools.`cdscode`",
            "schools.`school`",
            "schools.`admlname1`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "=",
            "SELECT",
            "GROUP BY"
        ],
        "conditions": [
            "schools managed by Ricci Ulrich",
            "average writing score"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`state`",
            "schools.`cdscode`",
            "schools.`school`",
            "schools.`doc`",
            "frpm.`enrollment (k-12)`",
            "frpm.`cdscode`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "state special schools",
            "highest number of enrollees",
            "grades 1 through 12"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`county`",
            "schools.`opendate`",
            "schools.`doc`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "GROUP BY",
            "DATE FUNCTIONS"
        ],
        "conditions": [
            "monthly average number of schools",
            "opened in Alameda County",
            "under the jurisdiction of the Elementary School District",
            "in 1980"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`district`",
            "schools.`county`",
            "schools.`doc`",
            "schools.`statustype`",
            "schools.`school`",
            "frpm.`district code`",
            "frpm.`county name`",
            "frpm.`district name`",
            "frpm.`district type`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "COUNT",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "merged Unified School District schools in Orange County",
            "merged Elementary School District schools"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`county`",
            "schools.`school`",
            "schools.`closeddate`",
            "schools.`statustype`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "county",
            "closed schools",
            "name of each school",
            "closure date"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`street`",
            "schools.`school`",
            "satscores.`avgscrmath`",
            "satscores.`sname`"
        ],
        "sql_keywords": [
            "ORDER BY",
            "LIMIT",
            "JOIN"
        ],
        "conditions": [
            "school with the 7th highest Math average"
        ]
    },
    {
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "satscores.`avgscrread`",
            "satscores.`cds`",
            "schools.`mailstreet`",
            "schools.`school`"
        ],
        "sql_keywords": [
            "ORDER BY",
            "LIMIT",
            "JOIN"
        ],
        "conditions": [
            "lowest average score in reading",
            "school's name"
        ]
    },
    {
        "tables": [
            "satscores",
            "schools"
        ],
        "columns": [
            "satscores.`avgscrread`",
            "satscores.`avgscrwrite`",
            "satscores.`avgscrmath`",
            "satscores.`cds`",
            "schools.`cdscode`",
            "schools.`mailcity`",
            "schools.`school`",
            "schools.`city`"
        ],
        "sql_keywords": [
            "JOIN",
            "SUM",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "total SAT scores are greater or equal to 1500",
            "mailing city is Lakeport"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`mailcity`",
            "schools.`school`",
            "schools.`city`",
            "satscores.`numtsttakr`",
            "satscores.`cds`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "mailing city address is in Fresno"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`school`",
            "schools.`mailzip`",
            "schools.`admfname1`",
            "schools.`admlname1`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "schools under Avetik Atoian's administration",
            "related mailing zip codes"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`state`",
            "schools.`county`",
            "schools.`mailstate`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "COUNT",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "mailing state address in California",
            "located in the county of Colusa",
            "located in the county of Humboldt"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`state`",
            "schools.`statustype`",
            "schools.`mailstate`",
            "schools.`city`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "mailing state address in California",
            "active in San Joaquin city"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`phone`",
            "schools.`ext`",
            "satscores.`avgscrwrite`",
            "satscores.`cds`",
            "schools.`cdscode`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "333rd highest average writing score"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`phone`",
            "schools.`ext`",
            "schools.`school`",
            "schools.`zip`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "zip code 95203-3704",
            "school's name"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`admfname1`",
            "schools.`admlname1`",
            "schools.`admfname2`",
            "schools.`admlname2`",
            "schools.`website`"
        ],
        "sql_keywords": [
            "LIKE",
            "AND"
        ],
        "conditions": [
            "schools under the administration of Mike Larson",
            "schools under the administration of Dante Alvarez"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`website`",
            "schools.`virtual`",
            "schools.`charter`",
            "schools.`city`"
        ],
        "sql_keywords": [
            "LIKE",
            "="
        ],
        "conditions": [
            "partially virtual chartered schools",
            "located in San Joaquin"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`city`",
            "schools.`charter`",
            "schools.`district`",
            "schools.`doc`",
            "schools.`school`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "chartered schools",
            "located in the city of Hickman",
            "owned by the Elementary School District"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`county`",
            "schools.`cdscode`",
            "schools.`charter`",
            "schools.`school`",
            "frpm.`free meal count (k-12)`",
            "frpm.`enrollment (k-12)`",
            "frpm.`cdscode`"
        ],
        "sql_keywords": [
            "=",
            "<",
            "AND"
        ],
        "conditions": [
            "non-chartered schools",
            "county of Los Angeles",
            "percent (%) of eligible free meals for grades 1 through 12 less than 0.18%"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`admfname1`",
            "schools.`admlname1`",
            "schools.`admfname2`",
            "schools.`admlname2`",
            "schools.`school`",
            "schools.`city`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "DISTINCT"
        ],
        "conditions": [
            "chartered schools",
            "charter number 00D2",
            "names of all the administrators",
            "name of the school",
            "city to which it belongs"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`mailcity`",
            "schools.`charternum`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "mailing city in Hickman",
            "charter number 00D4"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`fundingtype`",
            "schools.`county`"
        ],
        "sql_keywords": [
            "COUNT",
            "GROUP BY",
            "WHERE",
            "JOIN"
        ],
        "conditions": [
            "Santa Clara County schools",
            "locally funded",
            "all other types of charter school funding"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`fundingtype`",
            "schools.`county`",
            "schools.`opendate`",
            "schools.`cdscode`",
            "schools.`school`"
        ],
        "sql_keywords": [
            "COUNT",
            "=",
            "AND"
        ],
        "conditions": [
            "between 1/1/2000 to 12/31/2005",
            "directly funded schools",
            "opened",
            "county of Stanislaus"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`closeddate`",
            "schools.`city`",
            "schools.`statustype`"
        ],
        "sql_keywords": [
            "COUNT",
            "=",
            "WHERE"
        ],
        "conditions": [
            "Community College District closure",
            "1989",
            "city of San Francisco"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`closeddate`",
            "schools.`county`",
            "schools.`soc`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "=",
            "AND"
        ],
        "conditions": [
            "county reported the most number of school closure",
            "1980s",
            "school wonership code belonging to Youth Authority Facilities (CEA)"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`ncesdist`",
            "schools.`soc`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "School Ownership Code",
            "State Special Schools"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`county`",
            "schools.`statustype`",
            "schools.`district`",
            "schools.`school`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "active District Community Day Schools",
            "closed District Community Day Schools",
            "county of Alpine"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`district`",
            "schools.`city`",
            "schools.`magnet`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "does not offer a magnet program",
            "in the city of Fresno"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`school`",
            "schools.`city`",
            "schools.`edopscode`",
            "frpm.`academic year`",
            "frpm.`enrollment (ages 5-17)`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "ages of 5 to 17",
            "enrolled at the State Special School school in Fremont",
            "for the 2014-2015 academic year"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`mailstreet`",
            "schools.`school`",
            "frpm.`free meal count (ages 5-17)`",
            "frpm.`percent (%) eligible free (ages 5-17)`",
            "frpm.`frpm count (ages 5-17)`",
            "frpm.`percent (%) eligible frpm (ages 5-17)`",
            "frpm.`cdscode`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "ages 5 to 17",
            "Youth Authority School",
            "mailing street address of PO Box 1040"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`ncesdist`",
            "schools.`edopscode`",
            "frpm.`low grade`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "District Special Education Consortia School",
            "National Center for Educational Statistics school district identification number of 0613360"
        ]
    },
    {
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.`county code`",
            "frpm.`nslp provision status`",
            "frpm.`cdscode`",
            "frpm.`school name`",
            "schools.`cdscode`",
            "schools.`county`",
            "schools.`school`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "Breakfast Provision 2",
            "county code 37"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`school`",
            "schools.`street`",
            "schools.`streetabr`",
            "schools.`city`",
            "schools.`zip`",
            "schools.`state`",
            "schools.`mailstreet`",
            "schools.`mailstrabr`",
            "schools.`mailcity`",
            "schools.`mailzip`",
            "schools.`mailstate`",
            "schools.`phone`",
            "schools.`ext`",
            "schools.`website`",
            "schools.`opendate`",
            "schools.`closeddate`",
            "schools.`charter`",
            "schools.`charternum`",
            "schools.`fundingtype`",
            "schools.`doc`",
            "schools.`doctype`",
            "schools.`soc`",
            "schools.`soctype`",
            "schools.`edopscode`",
            "schools.`edopsname`",
            "schools.`eilcode`",
            "schools.`eilname`",
            "schools.`gsoffered`",
            "schools.`gsserved`",
            "schools.`virtual`",
            "schools.`magnet`",
            "schools.`latitude`",
            "schools.`longitude`",
            "schools.`admfname1`",
            "schools.`admlname1`",
            "schools.`admemail1`",
            "schools.`admfname2`",
            "schools.`admlname2`",
            "schools.`admemail2`",
            "schools.`admfname3`",
            "schools.`admlname3`",
            "schools.`admemail3`",
            "schools.`lastupdate`",
            "frpm.`cdscode`",
            "frpm.`academic year`",
            "frpm.`county code`",
            "frpm.`district code`",
            "frpm.`school code`",
            "frpm.`county name`",
            "frpm.`district name`",
            "frpm.`school name`",
            "frpm.`district type`",
            "frpm.`school type`",
            "frpm.`educational option type`",
            "frpm.`nslp provision status`",
            "frpm.`charter school (y/n)`",
            "frpm.`charter school number`",
            "frpm.`charter funding type`",
            "frpm.`irc`",
            "frpm.`low grade`",
            "frpm.`high grade`",
            "frpm.`enrollment (k-12)`",
            "frpm.`free meal count (k-12)`",
            "frpm.`percent (%) eligible free (k-12)`",
            "frpm.`frpm count (k-12)`",
            "frpm.`percent (%) eligible frpm (k-12)`",
            "frpm.`enrollment (ages 5-17)`",
            "frpm.`free meal count (ages 5-17)`",
            "frpm.`percent (%) eligible free (ages 5-17)`",
            "frpm.`frpm count (ages 5-17)`",
            "frpm.`percent (%) eligible frpm (ages 5-17)`",
            "frpm.`2013-14 calpads fall 1 certification status`"
        ],
        "sql_keywords": [
            "LIKE",
            "="
        ],
        "conditions": [
            "high school level school",
            "Lunch Provision 2",
            "lowest grade is 9",
            "highest grade is 12",
            "county of Merced"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`county`",
            "schools.`gsoffered`",
            "schools.`school`",
            "frpm.`percent (%) eligible frpm (ages 5-17)`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "grade span of Kindergarten to 9th grade",
            "county of Los Angeles",
            "Percent (%) Eligible FRPM (Ages 5-17)"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`gsoffered`",
            "schools.`city`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "city of Adelanto"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`virtual`",
            "schools.`county`"
        ],
        "sql_keywords": [
            "=",
            "COUNT",
            "GROUP BY"
        ],
        "conditions": [
            "does not offer physical building",
            "number of schools"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`latitude`",
            "schools.`longitude`",
            "schools.`cdscode`",
            "schools.`school`",
            "frpm.`school type`"
        ],
        "sql_keywords": [
            "ORDER BY",
            "DESC",
            "LIMIT",
            "JOIN"
        ],
        "conditions": [
            "school with the highest latitude",
            "indicate the name of the school",
            "indicate the latitude coordinates"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`latitude`",
            "schools.`state`",
            "schools.`city`",
            "schools.`cdscode`",
            "schools.`school`",
            "frpm.`low grade`"
        ],
        "sql_keywords": [
            "SELECT",
            "FROM",
            "WHERE",
            "ORDER BY",
            "LIMIT",
            "JOIN"
        ],
        "conditions": [
            "city",
            "school in the state of California",
            "lowest latitude coordinates",
            "lowest grade",
            "school name"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`longitude`",
            "schools.`gsoffered`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "highest longitude"
        ]
    },
    {
        "tables": [
            "schools",
            "frpm"
        ],
        "columns": [
            "schools.`magnet`",
            "schools.`cdscode`",
            "schools.`gsoffered`",
            "schools.`city`",
            "schools.`school`",
            "frpm.`nslp provision status`",
            "frpm.`cdscode`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "AND",
            "GROUP BY"
        ],
        "conditions": [
            "offers a magnet program",
            "serving a grade span of Kindergarten to 8th grade",
            "offers Multiple Provision Types",
            "number of cities that offers a Kindergarten to 8th grade span",
            "number of schools serving such grade span for each city"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`admfname1`",
            "schools.`district`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "two most common first names",
            "school administrators",
            "district to which they administer"
        ]
    },
    {
        "tables": [
            "frpm",
            "schools"
        ],
        "columns": [
            "frpm.`percent (%) eligible free (k-12)`",
            "frpm.`district code`",
            "schools.`admfname1`",
            "schools.`cdscode`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "="
        ],
        "conditions": [
            "Percent (%) Eligible Free (K-12)",
            "school administered by an administrator whose first name is Alusine",
            "district code of the school"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`admlname1`",
            "schools.`district`",
            "schools.`county`",
            "schools.`school`",
            "schools.`charternum`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "administrator's last name",
            "school with Charter number 40",
            "district",
            "county where the school is situated",
            "name of the school"
        ]
    },
    {
        "tables": [
            "schools"
        ],
        "columns": [
            "schools.`admemail1`",
            "schools.`admemail2`",
            "schools.`admemail3`",
            "schools.`county`",
            "schools.`city`",
            "schools.`opendate`",
            "schools.`soc`",
            "schools.`doc`"
        ],
        "sql_keywords": [
            "=",
            "AND",
            "BETWEEN"
        ],
        "conditions": [
            "administrator of the school",
            "located in the San Bernardino county",
            "City of San Bernardino City Unified",
            "opened between 1/1/2009 to 12/31/2010",
            "school types are public Intermediate/Middle Schools and Unified Schools"
        ]
    },
    {
        "tables": [
            "schools",
            "satscores"
        ],
        "columns": [
            "schools.`cdscode`",
            "schools.`admfname1`",
            "schools.`admlname1`",
            "schools.`school`",
            "schools.`admemail1`",
            "satscores.`numge1500`",
            "satscores.`numtsttakr`",
            "satscores.`cds`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "highest number of test takers",
            "received SAT scores of at least 1500",
            "provide the name of the school"
        ]
    },
    {
        "tables": [
            "account",
            "district"
        ],
        "columns": [
            "account.`account_id`",
            "account.`district_id`",
            "account.`frequency`",
            "district.`district_id`",
            "district.`a3`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "JOIN"
        ],
        "conditions": [
            "choose issuance after transaction",
            "staying in East Bohemia region"
        ]
    },
    {
        "tables": [
            "account",
            "district",
            "loan"
        ],
        "columns": [
            "account.`account_id`",
            "account.`district_id`",
            "district.`district_id`",
            "district.`a3`",
            "loan.`account_id`",
            "loan.`status`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "="
        ],
        "conditions": [
            "region in Prague"
        ]
    },
    {
        "tables": [
            "district"
        ],
        "columns": [
            "district.`a12`",
            "district.`a13`"
        ],
        "sql_keywords": [],
        "conditions": [
            "average unemployment ratio of 1995",
            "average unemployment ratio of 1996"
        ]
    },
    {
        "tables": [
            "district"
        ],
        "columns": [
            "district.`district_id`",
            "district.`a11`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "female average salary more than 6000",
            "female average salary less than 10000"
        ]
    },
    {
        "tables": [
            "client",
            "district"
        ],
        "columns": [
            "client.`client_id`",
            "client.`district_id`",
            "client.`gender`",
            "client.`birth_date`",
            "district.`district_id`",
            "district.`a3`",
            "district.`a11`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "male customers",
            "living in North Bohemia",
            "average salary greater than 8000"
        ]
    },
    {
        "tables": [
            "client",
            "district",
            "account",
            "disp"
        ],
        "columns": [
            "client.`client_id`",
            "client.`gender`",
            "client.`birth_date`",
            "client.`district_id`",
            "district.`district_id`",
            "district.`a11`",
            "account.`account_id`",
            "account.`district_id`",
            "disp.`client_id`",
            "disp.`account_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "LIMIT",
            "MIN",
            "MAX",
            "SUBTRACT"
        ],
        "conditions": [
            "female clients",
            "oldest",
            "lowest average salary",
            "gap between lowest average salary and highest average salary"
        ]
    },
    {
        "tables": [
            "client",
            "district",
            "account"
        ],
        "columns": [
            "client.`client_id`",
            "client.`birth_date`",
            "client.`district_id`",
            "district.`district_id`",
            "district.`a11`",
            "account.`account_id`",
            "account.`district_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "youngest",
            "highest average salary"
        ]
    },
    {
        "tables": [
            "account",
            "disp"
        ],
        "columns": [
            "account.`account_id`",
            "account.`frequency`",
            "disp.`type`",
            "disp.`client_id`",
            "disp.`account_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "=",
            "INTERSECT"
        ],
        "conditions": [
            "choose statement of weekly issuance",
            "are Owner"
        ]
    },
    {
        "tables": [
            "client",
            "disp",
            "account"
        ],
        "columns": [
            "client.`client_id`",
            "disp.`client_id`",
            "disp.`type`",
            "disp.`account_id`",
            "account.`account_id`",
            "account.`frequency`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "choose statement of issuance",
            "transaction are Disponent"
        ]
    },
    {
        "tables": [
            "account",
            "loan"
        ],
        "columns": [
            "account.`account_id`",
            "account.`district_id`",
            "account.`frequency`",
            "account.`date`",
            "loan.`duration`",
            "loan.`date`",
            "loan.`amount`",
            "loan.`payments`",
            "loan.`account_id`",
            "loan.`loan_id`",
            "loan.`status`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "approved loan date in 1997",
            "lowest approved amount",
            "weekly issuance statement"
        ]
    },
    {
        "tables": [
            "loan",
            "account"
        ],
        "columns": [
            "loan.`loan_id`",
            "loan.`account_id`",
            "loan.`date`",
            "loan.`amount`",
            "loan.`duration`",
            "loan.`payments`",
            "loan.`status`",
            "account.`account_id`",
            "account.`date`",
            "account.`frequency`",
            "account.`district_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "loan validity more than 12 months",
            "highest approved amount",
            "account opening date in 1993"
        ]
    },
    {
        "tables": [
            "client",
            "account",
            "district"
        ],
        "columns": [
            "client.`client_id`",
            "client.`district_id`",
            "client.`gender`",
            "client.`birth_date`",
            "account.`date`",
            "account.`account_id`",
            "account.`frequency`",
            "account.`district_id`",
            "district.`district_id`",
            "district.`a2`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "=",
            "<"
        ],
        "conditions": [
            "female customers",
            "born before 1950",
            "stayed in Sokolov"
        ]
    },
    {
        "tables": [
            "account",
            "trans"
        ],
        "columns": [
            "account.`account_id`",
            "account.`date`",
            "trans.`account_id`",
            "trans.`date`"
        ],
        "sql_keywords": [
            "EXTRACT",
            "YEAR",
            "=",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "earliest trading date in 1995"
        ]
    },
    {
        "tables": [
            "account",
            "trans"
        ],
        "columns": [
            "account.`account_id`",
            "account.`date`",
            "trans.`account_id`",
            "trans.`amount`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "=",
            ">"
        ],
        "conditions": [
            "account opening date before 1997",
            "amount of money greater than 3000USD"
        ]
    },
    {
        "tables": [
            "card",
            "disp",
            "client"
        ],
        "columns": [
            "card.`issued`",
            "card.`card_id`",
            "card.`type`",
            "card.`disp_id`",
            "disp.`disp_id`",
            "disp.`type`",
            "disp.`client_id`",
            "disp.`account_id`",
            "client.`client_id`",
            "client.`gender`",
            "client.`birth_date`",
            "client.`district_id`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "issued card in 1994/3/3"
        ]
    },
    {
        "tables": [
            "trans",
            "account"
        ],
        "columns": [
            "trans.`trans_id`",
            "trans.`account_id`",
            "trans.`date`",
            "trans.`amount`",
            "account.`account_id`",
            "account.`date`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "transaction of 840 USD",
            "happened in 1998/10/14"
        ]
    },
    {
        "tables": [
            "loan",
            "account",
            "district"
        ],
        "columns": [
            "loan.`loan_id`",
            "loan.`account_id`",
            "loan.`date`",
            "account.`account_id`",
            "account.`district_id`",
            "district.`district_id`",
            "district.`a2`",
            "district.`a3`",
            "district.`a4`",
            "district.`a5`",
            "district.`a6`",
            "district.`a7`",
            "district.`a8`",
            "district.`a9`",
            "district.`a10`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "loan approved in 1994/8/25"
        ]
    },
    {
        "tables": [
            "card",
            "disp",
            "account",
            "trans"
        ],
        "columns": [
            "card.`disp_id`",
            "card.`type`",
            "card.`issued`",
            "card.`card_id`",
            "disp.`type`",
            "disp.`client_id`",
            "disp.`disp_id`",
            "disp.`account_id`",
            "account.`account_id`",
            "trans.`bank`",
            "trans.`balance`",
            "trans.`operation`",
            "trans.`k_symbol`",
            "trans.`trans_id`",
            "trans.`type`",
            "trans.`account_id`",
            "trans.`account`",
            "trans.`amount`",
            "trans.`date`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "WHERE",
            "="
        ],
        "conditions": [
            "card was opened in 1996/10/21"
        ]
    },
    {
        "tables": [
            "client",
            "account",
            "district"
        ],
        "columns": [
            "client.`client_id`",
            "client.`district_id`",
            "client.`gender`",
            "client.`birth_date`",
            "account.`date`",
            "account.`account_id`",
            "account.`district_id`",
            "district.`district_id`",
            "district.`a11`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "oldest client",
            "opened his/her account",
            "highest average salary branch"
        ]
    },
    {
        "tables": [
            "client",
            "disp",
            "account",
            "loan",
            "trans"
        ],
        "columns": [
            "client.`client_id`",
            "client.`gender`",
            "client.`birth_date`",
            "client.`district_id`",
            "disp.`type`",
            "disp.`disp_id`",
            "disp.`account_id`",
            "account.`account_id`",
            "account.`district_id`",
            "account.`frequency`",
            "account.`date`",
            "loan.`loan_id`",
            "loan.`account_id`",
            "loan.`date`",
            "loan.`amount`",
            "loan.`duration`",
            "loan.`payments`",
            "loan.`status`",
            "trans.`trans_id`",
            "trans.`account_id`",
            "trans.`date`",
            "trans.`type`",
            "trans.`operation`",
            "trans.`amount`",
            "trans.`balance`",
            "trans.`k_symbol`",
            "trans.`bank`",
            "trans.`account`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "client applied the biggest loan",
            "first amount of transaction after opened the account"
        ]
    },
    {
        "tables": [
            "client",
            "account",
            "district"
        ],
        "columns": [
            "client.`client_id`",
            "client.`gender`",
            "client.`district_id`",
            "account.`account_id`",
            "account.`district_id`",
            "account.`date`",
            "district.`district_id`",
            "district.`a2`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "="
        ],
        "conditions": [
            "opened their accounts in Jesenik branch",
            "women"
        ]
    },
    {
        "tables": [
            "trans",
            "disp"
        ],
        "columns": [
            "trans.`trans_id`",
            "trans.`account_id`",
            "trans.`amount`",
            "trans.`date`",
            "disp.`disp_id`",
            "disp.`client_id`",
            "disp.`account_id`",
            "disp.`type`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "LIKE"
        ],
        "conditions": [
            "made 5100 USD transaction",
            "transaction in 1998/9/2"
        ]
    },
    {
        "tables": [
            "account",
            "district"
        ],
        "columns": [
            "account.`date`",
            "account.`account_id`",
            "account.`district_id`",
            "district.`district_id`",
            "district.`a2`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "=",
            "LIKE"
        ],
        "conditions": [
            "accounts opened",
            "Litomerice",
            "1996"
        ]
    },
    {
        "tables": [
            "client",
            "disp",
            "account",
            "district"
        ],
        "columns": [
            "client.`client_id`",
            "client.`gender`",
            "client.`birth_date`",
            "client.`district_id`",
            "disp.`client_id`",
            "disp.`account_id`",
            "disp.`type`",
            "account.`account_id`",
            "account.`district_id`",
            "district.`district_id`",
            "district.`a2`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "female client",
            "born in 1976/1/29"
        ]
    },
    {
        "tables": [
            "loan",
            "account",
            "disp",
            "client"
        ],
        "columns": [
            "loan.`loan_id`",
            "loan.`account_id`",
            "loan.`date`",
            "loan.`amount`",
            "account.`account_id`",
            "account.`district_id`",
            "account.`frequency`",
            "account.`date`",
            "disp.`type`",
            "disp.`client_id`",
            "disp.`disp_id`",
            "disp.`account_id`",
            "client.`gender`",
            "client.`client_id`",
            "client.`district_id`",
            "client.`birth_date`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "applied 98832 USD loan",
            "in 1996/1/3"
        ]
    },
    {
        "tables": [
            "client",
            "account",
            "district"
        ],
        "columns": [
            "client.`client_id`",
            "client.`district_id`",
            "client.`birth_date`",
            "account.`account_id`",
            "account.`district_id`",
            "account.`date`",
            "district.`district_id`",
            "district.`a2`",
            "district.`a3`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "opened his/her account in Prague"
        ]
    },
    {
        "tables": [
            "district",
            "client"
        ],
        "columns": [
            "district.`a3`",
            "district.`a4`",
            "district.`district_id`",
            "client.`gender`",
            "client.`district_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "COUNT",
            "SUM"
        ],
        "conditions": [
            "branch located in the south Bohemia",
            "biggest number of inhabitants",
            "percentage of male clients"
        ]
    },
    {
        "tables": [
            "loan",
            "account",
            "trans"
        ],
        "columns": [
            "loan.`date`",
            "loan.`loan_id`",
            "loan.`status`",
            "loan.`account_id`",
            "account.`date`",
            "account.`account_id`",
            "account.`district_id`",
            "account.`frequency`",
            "trans.`bank`",
            "trans.`balance`",
            "trans.`operation`",
            "trans.`k_symbol`",
            "trans.`trans_id`",
            "trans.`type`",
            "trans.`account_id`",
            "trans.`account`",
            "trans.`amount`",
            "trans.`date`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "ORDER BY",
            "LIMIT",
            "DISTINCT"
        ],
        "conditions": [
            "loan was approved first in 1993/7/5",
            "increase rate of account balance from 1993/3/22 to 1998/12/27"
        ]
    },
    {
        "tables": [
            "loan",
            "account"
        ],
        "columns": [
            "loan.`loan_id`",
            "loan.`amount`",
            "loan.`status`",
            "loan.`account_id`",
            "account.`account_id`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "SUM",
            "GROUP BY",
            "JOIN"
        ],
        "conditions": [
            "loan amount fully paid",
            "no issue"
        ]
    },
    {
        "tables": [
            "loan",
            "account"
        ],
        "columns": [
            "loan.`loan_id`",
            "loan.`amount`",
            "loan.`status`",
            "loan.`account_id`",
            "account.`account_id`",
            "account.`date`",
            "account.`frequency`",
            "account.`district_id`"
        ],
        "sql_keywords": [
            "=",
            "SUM",
            "COUNT",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "loan amount less than USD100,000"
        ]
    },
    {
        "tables": [
            "account",
            "district"
        ],
        "columns": [
            "account.`account_id`",
            "account.`district_id`",
            "account.`frequency`",
            "account.`date`",
            "district.`district_id`",
            "district.`a2`",
            "district.`a3`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "JOIN"
        ],
        "conditions": [
            "accounts in 1993",
            "statement issued after transaction"
        ]
    },
    {
        "tables": [
            "account",
            "client",
            "district",
            "disp"
        ],
        "columns": [
            "account.`account_id`",
            "account.`frequency`",
            "account.`date`",
            "client.`client_id`",
            "client.`gender`",
            "client.`birth_date`",
            "district.`a2`",
            "district.`a3`",
            "district.`district_id`",
            "disp.`client_id`",
            "disp.`account_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "AND",
            "=",
            "BETWEEN"
        ],
        "conditions": [
            "Year 1995 to 2000",
            "accounts holders from 'east Bohemia'",
            "account ID",
            "frequency of statement issuance"
        ]
    },
    {
        "tables": [
            "district",
            "account"
        ],
        "columns": [
            "district.`district_id`",
            "district.`a2`",
            "account.`account_id`",
            "account.`date`",
            "account.`district_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "accounts from 'Prachatice'"
        ]
    },
    {
        "tables": [
            "loan",
            "account",
            "district"
        ],
        "columns": [
            "loan.`loan_id`",
            "loan.`account_id`",
            "account.`account_id`",
            "account.`district_id`",
            "district.`district_id`",
            "district.`a2`",
            "district.`a3`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "loan ID '4990'"
        ]
    },
    {
        "tables": [
            "loan",
            "account",
            "district"
        ],
        "columns": [
            "loan.`account_id`",
            "loan.`amount`",
            "account.`district_id`",
            "district.`a2`",
            "district.`a3`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "loan amount greater than USD300,000"
        ]
    },
    {
        "tables": [
            "loan",
            "account",
            "district"
        ],
        "columns": [
            "loan.`loan_id`",
            "district.`a2`",
            "district.`a11`",
            "loan.`duration`",
            "loan.`account_id`",
            "account.`district_id`",
            "district.`district_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "WHERE"
        ],
        "conditions": [
            "loan duration of 60 months"
        ]
    },
    {
        "tables": [
            "loan",
            "district"
        ],
        "columns": [
            "loan.`loan_id`",
            "loan.`account_id`",
            "loan.`date`",
            "loan.`amount`",
            "loan.`duration`",
            "loan.`payments`",
            "loan.`status`",
            "district.`district_id`",
            "district.`a2`",
            "district.`a3`",
            "district.`a12`",
            "district.`a13`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "SELECT"
        ],
        "conditions": [
            "loans contracts which are still running",
            "client are in debt",
            "percentage unemployment rate increment from year 1995 to 1996"
        ]
    },
    {
        "tables": [
            "account",
            "district"
        ],
        "columns": [
            "account.`account_id`",
            "account.`district_id`",
            "account.`date`",
            "district.`district_id`",
            "district.`a2`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "account from 'Decin' district",
            "accounts opened in 1993"
        ]
    },
    {
        "tables": [
            "account"
        ],
        "columns": [
            "account.`account_id`",
            "account.`frequency`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "monthly issuance of statements"
        ]
    },
    {
        "tables": [
            "district",
            "client",
            "account"
        ],
        "columns": [
            "district.`district_id`",
            "district.`a2`",
            "client.`gender`",
            "client.`client_id`",
            "client.`district_id`",
            "account.`account_id`",
            "account.`district_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "number of female account holders"
        ]
    },
    {
        "tables": [
            "trans",
            "account",
            "district"
        ],
        "columns": [
            "trans.`trans_id`",
            "trans.`account_id`",
            "trans.`date`",
            "trans.`type`",
            "trans.`operation`",
            "trans.`amount`",
            "trans.`balance`",
            "trans.`k_symbol`",
            "trans.`bank`",
            "trans.`account`",
            "account.`account_id`",
            "account.`district_id`",
            "account.`date`",
            "district.`district_id`",
            "district.`a2`",
            "district.`a8`",
            "district.`a3`",
            "district.`a6`",
            "district.`a10`",
            "district.`a5`",
            "district.`a9`",
            "district.`a4`",
            "district.`a7`"
        ],
        "sql_keywords": [
            "LIKE",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "top ten withdrawals",
            "non-credit card",
            "district names",
            "month of January 1996"
        ]
    },
    {
        "tables": [
            "account",
            "district",
            "disp",
            "card"
        ],
        "columns": [
            "account.`account_id`",
            "account.`district_id`",
            "district.`district_id`",
            "district.`a3`",
            "disp.`disp_id`",
            "disp.`account_id`",
            "card.`card_id`",
            "card.`disp_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "account holders in South Bohemia",
            "do not own credit cards"
        ]
    },
    {
        "tables": [
            "district",
            "loan",
            "account"
        ],
        "columns": [
            "district.`a3`",
            "district.`district_id`",
            "loan.`loan_id`",
            "loan.`status`",
            "loan.`account_id`",
            "account.`account_id`",
            "account.`district_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": []
    },
    {
        "tables": [
            "loan",
            "account",
            "disp",
            "client"
        ],
        "columns": [
            "loan.`loan_id`",
            "loan.`amount`",
            "loan.`account_id`",
            "account.`account_id`",
            "disp.`account_id`",
            "disp.`client_id`",
            "client.`client_id`",
            "client.`gender`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "AVG"
        ],
        "conditions": [
            "male borrowers"
        ]
    },
    {
        "tables": [
            "district"
        ],
        "columns": [
            "district.`district_id`",
            "district.`a2`",
            "district.`a13`"
        ],
        "sql_keywords": [
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "year 1996",
            "highest unemployment rate"
        ]
    },
    {
        "tables": [
            "district",
            "account"
        ],
        "columns": [
            "district.`a16`",
            "district.`district_id`",
            "account.`account_id`",
            "account.`district_id`",
            "account.`date`",
            "account.`frequency`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN"
        ],
        "conditions": [
            "largest number of crimes were committed in 1996"
        ]
    },
    {
        "tables": [
            "trans",
            "account"
        ],
        "columns": [
            "trans.`account_id`",
            "trans.`type`",
            "trans.`operation`",
            "trans.`balance`",
            "account.`account_id`",
            "account.`frequency`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "=",
            "<"
        ],
        "conditions": [
            "credit card withdrawal",
            "monthly issuance",
            "negative balance"
        ]
    },
    {
        "tables": [
            "loan",
            "account"
        ],
        "columns": [
            "loan.`date`",
            "loan.`amount`",
            "loan.`account_id`",
            "account.`account_id`",
            "account.`frequency`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "date between 1/1/1995 and 12/31/1997",
            "loan amount of at least 250,000 per account",
            "monthly statement issuance chosen",
            "loans approved"
        ]
    },
    {
        "tables": [
            "loan",
            "account"
        ],
        "columns": [
            "loan.`status`",
            "loan.`account_id`",
            "account.`account_id`",
            "account.`district_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "running contracts",
            "Branch location 1"
        ]
    },
    {
        "tables": [
            "district",
            "client"
        ],
        "columns": [
            "district.`district_id`",
            "district.`a15`",
            "client.`client_id`",
            "client.`district_id`",
            "client.`gender`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "ORDER BY",
            "LIMIT",
            "OFFSET",
            "JOIN"
        ],
        "conditions": [
            "second-highest number of crimes were committed in 1995",
            "male clients"
        ]
    },
    {
        "tables": [
            "card",
            "disp"
        ],
        "columns": [
            "card.`card_id`",
            "card.`disp_id`",
            "card.`type`",
            "card.`issued`",
            "disp.`disp_id`",
            "disp.`type`",
            "disp.`client_id`",
            "disp.`account_id`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "high-level credit cards",
            "OWNER type of disposition"
        ]
    },
    {
        "tables": [
            "district",
            "account"
        ],
        "columns": [
            "district.`district_id`",
            "district.`a2`",
            "account.`account_id`",
            "account.`district_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "district of Pisek"
        ]
    },
    {
        "tables": [
            "trans",
            "account",
            "district"
        ],
        "columns": [
            "trans.`trans_id`",
            "trans.`account_id`",
            "trans.`amount`",
            "trans.`date`",
            "account.`account_id`",
            "account.`district_id`",
            "district.`district_id`",
            "district.`a2`",
            "district.`a3`",
            "district.`a4`",
            "district.`a5`",
            "district.`a6`",
            "district.`a7`",
            "district.`a8`",
            "district.`a9`",
            "district.`a10`",
            "district.`a11`",
            "district.`a12`",
            "district.`a13`",
            "district.`a14`",
            "district.`a15`",
            "district.`a16`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "transactions greater than USS$10,000",
            "year 1997"
        ]
    },
    {
        "tables": [
            "order",
            "account",
            "district"
        ],
        "columns": [
            "order.`k_symbol`",
            "order.`account_id`",
            "order.`amount`",
            "account.`account_id`",
            "account.`district_id`",
            "district.`district_id`",
            "district.`a2`"
        ],
        "sql_keywords": [
            "LIKE",
            "JOIN"
        ],
        "conditions": [
            "accounts placed orders for household payment",
            "in Pisek"
        ]
    },
    {
        "tables": [
            "card",
            "disp",
            "account"
        ],
        "columns": [
            "card.`card_id`",
            "card.`disp_id`",
            "card.`type`",
            "disp.`disp_id`",
            "disp.`account_id`",
            "account.`account_id`",
            "account.`district_id`",
            "account.`frequency`",
            "account.`date`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "gold credit cards"
        ]
    },
    {
        "tables": [
            "trans",
            "account",
            "disp",
            "card"
        ],
        "columns": [
            "trans.`account_id`",
            "trans.`amount`",
            "trans.`date`",
            "trans.`operation`",
            "account.`account_id`",
            "disp.`disp_id`",
            "card.`disp_id`",
            "card.`type`",
            "card.`issued`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "YEAR",
            "MONTH"
        ],
        "conditions": [
            "year 2021"
        ]
    },
    {
        "tables": [
            "account",
            "disp",
            "card",
            "trans"
        ],
        "columns": [
            "account.`account_id`",
            "account.`district_id`",
            "account.`frequency`",
            "account.`date`",
            "disp.`type`",
            "disp.`client_id`",
            "disp.`disp_id`",
            "disp.`account_id`",
            "card.`disp_id`",
            "card.`type`",
            "card.`issued`",
            "card.`card_id`",
            "trans.`bank`",
            "trans.`balance`",
            "trans.`operation`",
            "trans.`k_symbol`",
            "trans.`trans_id`",
            "trans.`type`",
            "trans.`account_id`",
            "trans.`account`",
            "trans.`amount`",
            "trans.`date`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING",
            "LIKE"
        ],
        "conditions": [
            "account holder identification numbers",
            "transactions on the credit card",
            "amount is less than the average",
            "in 1998"
        ]
    },
    {
        "tables": [
            "account",
            "client",
            "disp",
            "loan",
            "card"
        ],
        "columns": [
            "account.`account_id`",
            "account.`district_id`",
            "account.`frequency`",
            "account.`date`",
            "client.`gender`",
            "client.`client_id`",
            "client.`district_id`",
            "client.`birth_date`",
            "disp.`type`",
            "disp.`client_id`",
            "disp.`disp_id`",
            "disp.`account_id`",
            "loan.`duration`",
            "loan.`date`",
            "loan.`amount`",
            "loan.`payments`",
            "loan.`loan_id`",
            "loan.`status`",
            "loan.`account_id`",
            "card.`disp_id`",
            "card.`type`",
            "card.`issued`",
            "card.`card_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "AND",
            "EXISTS"
        ],
        "conditions": [
            "female account holders",
            "own credit cards",
            "have loans"
        ]
    },
    {
        "tables": [
            "client",
            "district",
            "account",
            "disp"
        ],
        "columns": [
            "client.`client_id`",
            "client.`district_id`",
            "client.`gender`",
            "district.`district_id`",
            "district.`a3`",
            "account.`account_id`",
            "account.`district_id`",
            "disp.`client_id`",
            "disp.`account_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "female clients",
            "accounts in the region of South Bohemia"
        ]
    },
    {
        "tables": [
            "account",
            "district",
            "disp",
            "loan"
        ],
        "columns": [
            "account.`account_id`",
            "account.`district_id`",
            "account.`frequency`",
            "account.`date`",
            "district.`district_id`",
            "district.`a2`",
            "disp.`disp_id`",
            "disp.`type`",
            "disp.`client_id`",
            "disp.`account_id`",
            "loan.`account_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "district is Tabor",
            "eligible for loans"
        ]
    },
    {
        "tables": [
            "disp",
            "account",
            "district"
        ],
        "columns": [
            "disp.`type`",
            "account.`account_id`",
            "account.`district_id`",
            "district.`a11`",
            "district.`district_id`"
        ],
        "sql_keywords": [
            "NOT",
            "EXISTS",
            "JOIN",
            "WHERE",
            "AND",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "account types that are not eligible for loans",
            "average income of residents in the district where the account is located exceeds $8000",
            "average income of residents in the district where the account is located is no more than $9000"
        ]
    },
    {
        "tables": [
            "account",
            "trans",
            "district"
        ],
        "columns": [
            "account.`account_id`",
            "account.`district_id`",
            "trans.`account_id`",
            "trans.`bank`",
            "district.`district_id`",
            "district.`a3`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "COUNT"
        ],
        "conditions": [
            "accounts in North Bohemia",
            "made a transaction",
            "partner's bank being AB"
        ]
    },
    {
        "tables": [
            "district",
            "account",
            "trans"
        ],
        "columns": [
            "district.`a2`",
            "account.`account_id`",
            "account.`district_id`",
            "trans.`account_id`",
            "trans.`type`",
            "trans.`operation`",
            "trans.`amount`",
            "trans.`balance`",
            "trans.`k_symbol`",
            "trans.`bank`",
            "trans.`account`",
            "trans.`date`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "accounts that made withdrawal transactions"
        ]
    },
    {
        "tables": [
            "district",
            "account"
        ],
        "columns": [
            "district.`a15`",
            "district.`a3`",
            "account.`date`",
            "account.`district_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "number of crimes exceeds 4000",
            "region has accounts opened starting from the year 1997"
        ]
    },
    {
        "tables": [
            "card",
            "disp",
            "account",
            "loan"
        ],
        "columns": [
            "card.`card_id`",
            "card.`disp_id`",
            "card.`type`",
            "card.`issued`",
            "disp.`type`",
            "disp.`client_id`",
            "disp.`disp_id`",
            "disp.`account_id`",
            "account.`account_id`",
            "account.`district_id`",
            "account.`frequency`",
            "account.`date`",
            "loan.`loan_id`",
            "loan.`account_id`",
            "loan.`date`",
            "loan.`amount`",
            "loan.`duration`",
            "loan.`payments`",
            "loan.`status`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "COUNT"
        ],
        "conditions": [
            "classic cards",
            "eligible for loan"
        ]
    },
    {
        "tables": [
            "client",
            "district"
        ],
        "columns": [
            "client.`client_id`",
            "client.`district_id`",
            "client.`gender`",
            "district.`district_id`",
            "district.`a2`"
        ],
        "sql_keywords": [
            "=",
            "COUNT"
        ],
        "conditions": [
            "male clients",
            "Hl.m. Praha district"
        ]
    },
    {
        "tables": [
            "card",
            "disp"
        ],
        "columns": [
            "card.`type`",
            "card.`issued`",
            "card.`disp_id`",
            "disp.`type`"
        ],
        "sql_keywords": [
            "COUNT",
            "WHERE",
            "AND",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "Gold cards",
            "issued prior to 1998"
        ]
    },
    {
        "tables": [
            "account",
            "loan",
            "disp",
            "client"
        ],
        "columns": [
            "account.`account_id`",
            "account.`district_id`",
            "loan.`loan_id`",
            "loan.`amount`",
            "disp.`disp_id`",
            "disp.`client_id`",
            "client.`client_id`",
            "client.`gender`",
            "client.`birth_date`",
            "client.`district_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "largest loan amount"
        ]
    },
    {
        "tables": [
            "account",
            "district"
        ],
        "columns": [
            "account.`account_id`",
            "account.`district_id`",
            "district.`district_id`",
            "district.`a15`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN"
        ],
        "conditions": [
            "year 1995",
            "district of the account with the id 532"
        ]
    },
    {
        "tables": [
            "order",
            "account"
        ],
        "columns": [
            "order.`account_id`",
            "order.`order_id`",
            "account.`account_id`",
            "account.`district_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "order id 33333"
        ]
    },
    {
        "tables": [
            "trans",
            "disp",
            "client"
        ],
        "columns": [
            "trans.`trans_id`",
            "trans.`account_id`",
            "trans.`date`",
            "trans.`type`",
            "trans.`operation`",
            "trans.`amount`",
            "trans.`balance`",
            "trans.`k_symbol`",
            "trans.`bank`",
            "trans.`account`",
            "disp.`disp_id`",
            "disp.`client_id`",
            "disp.`type`",
            "client.`client_id`",
            "client.`gender`",
            "client.`district_id`",
            "client.`birth_date`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "client id is 3356",
            "transaction type is cash",
            "transaction type is withdrawal"
        ]
    },
    {
        "tables": [
            "account",
            "loan"
        ],
        "columns": [
            "account.`account_id`",
            "account.`frequency`",
            "loan.`account_id`",
            "loan.`amount`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "=",
            "<"
        ],
        "conditions": [
            "weekly issuance accounts",
            "loan of under 200000"
        ]
    },
    {
        "tables": [
            "card",
            "disp",
            "client"
        ],
        "columns": [
            "card.`card_id`",
            "card.`disp_id`",
            "card.`type`",
            "disp.`disp_id`",
            "disp.`client_id`",
            "disp.`account_id`",
            "client.`client_id`",
            "client.`district_id`",
            "client.`gender`",
            "client.`birth_date`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "client with the id 13539"
        ]
    },
    {
        "tables": [
            "client",
            "district"
        ],
        "columns": [
            "client.`client_id`",
            "client.`district_id`",
            "district.`a3`",
            "district.`district_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "client id 3541"
        ]
    },
    {
        "tables": [
            "district",
            "account",
            "loan"
        ],
        "columns": [
            "district.`district_id`",
            "district.`a2`",
            "account.`account_id`",
            "account.`district_id`",
            "loan.`account_id`",
            "loan.`status`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "loan contracts finished with no problems"
        ]
    },
    {
        "tables": [
            "order",
            "account",
            "disp",
            "client"
        ],
        "columns": [
            "order.`order_id`",
            "order.`account_id`",
            "account.`account_id`",
            "account.`district_id`",
            "account.`date`",
            "disp.`disp_id`",
            "disp.`client_id`",
            "disp.`account_id`",
            "client.`client_id`",
            "client.`district_id`",
            "client.`gender`",
            "client.`birth_date`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "order id 32423"
        ]
    },
    {
        "tables": [
            "trans",
            "account"
        ],
        "columns": [
            "trans.`trans_id`",
            "trans.`account_id`",
            "trans.`date`",
            "trans.`type`",
            "trans.`operation`",
            "trans.`amount`",
            "trans.`balance`",
            "trans.`k_symbol`",
            "trans.`bank`",
            "trans.`account`",
            "account.`account_id`",
            "account.`district_id`",
            "account.`date`",
            "account.`frequency`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "accounts from district 5"
        ]
    },
    {
        "tables": [
            "account",
            "district"
        ],
        "columns": [
            "account.`account_id`",
            "account.`district_id`",
            "district.`district_id`",
            "district.`a2`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "from Jesenik district"
        ]
    },
    {
        "tables": [
            "card",
            "disp",
            "client"
        ],
        "columns": [
            "card.`card_id`",
            "card.`disp_id`",
            "card.`type`",
            "card.`issued`",
            "disp.`disp_id`",
            "disp.`client_id`",
            "client.`client_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "=",
            ">"
        ],
        "conditions": [
            "junior credit cards",
            "issued after 1996"
        ]
    },
    {
        "tables": [
            "client",
            "account",
            "district"
        ],
        "columns": [
            "client.`client_id`",
            "client.`district_id`",
            "client.`gender`",
            "account.`account_id`",
            "account.`district_id`",
            "account.`date`",
            "district.`district_id`",
            "district.`a11`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "COUNT"
        ],
        "conditions": [
            "opened their accounts in the district with an average salary of over 10000",
            "are women"
        ]
    },
    {
        "tables": [
            "account",
            "client",
            "loan",
            "disp"
        ],
        "columns": [
            "account.`account_id`",
            "account.`date`",
            "client.`gender`",
            "client.`client_id`",
            "loan.`amount`",
            "loan.`date`",
            "disp.`client_id`",
            "disp.`account_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "SUM",
            "GROUP BY",
            "HAVING",
            "YEAR",
            "CASE",
            "WHEN",
            "THEN",
            "ELSE",
            "END"
        ],
        "conditions": [
            "male client",
            "between 1996 and 1997"
        ]
    },
    {
        "tables": [
            "trans",
            "card",
            "disp"
        ],
        "columns": [
            "trans.`trans_id`",
            "trans.`account_id`",
            "trans.`date`",
            "trans.`type`",
            "trans.`operation`",
            "trans.`amount`",
            "trans.`balance`",
            "trans.`k_symbol`",
            "trans.`bank`",
            "trans.`account`",
            "card.`card_id`",
            "card.`disp_id`",
            "card.`type`",
            "card.`issued`",
            "disp.`disp_id`",
            "disp.`client_id`",
            "disp.`account_id`",
            "disp.`type`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "DATE FILTER"
        ],
        "conditions": [
            "credit card withdrawals",
            "after 1995"
        ]
    },
    {
        "tables": [
            "district"
        ],
        "columns": [
            "district.`a3`",
            "district.`a16`"
        ],
        "sql_keywords": [
            "=",
            "SUM"
        ],
        "conditions": [
            "number of crimes committed in East Bohemia in 1996",
            "number of crimes committed in North Bohemia in 1996"
        ]
    },
    {
        "tables": [
            "disp",
            "account"
        ],
        "columns": [
            "disp.`disp_id`",
            "disp.`type`",
            "disp.`client_id`",
            "disp.`account_id`",
            "account.`account_id`",
            "account.`date`",
            "account.`frequency`",
            "account.`district_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "LIKE"
        ],
        "conditions": [
            "owner dispositions",
            "disponent dispositions",
            "account number 1 to account number 10"
        ]
    },
    {
        "tables": [
            "account",
            "trans"
        ],
        "columns": [
            "account.`account_id`",
            "account.`frequency`",
            "trans.`account_id`",
            "trans.`operation`",
            "trans.`amount`",
            "trans.`k_symbol`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "EXACT MATCHING"
        ],
        "conditions": [
            "account number 3",
            "request an account statement",
            "debiting 3539 in total"
        ]
    },
    {
        "tables": [
            "client",
            "disp"
        ],
        "columns": [
            "client.`client_id`",
            "client.`birth_date`",
            "disp.`client_id`",
            "disp.`type`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "account owner number 130"
        ]
    },
    {
        "tables": [
            "account",
            "disp",
            "trans"
        ],
        "columns": [
            "account.`account_id`",
            "account.`district_id`",
            "account.`frequency`",
            "disp.`type`",
            "disp.`client_id`",
            "disp.`disp_id`",
            "disp.`account_id`",
            "trans.`bank`",
            "trans.`balance`",
            "trans.`operation`",
            "trans.`k_symbol`",
            "trans.`trans_id`",
            "trans.`type`",
            "trans.`account_id`",
            "trans.`account`",
            "trans.`amount`",
            "trans.`date`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "owner disposition",
            "request for a statement to be generated upon a transaction"
        ]
    },
    {
        "tables": [
            "client",
            "disp",
            "account",
            "loan"
        ],
        "columns": [
            "client.`client_id`",
            "client.`gender`",
            "client.`birth_date`",
            "client.`district_id`",
            "disp.`type`",
            "disp.`disp_id`",
            "disp.`account_id`",
            "account.`account_id`",
            "account.`district_id`",
            "account.`frequency`",
            "account.`date`",
            "loan.`loan_id`",
            "loan.`account_id`",
            "loan.`date`",
            "loan.`amount`",
            "loan.`duration`",
            "loan.`payments`",
            "loan.`status`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "client number 992",
            "amount of debt",
            "client doing with payments"
        ]
    },
    {
        "tables": [
            "client",
            "account",
            "trans",
            "disp"
        ],
        "columns": [
            "client.`client_id`",
            "client.`gender`",
            "client.`district_id`",
            "client.`birth_date`",
            "account.`account_id`",
            "account.`district_id`",
            "trans.`trans_id`",
            "trans.`type`",
            "trans.`account_id`",
            "trans.`account`",
            "trans.`amount`",
            "disp.`type`",
            "disp.`client_id`",
            "disp.`disp_id`",
            "disp.`account_id`"
        ],
        "sql_keywords": [
            "SUM",
            "JOIN",
            "WHERE",
            "AND",
            "="
        ],
        "conditions": [
            "client number 4's account",
            "following transaction 851",
            "Who owns this account, a man or a woman?"
        ]
    },
    {
        "tables": [
            "card",
            "disp",
            "client"
        ],
        "columns": [
            "card.`card_id`",
            "card.`disp_id`",
            "card.`type`",
            "disp.`disp_id`",
            "disp.`client_id`",
            "client.`client_id`",
            "client.`district_id`",
            "client.`gender`",
            "client.`birth_date`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "client number 9"
        ]
    },
    {
        "tables": [
            "client",
            "disp",
            "trans"
        ],
        "columns": [
            "client.`client_id`",
            "client.`gender`",
            "client.`birth_date`",
            "client.`district_id`",
            "disp.`disp_id`",
            "disp.`type`",
            "disp.`account_id`",
            "trans.`trans_id`",
            "trans.`account_id`",
            "trans.`date`",
            "trans.`type`",
            "trans.`operation`",
            "trans.`amount`",
            "trans.`balance`",
            "trans.`k_symbol`",
            "trans.`bank`",
            "trans.`account`"
        ],
        "sql_keywords": [
            "SUM",
            "="
        ],
        "conditions": [
            "client number 617",
            "transactions in 1998"
        ]
    },
    {
        "tables": [
            "client",
            "district",
            "account",
            "disp"
        ],
        "columns": [
            "client.`client_id`",
            "client.`birth_date`",
            "client.`district_id`",
            "district.`district_id`",
            "district.`a2`",
            "district.`a3`",
            "account.`account_id`",
            "account.`district_id`",
            "account.`date`",
            "disp.`disp_id`",
            "disp.`client_id`",
            "disp.`account_id`"
        ],
        "sql_keywords": [
            "BETWEEN",
            "AND",
            "JOIN"
        ],
        "conditions": [
            "born between 1983 and 1987",
            "account branch is in East Bohemia"
        ]
    },
    {
        "tables": [
            "client",
            "loan",
            "disp"
        ],
        "columns": [
            "client.`client_id`",
            "client.`gender`",
            "client.`birth_date`",
            "client.`district_id`",
            "loan.`loan_id`",
            "loan.`account_id`",
            "loan.`date`",
            "loan.`amount`",
            "loan.`duration`",
            "loan.`payments`",
            "loan.`status`",
            "disp.`type`",
            "disp.`client_id`",
            "disp.`disp_id`",
            "disp.`account_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "female clients",
            "largest loans"
        ]
    },
    {
        "tables": [
            "client",
            "disp",
            "account",
            "order"
        ],
        "columns": [
            "client.`client_id`",
            "client.`gender`",
            "client.`birth_date`",
            "disp.`client_id`",
            "disp.`account_id`",
            "account.`account_id`",
            "order.`account_id`",
            "order.`amount`",
            "order.`k_symbol`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "=",
            ">"
        ],
        "conditions": [
            "male customers",
            "born between 1974 and 1976",
            "made a payment on their home in excess of $4000"
        ]
    },
    {
        "tables": [
            "account",
            "district"
        ],
        "columns": [
            "account.`date`",
            "account.`account_id`",
            "account.`district_id`",
            "district.`district_id`",
            "district.`a2`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            ">"
        ],
        "conditions": [
            "accounts in Beroun",
            "opened after 1996"
        ]
    },
    {
        "tables": [
            "client",
            "disp",
            "card"
        ],
        "columns": [
            "client.`client_id`",
            "client.`gender`",
            "disp.`disp_id`",
            "disp.`client_id`",
            "disp.`type`",
            "card.`card_id`",
            "card.`disp_id`",
            "card.`type`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "="
        ],
        "conditions": [
            "female customers",
            "junior credit card"
        ]
    },
    {
        "tables": [
            "district",
            "account",
            "client"
        ],
        "columns": [
            "district.`a3`",
            "district.`district_id`",
            "account.`account_id`",
            "account.`district_id`",
            "client.`client_id`",
            "client.`district_id`",
            "client.`gender`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "COUNT"
        ],
        "conditions": [
            "customers have accounts at the Prague branch",
            "customers are female"
        ]
    },
    {
        "tables": [
            "client",
            "account"
        ],
        "columns": [
            "client.`client_id`",
            "client.`gender`",
            "account.`account_id`",
            "account.`frequency`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "COUNT"
        ],
        "conditions": [
            "male clients",
            "request for weekly statements"
        ]
    },
    {
        "tables": [
            "client",
            "account",
            "disp"
        ],
        "columns": [
            "client.`client_id`",
            "client.`district_id`",
            "client.`gender`",
            "client.`birth_date`",
            "account.`date`",
            "account.`account_id`",
            "account.`frequency`",
            "account.`district_id`",
            "disp.`disp_id`",
            "disp.`type`",
            "disp.`client_id`",
            "disp.`account_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "COUNT"
        ],
        "conditions": [
            "choose statement of weekly issuance",
            "are Owner"
        ]
    },
    {
        "tables": [
            "loan",
            "account"
        ],
        "columns": [
            "loan.`loan_id`",
            "loan.`account_id`",
            "loan.`date`",
            "loan.`amount`",
            "loan.`duration`",
            "loan.`payments`",
            "loan.`status`",
            "account.`account_id`",
            "account.`date`",
            "account.`frequency`",
            "account.`district_id`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "loan validity more than 24 months",
            "lowest approved amount",
            "account opening date before 1997"
        ]
    },
    {
        "tables": [
            "client",
            "district",
            "disp",
            "account"
        ],
        "columns": [
            "client.`client_id`",
            "client.`gender`",
            "client.`birth_date`",
            "client.`district_id`",
            "district.`district_id`",
            "district.`a11`",
            "disp.`client_id`",
            "disp.`account_id`",
            "account.`account_id`",
            "account.`district_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "female clients",
            "oldest",
            "lowest average salary"
        ]
    },
    {
        "tables": [
            "client",
            "district"
        ],
        "columns": [
            "client.`client_id`",
            "client.`birth_date`",
            "client.`district_id`",
            "district.`district_id`",
            "district.`a3`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "born in 1920",
            "stay in east Bohemia"
        ]
    },
    {
        "tables": [
            "loan",
            "account"
        ],
        "columns": [
            "loan.`loan_id`",
            "loan.`account_id`",
            "loan.`duration`",
            "account.`account_id`",
            "account.`frequency`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "pre-payment of duration of 24 months",
            "weekly issuance of statement"
        ]
    },
    {
        "tables": [
            "loan",
            "account"
        ],
        "columns": [
            "loan.`loan_id`",
            "loan.`amount`",
            "loan.`status`",
            "loan.`account_id`",
            "account.`account_id`",
            "account.`frequency`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "loan is still on running contract",
            "statement issuance after each transaction"
        ]
    },
    {
        "tables": [
            "client",
            "disp",
            "account",
            "district"
        ],
        "columns": [
            "client.`client_id`",
            "client.`district_id`",
            "disp.`type`",
            "disp.`account_id`",
            "account.`account_id`",
            "account.`district_id`",
            "district.`district_id`",
            "district.`a2`",
            "district.`a3`",
            "district.`a4`",
            "district.`a5`",
            "district.`a6`",
            "district.`a7`",
            "district.`a8`",
            "district.`a9`",
            "district.`a10`",
            "district.`a11`",
            "district.`a12`",
            "district.`a13`",
            "district.`a14`",
            "district.`a15`",
            "district.`a16`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "clients can only have the right to issue permanent orders",
            "clients can only have the right to apply for loans"
        ]
    },
    {
        "tables": [
            "client",
            "disp",
            "card"
        ],
        "columns": [
            "client.`client_id`",
            "client.`birth_date`",
            "disp.`disp_id`",
            "disp.`type`",
            "card.`card_id`",
            "card.`type`",
            "card.`disp_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "high level credit card",
            "eligible for loans"
        ]
    },
    {
        "tables": [
            "bond"
        ],
        "columns": [
            "bond.`bond_type`"
        ],
        "sql_keywords": [
            "COUNT",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "non-carcinogenic molecules",
            "contain chlorine atoms"
        ]
    },
    {
        "tables": [
            "bond",
            "atom",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "atom.`molecule_id`",
            "atom.`element`",
            "atom.`atom_id`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "molecule",
            "bond",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "COUNT",
            "SUM"
        ],
        "conditions": [
            "carcinogenic molecules",
            "single bonded"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "=",
            "AND"
        ],
        "conditions": [
            "molecule containing sodium atoms",
            "non-carcinogenic"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`label`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "=",
            "INTERSECT"
        ],
        "conditions": [
            "triple-bonded molecules",
            "carcinogenic"
        ]
    },
    {
        "tables": [
            "bond",
            "atom",
            "molecule",
            "connected"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`",
            "molecule.`molecule_id`",
            "molecule.`label`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "SUM",
            "COUNT"
        ],
        "conditions": [
            "double-bond molecules"
        ]
    },
    {
        "tables": [
            "bond"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "NOT LIKE",
            "COUNT"
        ],
        "conditions": [
            "no bromine"
        ]
    },
    {
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "first 100 molecules in number order",
            "carcinogenic"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "there is carbon"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "TR004_8_9 bond atoms"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "double type bond"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "COUNT",
            "MAX"
        ],
        "conditions": [
            "type of label",
            "atoms with hydrogen"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "DISTINCT"
        ],
        "conditions": [
            "Chlorine is in what type of bond?"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "atoms are connected in single type bonds"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom",
            "bond",
            "connected"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "bond.`molecule_id`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "="
        ],
        "conditions": [
            "non-carcinogenic type molecules"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`label`",
            "molecule.`molecule_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "non-carcinogenic molecules"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "type of bond between atoms TR004_8 and TR004_20"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`label`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "=",
            "NOT LIKE"
        ],
        "conditions": [
            "molecules with atoms with tin"
        ]
    },
    {
        "tables": [
            "atom",
            "bond",
            "connected"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`",
            "bond.`bond_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "iodine type elements",
            "sulfur type elements",
            "single bond molecules"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`",
            "atom.`atom_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "connected atoms with a triple bond"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom",
            "bond",
            "connected"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`",
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN"
        ],
        "conditions": [
            "atoms connected to the atoms of the TR181 molecule"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`molecule_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "=",
            "COUNT",
            "SUM",
            "DIVIDE"
        ],
        "conditions": [
            "carcinogenic-type molecules",
            "does not contain fluorine"
        ]
    },
    {
        "tables": [
            "molecule",
            "bond"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "DIVIDE",
            "WHERE",
            "JOIN"
        ],
        "conditions": [
            "triple type bonds"
        ]
    },
    {
        "tables": [
            "atom",
            "molecule"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`",
            "molecule.`label`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "ORDER BY"
        ],
        "conditions": [
            "alphabetical order",
            "molecule TR000",
            "top three elements",
            "toxicology"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "molecule TR001",
            "bond ID of TR001_2_6"
        ]
    },
    {
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "SUM",
            "SUBTRACT"
        ],
        "conditions": [
            "carcinogenic",
            "not carcinogenic"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN"
        ],
        "conditions": [
            "bond TR000_2_5"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "bond IDs that have the same atom ID 2 of TR000_2"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`label`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "molecules with double bonds",
            "top five",
            "alphabetical order"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "AS",
            "WHERE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "AS",
            "DIVIDE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "atom",
            "molecule"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "DIVIDE",
            "WHERE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`label`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "type of bond",
            "molecule TR000",
            "involved in any bonds"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "toxicology",
            "label of molecule TR060"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "MAX",
            "COUNT",
            "GROUP BY",
            "JOIN",
            "="
        ],
        "conditions": [
            "bond type accounted for the majority of the bonds found in molecule TR010",
            "molecule TR010 is carcinogenic"
        ]
    },
    {
        "tables": [
            "molecule",
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`",
            "atom.`atom_id`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "single bonds between two atoms",
            "not carcinogenic"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`label`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "alphabetical order",
            "bonds",
            "molecule TR006",
            "top two"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom",
            "bond",
            "connected"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "GROUP BY"
        ],
        "conditions": [
            "bonds involved atom 12",
            "molecule TR009"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "carcinogenic",
            "contain bromine element"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`",
            "atom.`atom_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "bond type",
            "atoms of the bond ID",
            "bond ID of TR001_6_9"
        ]
    },
    {
        "tables": [
            "atom",
            "molecule"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "atom TR001_10",
            "molecule",
            "carcinogenic"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_type`",
            "bond.`molecule_id`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "molecules have a triple bond type"
        ]
    },
    {
        "tables": [
            "atom",
            "connected",
            "bond"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`"
        ],
        "sql_keywords": [
            "COUNT",
            "JOIN",
            "WHERE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "toxicology of the molecule TR004"
        ]
    },
    {
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "not carcinogenic"
        ]
    },
    {
        "tables": [
            "atom",
            "molecule"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "SUBSTR",
            "BETWEEN",
            "JOIN",
            "="
        ],
        "conditions": [
            "atoms from 21 to 25",
            "carcinogenic"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "bonds that have phosphorus",
            "bonds that have nitrogen"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "molecule with the most double bonds",
            "carcinogenic"
        ]
    },
    {
        "tables": [
            "atom",
            "bond",
            "connected"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`",
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`"
        ],
        "sql_keywords": [
            "COUNT",
            "GROUP BY",
            "HAVING",
            "AVG"
        ],
        "conditions": [
            "element iodine"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`atom_id`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "=",
            "SUBSTR"
        ],
        "conditions": [
            "bond type",
            "bond ID",
            "atom 45"
        ]
    },
    {
        "tables": [
            "atom",
            "connected"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`element`",
            "connected.`atom_id`",
            "connected.`atom_id2`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "NOT IN"
        ],
        "conditions": [
            "elements of atoms that can not bond with any other atoms"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`",
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "triple bond",
            "molecule TR041"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "atom.`element`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "elements of the atoms of TR144_8_19"
        ]
    },
    {
        "tables": [
            "molecule",
            "bond"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "bond.`molecule_id`",
            "bond.`bond_type`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "carcinogenic molecules",
            "most double bonds"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`label`",
            "molecule.`molecule_id`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "carcinogenic molecules"
        ]
    },
    {
        "tables": [
            "atom",
            "connected",
            "bond"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`",
            "connected.`bond_id`",
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "="
        ],
        "conditions": [
            "element lead"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "DISTINCT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "GROUP BY",
            "HAVING",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "most common combination of atoms' elements"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "SUM",
            "COUNT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.`element`",
            "atom.`molecule_id`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "COUNT",
            "IN"
        ],
        "conditions": [
            "element carbon",
            "element hydrogen"
        ]
    },
    {
        "tables": [
            "atom",
            "connected"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "element sulfur"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "element Tin"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "OR"
        ],
        "conditions": [
            "triple-bond molecules",
            "element phosphorus",
            "element bromine"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "molecules are carcinogenic"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "single bond molecule",
            "not carcinogenic"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "SUM",
            "COUNT",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "composition of element chlorine",
            "percentage among the single bond molecules"
        ]
    },
    {
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "TR000",
            "TR001",
            "TR002"
        ]
    },
    {
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "non carcinogenic molecules"
        ]
    },
    {
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "=",
            "DISTINCT"
        ],
        "conditions": [
            "molecule id from TR000 to TR030"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "molecule id TR000 to TR050"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "bond id TR001_10_11"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "COUNT"
        ],
        "conditions": [
            "bond id",
            "element iodine"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`label`",
            "atom.`element`",
            "atom.`molecule_id`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "molecules with element Calcium",
            "carcinogenic",
            "non carcinogenic"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`",
            "atom.`molecule_id`",
            "atom.`element`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "AND"
        ],
        "conditions": [
            "bond id TR001_1_8",
            "element of chlorine",
            "element of carbon"
        ]
    },
    {
        "tables": [
            "molecule",
            "bond",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "atom.`molecule_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "triple bond",
            "non carcinogenic",
            "element carbon"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "SUM",
            "COUNT",
            "WHERE",
            "GROUP BY"
        ],
        "conditions": [
            "element chlorine",
            "carcinogenic molecules"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "toxicology elements associated with molecule TR001"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "molecule ID",
            "double bond type"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`",
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "first atom of triple bond type molecules",
            "second atom of triple bond type molecules"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "bond ID TR000_1_2"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "COUNT"
        ],
        "conditions": [
            "single bond type molecules",
            "non-carcinogenic"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "molecule.`label`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "bond ID TR001_10_11"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`bond_type`",
            "bond.`molecule_id`",
            "molecule.`label`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "bond ID of triple bond type molecules",
            "carcinogenic or not"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "SUBSTR",
            "="
        ],
        "conditions": [
            "toxicology element of the 4th atom",
            "carcinogenic"
        ]
    },
    {
        "tables": [
            "atom",
            "molecule"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "CASE",
            "WHEN",
            "THEN",
            "ELSE",
            "END",
            "AS"
        ],
        "conditions": [
            "ratio of Hydrogen elements in molecule ID TR006"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`label`",
            "atom.`element`",
            "atom.`molecule_id`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "chemical compound contains Calcium",
            "carcinogenic"
        ]
    },
    {
        "tables": [
            "bond",
            "atom",
            "connected"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "element Carbon"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "chemical elements",
            "form a bond TR001_10_11"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_type`",
            "bond.`molecule_id`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "chemical compounds identified in the database",
            "compounds form a triple-bond"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "DIVIDE",
            "WHERE"
        ],
        "conditions": [
            "chemical compounds contain molecule TR047",
            "form a double-bond"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`label`",
            "molecule.`molecule_id`",
            "atom.`atom_id`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "molecule contains atom TR001_1",
            "carcinogenic"
        ]
    },
    {
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "molecule TR151 carcinogenic"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "toxic element",
            "molecule TR151"
        ]
    },
    {
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "COUNT",
            "DISTINCT"
        ],
        "conditions": [
            "chemical compounds",
            "carcinogenic"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "LIKE",
            "AND",
            "="
        ],
        "conditions": [
            "molecule ID between TR010 to TR050",
            "contain the element carbon"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`label`",
            "molecule.`molecule_id`",
            "atom.`atom_id`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "COUNT"
        ],
        "conditions": [
            "molecule labeled with carcinogenic compounds"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule",
            "connected"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`molecule_id`",
            "molecule.`label`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "bond ids are double-bond",
            "carcinogenic compound"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "element is hydrogen",
            "labeled with carcinogenic compound"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "atom.`molecule_id`",
            "atom.`atom_id`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "molecule id is belonging to the TR000_1_2 bond",
            "first atom named TR000_1"
        ]
    },
    {
        "tables": [
            "atom",
            "molecule"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "atoms contain element carbon",
            "does not contain compound carcinogenic"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`molecule_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "molecules containing carcinogenic compounds",
            "element is hydrogen"
        ]
    },
    {
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "molecule TR124 carcinogenic"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "atoms comprise TR186"
        ]
    },
    {
        "tables": [
            "bond"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`bond_type`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "bond type of TR007_4_19"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`",
            "atom.`molecule_id`",
            "atom.`element`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "atoms of bond TR001_2_4"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`label`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "=",
            "INTERSECT"
        ],
        "conditions": [
            "double bonds",
            "carcinogenic"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "carcinogenic molecules",
            "their elements"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`",
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "bonds with single bond types",
            "atoms connected to the molecules"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`label`",
            "molecule.`molecule_id`",
            "atom.`molecule_id`",
            "atom.`element`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "DISTINCT"
        ],
        "conditions": [
            "molecules have triple bonds",
            "list all the elements they contain"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "atoms' elements that form bond TR000_2_3"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "COUNT"
        ],
        "conditions": [
            "bonding atoms with chlorine element"
        ]
    },
    {
        "tables": [
            "atom",
            "molecule",
            "bond"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "molecule.`molecule_id`",
            "bond.`bond_type`",
            "bond.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "COUNT"
        ],
        "conditions": [
            "atom id that belongs to the TR346 molecule",
            "how many bond type can be created by this molecule"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`label`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "molecules have a double bond type",
            "molecules are labeled as carcinogenic compound"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom",
            "bond"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`",
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "NOT EXISTS"
        ],
        "conditions": [
            "molecules without sulphur element",
            "not having double bond"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "molecule.`label`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "carcinogenic label for bond TR001_2_4"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "atom.`atom_id`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "molecule id TR001"
        ]
    },
    {
        "tables": [
            "bond"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "single bonds"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`label`",
            "molecule.`molecule_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "=",
            "LIKE"
        ],
        "conditions": [
            "molecules contain 'cl' element",
            "carcinogenic"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "=",
            "LIKE"
        ],
        "conditions": [
            "molecules contain 'c' element",
            "not carcinogenic"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`label`",
            "molecule.`molecule_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "carcinogenic molecules",
            "contain the Chlorine element"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "bond id TR001_1_7"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`",
            "atom.`molecule_id`",
            "atom.`element`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN"
        ],
        "conditions": [
            "bond_id TR001_3_4"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id2`",
            "connected.`atom_id`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "type of bond",
            "connection between two atoms TR000_1 and TR000_2"
        ]
    },
    {
        "tables": [
            "atom",
            "molecule"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "molecule.`label`",
            "molecule.`molecule_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "molecule of atom id \"TR000_2\"",
            "atom id 2 \"TR000_4\""
        ]
    },
    {
        "tables": [
            "atom"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "element of toxicology",
            "atom with the ID of TR000_1"
        ]
    },
    {
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "molecule TR000 is carcinogenic"
        ]
    },
    {
        "tables": [
            "bond",
            "connected",
            "atom"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`",
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "AS",
            "JOIN",
            "ON"
        ],
        "conditions": [
            "atoms with single bond"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`molecule_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "carcinogenic molecules",
            "consisted of Nitrogen"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom",
            "bond",
            "connected"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`",
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "connected.`bond_id`",
            "connected.`atom_id`",
            "connected.`atom_id2`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "LIKE"
        ],
        "conditions": [
            "molecule consisted of Sulphur atom with double bond"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`molecule_id`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "COUNT",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "non-carcinogenic molecules",
            "consisted more than 5 atoms"
        ]
    },
    {
        "tables": [
            "molecule",
            "bond",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "atom.`molecule_id`",
            "atom.`element`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "elements with double bond",
            "molecule TR024"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`molecule_id`",
            "atom.`atom_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "carcinogenic molecule",
            "highest number of atoms"
        ]
    },
    {
        "tables": [
            "molecule",
            "bond",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "JOIN",
            "WHERE",
            "AND",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "carcinogenic molecules",
            "triple bonded Hydrogen atoms"
        ]
    },
    {
        "tables": [
            "molecule"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "COUNT",
            "DISTINCT"
        ],
        "conditions": [
            "carcinogenic"
        ]
    },
    {
        "tables": [
            "molecule",
            "bond"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`"
        ],
        "sql_keywords": [
            "BETWEEN",
            "JOIN",
            "="
        ],
        "conditions": [
            "molecules between TR004 to TR010",
            "has single bonds"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "=",
            "COUNT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "atom",
            "molecule"
        ],
        "columns": [
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "atom ID of TR004_7",
            "not carcinogenic"
        ]
    },
    {
        "tables": [
            "molecule",
            "bond",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "atom.`atom_id`",
            "atom.`molecule_id`",
            "atom.`element`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "double bonded oxygen"
        ]
    },
    {
        "tables": [
            "bond",
            "molecule"
        ],
        "columns": [
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "COUNT"
        ],
        "conditions": [
            "molecules with triple bonds",
            "not carcinogenic"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom",
            "bond"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "atom.`element`",
            "bond.`bond_type`",
            "atom.`molecule_id`",
            "bond.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "molecule ID of TR002"
        ]
    },
    {
        "tables": [
            "bond",
            "atom",
            "molecule"
        ],
        "columns": [
            "bond.`bond_id`",
            "bond.`molecule_id`",
            "bond.`bond_type`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`",
            "molecule.`molecule_id`",
            "molecule.`label`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "double bonded carbon",
            "TR012 molecule"
        ]
    },
    {
        "tables": [
            "molecule",
            "atom"
        ],
        "columns": [
            "molecule.`molecule_id`",
            "molecule.`label`",
            "atom.`atom_id`",
            "atom.`element`",
            "atom.`molecule_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "atom ID of the carcinogenic molecule",
            "contains oxygen"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`cardkingdomid`",
            "cards.`cardkingdomfoilid`",
            "cards.`name`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "incredibly powerful foils"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`name`",
            "cards.`bordercolor`",
            "cards.`cardkingdomfoilid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "borderless cards",
            "without powerful foils"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`name`",
            "cards.`faceconvertedmanacost`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "MAX"
        ],
        "conditions": [
            "card names with value that cost more converted mana for the face"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`name`",
            "cards.`frameversion`",
            "cards.`edhrecrank`"
        ],
        "sql_keywords": [
            "=",
            "<"
        ],
        "conditions": [
            "2015 frame style",
            "ranking below 100 on EDHRec"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`id`",
            "cards.`uuid`",
            "cards.`name`",
            "cards.`rarity`",
            "legalities.`id`",
            "legalities.`format`",
            "legalities.`uuid`",
            "legalities.`status`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "mythic rarity",
            "print cards",
            "banned",
            "gladiator format"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`id`",
            "cards.`uuid`",
            "cards.`name`",
            "cards.`type`",
            "cards.`types`",
            "cards.`side`",
            "legalities.`status`",
            "legalities.`format`",
            "legalities.`uuid`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "artifact type of cards",
            "do not have multiple faces on the same card",
            "legalities status for vintage play format"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`id`",
            "cards.`artist`",
            "cards.`uuid`",
            "legalities.`format`",
            "legalities.`status`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "card id",
            "artist",
            "unknown power",
            "legal for commander play format"
        ]
    },
    {
        "tables": [
            "cards",
            "rulings"
        ],
        "columns": [
            "cards.`id`",
            "cards.`artist`",
            "cards.`hascontentwarning`",
            "cards.`text`",
            "cards.`uuid`",
            "rulings.`text`",
            "rulings.`uuid`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "cards illustrated by Stephen Daniel",
            "describe the text of the ruling of these cards",
            "state if these cards have missing or degraded properties and values"
        ]
    },
    {
        "tables": [
            "cards",
            "rulings"
        ],
        "columns": [
            "cards.`id`",
            "cards.`name`",
            "cards.`number`",
            "cards.`text`",
            "cards.`uuid`",
            "rulings.`id`",
            "rulings.`text`",
            "rulings.`uuid`",
            "rulings.`date`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "card named 'Sublime Epiphany'",
            "number 74s"
        ]
    },
    {
        "tables": [
            "cards",
            "rulings"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`name`",
            "cards.`ispromo`",
            "rulings.`uuid`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "card with the most ruling information",
            "artist with the most ruling information",
            "card is a promotional printing"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "cards.`number`",
            "foreign_data.`language`",
            "foreign_data.`name`",
            "foreign_data.`uuid`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "card named Annul numbered 29"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "foreign_data.`uuid`",
            "foreign_data.`name`",
            "foreign_data.`language`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN"
        ],
        "conditions": [
            "alternative language in Japanese"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "foreign_data.`id`",
            "foreign_data.`uuid`",
            "foreign_data.`language`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "WHERE"
        ],
        "conditions": [
            "cards available in Chinese Simplified"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`code`",
            "sets.`totalsetsize`",
            "set_translations.`language`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "sets available in Italian translation",
            "total number of cards per set"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`types`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "artist Aaron Boyd",
            "card art"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`keywords`",
            "cards.`name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "keyword found on card 'Angel of Mercy'"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`power`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "infinite power"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`name`",
            "cards.`promotypes`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "type of promotion",
            "card 'Duress'"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`bordercolor`",
            "cards.`name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "border color of card 'Ancestor's Chosen'"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`name`",
            "cards.`originaltype`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "type of the card 'Ancestor's Chosen' as originally printed"
        ]
    },
    {
        "tables": [
            "cards",
            "sets",
            "set_translations"
        ],
        "columns": [
            "cards.`id`",
            "cards.`name`",
            "cards.`setcode`",
            "sets.`code`",
            "sets.`name`",
            "set_translations.`setcode`",
            "set_translations.`language`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "JOIN",
            "DISTINCT"
        ],
        "conditions": [
            "card 'Angel of Mercy' is in a set",
            "set is in a language"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`istextless`",
            "cards.`uuid`",
            "legalities.`status`",
            "legalities.`uuid`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "legalities status is restricted",
            "cards have text boxes"
        ]
    },
    {
        "tables": [
            "cards",
            "rulings"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "cards.`text`",
            "rulings.`uuid`",
            "rulings.`text`",
            "rulings.`date`",
            "rulings.`id`"
        ],
        "sql_keywords": [
            "LIKE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`isstarter`",
            "cards.`uuid`",
            "legalities.`status`",
            "legalities.`uuid`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "legalities status is restricted",
            "starter deck"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "legalities.`uuid`",
            "legalities.`status`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "status of card 'Cloudchaser Eagle'"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`type`",
            "cards.`name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "type of card 'Benalish Knight'"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "legalities.`format`",
            "legalities.`status`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "playing card 'Benalish Knight'"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`uuid`",
            "foreign_data.`uuid`",
            "foreign_data.`language`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "="
        ],
        "conditions": [
            "artists who illustrated the card art in Phyrexian"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`bordercolor`"
        ],
        "sql_keywords": [
            "COUNT",
            "WHERE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`isreprint`",
            "foreign_data.`uuid`",
            "foreign_data.`language`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "cards illustrated in German",
            "reprinted"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`bordercolor`",
            "foreign_data.`uuid`",
            "foreign_data.`language`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "borderless cards",
            "illustrated in Russian"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`isstoryspotlight`",
            "foreign_data.`uuid`",
            "foreign_data.`language`"
        ],
        "sql_keywords": [
            "COUNT",
            "WHERE",
            "AND",
            "DIVIDE"
        ],
        "conditions": [
            "language is French",
            "among the Story Spotlight cards"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`name`",
            "cards.`toughness`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "toughness of 99"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`artist`",
            "cards.`name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "illustrated by Aaron Boyd"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`bordercolor`",
            "cards.`availability`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "black border cards",
            "only available on mtgo"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`convertedmanacost`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "converted mana cost of 0"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`layout`",
            "cards.`keywords`"
        ],
        "sql_keywords": [
            "=",
            "DISTINCT"
        ],
        "conditions": [
            "keyword of flying"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`name`",
            "cards.`originaltype`",
            "cards.`subtypes`"
        ],
        "sql_keywords": [
            "=",
            "AND",
            "NOT"
        ],
        "conditions": [
            "original type of 'Summon - Angel'",
            "subtype other than 'Angel'"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`cardkingdomid`",
            "cards.`cardkingdomfoilid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "foiled cards",
            "non foiled cards",
            "incredibly powerful when paired"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`dueldeck`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "cards belong to duel deck a"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`edhrecrank`",
            "cards.`frameversion`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "frame version 2015"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`artist`",
            "foreign_data.`name`",
            "foreign_data.`language`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "name of artists",
            "cards",
            "Chinese Simplified"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`id`",
            "cards.`name`",
            "cards.`availability`",
            "foreign_data.`language`",
            "foreign_data.`name`",
            "foreign_data.`uuid`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "available in paper",
            "Japanese language"
        ]
    },

    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`bordercolor`",
            "legalities.`uuid`",
            "legalities.`status`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "banned cards",
            "white border"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "legalities.`format`",
            "legalities.`uuid`",
            "foreign_data.`language`",
            "foreign_data.`uuid`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "uuid for legacy cards",
            "foreign language of these cards"
        ]
    },
    {
        "tables": [
            "cards",
            "rulings"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "cards.`text`",
            "rulings.`uuid`",
            "rulings.`text`",
            "rulings.`date`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`frameversion`",
            "cards.`uuid`",
            "legalities.`format`",
            "legalities.`status`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN"
        ],
        "conditions": [
            "cards having future frame version",
            "legality status of these cards"
        ]
    },
    {
        "tables": [
            "cards",
            "sets"
        ],
        "columns": [
            "cards.`name`",
            "cards.`colors`",
            "sets.`code`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "set OGW",
            "colour for these cards"
        ]
    },
    {
        "tables": [
            "cards",
            "set_translations",
            "sets"
        ],
        "columns": [
            "cards.`id`",
            "cards.`name`",
            "cards.`convertedmanacost`",
            "cards.`setcode`",
            "set_translations.`setcode`",
            "set_translations.`language`",
            "set_translations.`translation`",
            "sets.`code`",
            "sets.`name`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "cards in set 10E",
            "converted mana of 5",
            "have translation",
            "languages"
        ]
    },
    {
        "tables": [
            "cards",
            "rulings"
        ],
        "columns": [
            "cards.`name`",
            "cards.`originaltype`",
            "rulings.`date`",
            "rulings.`text`",
            "rulings.`uuid`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "original types of Creature - Elf",
            "date of rulings"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`colors`",
            "cards.`uuid`",
            "legalities.`format`",
            "legalities.`uuid`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "ID 1-20",
            "colors of cards",
            "format of cards"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`id`",
            "cards.`name`",
            "cards.`originaltype`",
            "cards.`colors`",
            "foreign_data.`language`",
            "foreign_data.`name`",
            "foreign_data.`text`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "black color",
            "foreign language translation"
        ]
    },
    {
        "tables": [
            "cards",
            "rulings"
        ],
        "columns": [
            "cards.`id`",
            "cards.`uuid`",
            "cards.`name`",
            "cards.`rarity`",
            "rulings.`uuid`",
            "rulings.`text`",
            "rulings.`date`",
            "rulings.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY"
        ],
        "conditions": [
            "rarity of uncommon",
            "ascending order of ruling date"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`cardkingdomfoilid`",
            "cards.`cardkingdomid`"
        ],
        "sql_keywords": [
            "LIKE",
            "="
        ],
        "conditions": [
            "cards designed by John Avon",
            "foil non-powerful"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`bordercolor`",
            "cards.`cardkingdomfoilid`",
            "cards.`cardkingdomid`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "white bordered cards",
            "powerful"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`availability`",
            "cards.`hand`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "designed by UDON",
            "available in mtgo print type",
            "starting maximum hand size of -1"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`frameversion`",
            "cards.`hascontentwarning`",
            "cards.`availability`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "1993 frame version",
            "available on paper",
            "sensitive content warning"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`manacost`",
            "cards.`layout`",
            "cards.`frameversion`",
            "cards.`bordercolor`",
            "cards.`availability`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "normal layout",
            "2003 frame version",
            "black border color",
            "available in paper",
            "available in mtgo"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`manacost`",
            "cards.`artist`"
        ],
        "sql_keywords": [
            "=",
            "SUM"
        ],
        "conditions": [
            "unconverted mana cost",
            "all the cards created by Rob Alexander"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`type`",
            "cards.`availability`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "set_translations",
            "sets",
            "cards"
        ],
        "columns": [
            "set_translations.`setcode`",
            "set_translations.`language`",
            "set_translations.`translation`",
            "sets.`code`",
            "sets.`name`",
            "cards.`setcode`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "set code of all cards translated into Spanish"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`frameeffects`",
            "cards.`isonlineonly`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "COUNT",
            "DIVIDE"
        ],
        "conditions": [
            "legendary frame effect cards",
            "only available in online game variations"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`isstoryspotlight`",
            "cards.`istextless`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "WHERE",
            "AND",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "Story Spotlight cards",
            "do not have a text box"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "foreign_data.`uuid`",
            "foreign_data.`language`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "ORDER BY"
        ],
        "conditions": [
            "percentage of cards in Spanish",
            "list them by name"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`code`",
            "sets.`basesetsize`",
            "set_translations.`language`",
            "set_translations.`setcode`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "number of cards is 309"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`code`",
            "sets.`block`",
            "set_translations.`setcode`",
            "set_translations.`language`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "Brazilian Portuguese translated sets",
            "Commander block"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`id`",
            "cards.`uuid`",
            "cards.`name`",
            "cards.`type`",
            "cards.`types`",
            "legalities.`format`",
            "legalities.`status`",
            "legalities.`uuid`"
        ],
        "sql_keywords": [
            "=",
            "JOIN",
            "ON"
        ],
        "conditions": [
            "Creature-type cards",
            "legal status"
        ]
    },
    {
        "tables": [
            "foreign_data",
            "cards"
        ],
        "columns": [
            "foreign_data.`id`",
            "foreign_data.`language`",
            "foreign_data.`uuid`",
            "foreign_data.`name`",
            "foreign_data.`type`",
            "cards.`type`",
            "cards.`types`",
            "cards.`uuid`",
            "cards.`name`",
            "cards.`supertypes`",
            "cards.`id`",
            "cards.`subtypes`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "cards.`power`",
            "cards.`text`"
        ],
        "sql_keywords": [
            "=",
            "LIKE"
        ],
        "conditions": [
            "unknown power cards",
            "contain info about the triggered ability"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities",
            "rulings"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "cards.`side`",
            "legalities.`format`",
            "legalities.`status`",
            "rulings.`text`",
            "rulings.`uuid`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "pre-modern format",
            "ruling text 'This is a triggered mana ability.'",
            "do not have multiple faces"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`id`",
            "cards.`artist`",
            "cards.`availability`",
            "cards.`uuid`",
            "legalities.`format`",
            "legalities.`status`",
            "legalities.`uuid`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "card from Erica Yang artist",
            "pauper format",
            "available in paper"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`text`",
            "cards.`uuid`",
            "foreign_data.`text`",
            "foreign_data.`uuid`"
        ],
        "sql_keywords": [
            "LIKE"
        ],
        "conditions": [
            "card with the text 'Das perfekte Gegenmittel zu einer dichten Formation'"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "cards.`layout`",
            "cards.`bordercolor`",
            "cards.`artist`",
            "foreign_data.`language`",
            "foreign_data.`name`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "LIKE"
        ],
        "conditions": [
            "type Creature",
            "normal layout",
            "black border color",
            "artist Matthew D. Wilson"
        ]
    },
    {
        "tables": [
            "cards",
            "rulings"
        ],
        "columns": [
            "cards.`id`",
            "cards.`uuid`",
            "cards.`name`",
            "cards.`rarity`",
            "rulings.`uuid`",
            "rulings.`text`",
            "rulings.`date`",
            "rulings.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "print rarity",
            "ruling text",
            "printed on 01/02/2007"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`id`",
            "sets.`basesetsize`",
            "sets.`block`",
            "sets.`code`",
            "set_translations.`language`",
            "set_translations.`setcode`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "set of 180 cards",
            "belongs to the Ravnica block"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`hascontentwarning`",
            "cards.`uuid`",
            "legalities.`format`",
            "legalities.`status`",
            "legalities.`uuid`"
        ],
        "sql_keywords": [
            "COUNT",
            "DIVIDE",
            "WHERE"
        ],
        "conditions": [
            "format commander",
            "legal status",
            "no content warning"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "cards.`power`",
            "cards.`id`",
            "foreign_data.`id`",
            "foreign_data.`uuid`",
            "foreign_data.`language`"
        ],
        "sql_keywords": [
            "COUNT",
            "IS NULL",
            "OR",
            "AND",
            "DIVIDE"
        ],
        "conditions": [
            "cards without power",
            "in French"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`id`",
            "sets.`code`",
            "sets.`type`",
            "set_translations.`setcode`",
            "set_translations.`translation`",
            "set_translations.`language`",
            "set_translations.`id`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "COUNT",
            "DIVIDE"
        ],
        "conditions": [
            "Japanese translated sets",
            "expansion sets"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`availability`",
            "cards.`artist`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`bordercolor`",
            "cards.`edhrecrank`"
        ],
        "sql_keywords": [
            "=",
            ">"
        ],
        "conditions": [
            "color cards",
            "no borders",
            "ranked higher than 12000 on EDHRec"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`isoversized`",
            "cards.`isreprint`",
            "cards.`ispromo`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "oversized",
            "reprinted",
            "printed for promotions"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`name`",
            "cards.`power`",
            "cards.`promotypes`"
        ],
        "sql_keywords": [
            "SELECT",
            "FROM",
            "WHERE",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "top three unknown power cards",
            "promotional types",
            "arena league",
            "alphabetical order"
        ]
    },
    {
        "tables": [
            "foreign_data",
            "cards"
        ],
        "columns": [
            "foreign_data.`id`",
            "foreign_data.`language`",
            "foreign_data.`multiverseid`",
            "cards.`multiverseid`",
            "cards.`number`",
            "cards.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "multiverse number 149934"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`cardkingdomid`",
            "cards.`cardkingdomfoilid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "ORDER BY"
        ],
        "conditions": [
            "top three powerful pairs",
            "Kingdom Foil and Kingdom Cards",
            "sorted by Kingdom Foil id in alphabetical order"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`istextless`",
            "cards.`layout`"
        ],
        "sql_keywords": [
            "COUNT",
            "DIVIDE",
            "WHERE"
        ],
        "conditions": [
            "cards do not have a text box with a normal layout"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`name`",
            "cards.`number`",
            "cards.`side`",
            "cards.`subtypes`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "don't have multiple faces on a single card",
            "subtypes Angel",
            "subtypes Wizard"
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`name`",
            "sets.`mtgocode`"
        ],
        "sql_keywords": [
            "IS NULL",
            "ORDER BY"
        ],
        "conditions": [
            "top three sets",
            "don't appear in Magic: The Gathering Online",
            "names in alphabetical order"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`id`",
            "sets.`mcmname`",
            "sets.`code`",
            "set_translations.`setcode`",
            "set_translations.`language`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "languages available",
            "set known as Archenemy",
            "magic card market",
            "code ARC"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`id`",
            "sets.`name`",
            "set_translations.`setcode`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "set number 5",
            "translation"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`id`",
            "sets.`type`",
            "set_translations.`language`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "set number 206"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`id`",
            "sets.`code`",
            "sets.`block`",
            "set_translations.`setcode`",
            "set_translations.`language`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "Italian-language cards",
            "located in the Shadowmoor block",
            "alphabetical order"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`id`",
            "sets.`code`",
            "sets.`isforeignonly`",
            "sets.`isfoilonly`",
            "set_translations.`setcode`",
            "set_translations.`language`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "set not available outside of the United States",
            "foil cards with Japanese writing on them",
            "include the set ID"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`id`",
            "sets.`code`",
            "sets.`basesetsize`",
            "sets.`name`",
            "sets.`releasedate`",
            "set_translations.`setcode`",
            "set_translations.`language`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "MAX"
        ],
        "conditions": [
            "Russian set of cards",
            "most cards overall"
        ]
    },
    {
        "tables": [
            "cards",
            "sets",
            "set_translations"
        ],
        "columns": [
            "cards.`id`",
            "cards.`setcode`",
            "cards.`isonlineonly`",
            "sets.`id`",
            "sets.`code`",
            "sets.`isonlineonly`",
            "set_translations.`setcode`",
            "set_translations.`language`",
            "set_translations.`id`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "Chinese Simplified as the language",
            "only available for online games"
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`id`",
            "sets.`code`",
            "sets.`name`",
            "sets.`releasedate`",
            "sets.`mtgocode`",
            "sets.`type`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "=",
            "IS NULL"
        ],
        "conditions": [
            "sets available just in Japanese",
            "not in Magic: The Gathering Online"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`bordercolor`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "card border with black color"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`frameeffects`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "frame effect as extendedart"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`name`",
            "cards.`bordercolor`",
            "cards.`isfullart`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "black card borders",
            "full artwork"
        ]
    },
    {
        "tables": [
            "set_translations"
        ],
        "columns": [
            "set_translations.`language`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "set id \"174\""
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`code`",
            "sets.`name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "set code \"ALL\""
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "foreign_data.`uuid`",
            "foreign_data.`language`",
            "foreign_data.`name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "foreign language used by 'A Pedra Fellwar'"
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`code`",
            "sets.`releasedate`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "release date of 07/13/2007"
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`basesetsize`",
            "sets.`code`",
            "sets.`block`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "block named \"Masques\"",
            "block named \"Mirage\""
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`code`",
            "sets.`type`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "expansion type of 'expansion'"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`id`",
            "cards.`name`",
            "cards.`type`",
            "cards.`uuid`",
            "cards.`watermark`",
            "foreign_data.`id`",
            "foreign_data.`name`",
            "foreign_data.`type`",
            "foreign_data.`uuid`"
        ],
        "sql_keywords": [
            "JOIN",
            "LIKE"
        ],
        "conditions": [
            "foreign name of the card",
            "boros watermark",
            "type of the card"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`type`",
            "cards.`flavortext`",
            "cards.`watermark`",
            "foreign_data.`language`",
            "foreign_data.`flavortext`"
        ],
        "sql_keywords": [
            "LIKE",
            "DISTINCT"
        ],
        "conditions": [
            "language of the card",
            "flavor text of the card",
            "card has colorpie watermark",
            "type of the card"
        ]
    },
    {
        "tables": [
            "cards",
            "sets"
        ],
        "columns": [
            "cards.`id`",
            "cards.`convertedmanacost`",
            "cards.`name`",
            "cards.`setcode`",
            "sets.`id`",
            "sets.`code`",
            "sets.`name`"
        ],
        "sql_keywords": [
            "=",
            "COUNT"
        ],
        "conditions": [
            "converted Mana Cost of 10",
            "set of Abyssal Horror"
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`code`",
            "sets.`type`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "sets have expansion commander type"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "cards.`type`",
            "cards.`watermark`",
            "foreign_data.`name`",
            "foreign_data.`type`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "LIKE"
        ],
        "conditions": [
            "foreign name of the card",
            "abzan watermark",
            "type of this card"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`type`",
            "cards.`watermark`",
            "cards.`uuid`",
            "foreign_data.`language`",
            "foreign_data.`type`",
            "foreign_data.`uuid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "card has azorius watermark"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`artist`",
            "cards.`cardkingdomfoilid`",
            "cards.`cardkingdomid`",
            "cards.`power`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "designed by Aaron Miller",
            "incredibly powerful"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`availability`",
            "cards.`hand`"
        ],
        "sql_keywords": [
            "LIKE",
            "="
        ],
        "conditions": [
            "cards available in paper",
            "positive starting maximum hand size"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`name`",
            "cards.`istextless`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "cards that have a text box"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`manacost`",
            "cards.`name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "unconverted mana cost of the card 'Ancestor's Chosen'"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`bordercolor`",
            "cards.`power`",
            "cards.`id`"
        ],
        "sql_keywords": [
            "=",
            "IS NULL",
            "LIKE"
        ],
        "conditions": [
            "cards with a white border color",
            "unknown power"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`name`",
            "cards.`ispromo`",
            "cards.`side`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "cards that are a promotional painting",
            "have multiple faces on the same card"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`name`",
            "cards.`subtypes`",
            "cards.`supertypes`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "list of all types for the card 'Molimo, Maro-Sorcerer'"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`purchaseurls`",
            "cards.`promotypes`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "promotional type of 'bundle'"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`availability`",
            "cards.`bordercolor`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "LIKE"
        ],
        "conditions": [
            "designed a card with a black border color",
            "available in both 'arena' and 'mtgo' printing type"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`name`",
            "cards.`convertedmanacost`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "Which card costs more converted mana"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`flavorname`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "artist designed the card",
            "promotional name is 'Battra, Dark Destroyer'"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`name`",
            "cards.`convertedmanacost`",
            "cards.`frameversion`"
        ],
        "sql_keywords": [
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "highest converted mana cost",
            "2003 card frame style"
        ]
    },
    {
        "tables": [
            "cards",
            "sets",
            "set_translations"
        ],
        "columns": [
            "cards.`name`",
            "cards.`setcode`",
            "sets.`code`",
            "sets.`name`",
            "set_translations.`language`",
            "set_translations.`setcode`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "set of cards with 'Ancestor's Chosen' is in"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "foreign_data.`uuid`",
            "foreign_data.`language`",
            "foreign_data.`name`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN"
        ],
        "conditions": [
            "set of cards with 'Angel of Mercy' in it"
        ]
    },
    {
        "tables": [
            "set_translations",
            "sets",
            "cards"
        ],
        "columns": [
            "set_translations.`setcode`",
            "set_translations.`translation`",
            "sets.`code`",
            "sets.`name`",
            "cards.`name`",
            "cards.`setcode`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "set name is Hauptset Zehnte Edition"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "foreign_data.`uuid`",
            "foreign_data.`name`",
            "foreign_data.`language`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN"
        ],
        "conditions": [
            "set of cards with 'Ancestor's Chosen' in it",
            "Korean version of it"
        ]
    },
    {
        "tables": [
            "cards",
            "set_translations"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`setcode`",
            "set_translations.`translation`",
            "set_translations.`setcode`"
        ],
        "sql_keywords": [
            "=",
            "COUNT"
        ],
        "conditions": [
            "cards in the set 'Hauptset Zehnte Edition'",
            "designed by Adam Rex"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`basesetsize`",
            "sets.`name`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "base set of 'Hauptset Zehnte Edition'"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`name`",
            "set_translations.`language`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "=",
            "DISTINCT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "cards",
            "sets"
        ],
        "columns": [
            "cards.`name`",
            "sets.`code`",
            "sets.`mtgocode`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "set of cards with 'Angel of Mercy' appear on Magic: The Gathering Online"
        ]
    },
    {
        "tables": [
            "cards",
            "sets"
        ],
        "columns": [
            "cards.`name`",
            "cards.`setcode`",
            "sets.`code`",
            "sets.`releasedate`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "set of cards with 'Ancestor's Chosen'"
        ]
    },
    {
        "tables": [
            "set_translations",
            "sets"
        ],
        "columns": [
            "set_translations.`setcode`",
            "set_translations.`translation`",
            "sets.`code`",
            "sets.`type`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "expansion type of the set \"Hauptset Zehnte Edition\""
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`id`",
            "sets.`block`",
            "sets.`name`",
            "set_translations.`setcode`",
            "set_translations.`language`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "sets in the block 'Ice Age'",
            "have an Italian translation"
        ]
    },
    {
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.`id`",
            "sets.`code`",
            "sets.`isforeignonly`",
            "sets.`name`",
            "cards.`name`",
            "cards.`side`",
            "cards.`setcode`",
            "cards.`id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "set of cards with Adarkar Valkyrie only available outside the United States"
        ]
    },
    {
        "tables": [
            "set_translations",
            "sets"
        ],
        "columns": [
            "set_translations.`setcode`",
            "set_translations.`language`",
            "set_translations.`translation`",
            "sets.`code`",
            "sets.`basesetsize`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "cards have an Italian translation",
            "base set number of under 100"
        ]
    },
    {
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.`code`",
            "sets.`name`",
            "cards.`setcode`",
            "cards.`bordercolor`",
            "cards.`name`",
            "cards.`id`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "black border color"
        ]
    },
    {
        "tables": [
            "cards",
            "sets"
        ],
        "columns": [
            "cards.`name`",
            "cards.`convertedmanacost`",
            "sets.`name`",
            "sets.`code`"
        ],
        "sql_keywords": [
            "=",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "highest converted mana cost"
        ]
    },
    {
        "tables": [
            "cards",
            "sets"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`name`",
            "cards.`setcode`",
            "sets.`code`",
            "sets.`name`"
        ],
        "sql_keywords": [
            "IN",
            "="
        ],
        "conditions": [
            "designed a card in the set Coldsnap",
            "Jeremy Jarvis",
            "Aaron Miller",
            "Chippy"
        ]
    },
    {
        "tables": [
            "cards",
            "sets"
        ],
        "columns": [
            "cards.`name`",
            "cards.`number`",
            "sets.`name`",
            "cards.`setcode`",
            "cards.`artist`",
            "cards.`asciiname`",
            "cards.`availability`",
            "cards.`bordercolor`",
            "cards.`cardkingdomfoilid`",
            "cards.`cardkingdomid`",
            "cards.`coloridentity`",
            "cards.`colorindicator`",
            "cards.`colors`",
            "cards.`convertedmanacost`",
            "cards.`dueldeck`",
            "cards.`edhrecrank`",
            "cards.`faceconvertedmanacost`",
            "cards.`facename`",
            "cards.`flavorname`",
            "cards.`flavortext`",
            "cards.`frameeffects`",
            "cards.`frameversion`",
            "cards.`hand`",
            "cards.`hasalternativedecklimit`",
            "cards.`hascontentwarning`",
            "cards.`hasfoil`",
            "cards.`hasnonfoil`",
            "cards.`isalternative`",
            "cards.`isfullart`",
            "cards.`isonlineonly`",
            "cards.`isoversized`",
            "cards.`ispromo`",
            "cards.`isreprint`",
            "cards.`isreserved`",
            "cards.`isstarter`",
            "cards.`isstoryspotlight`",
            "cards.`istextless`",
            "cards.`istimeshifted`",
            "cards.`keywords`",
            "cards.`layout`",
            "cards.`leadershipskills`",
            "cards.`life`",
            "cards.`loyalty`",
            "cards.`manacost`",
            "cards.`mcmid`",
            "cards.`mcmmetaid`",
            "cards.`mtgarenaid`",
            "cards.`mtgjsonv4id`",
            "cards.`mtgofoilid`",
            "cards.`mtgoid`",
            "cards.`multiverseid`",
            "cards.`originalreleasedate`",
            "cards.`originaltext`",
            "cards.`originaltype`",
            "cards.`otherfaceids`",
            "cards.`power`",
            "cards.`printings`",
            "cards.`promotypes`",
            "cards.`purchaseurls`",
            "cards.`rarity`",
            "cards.`scryfallid`",
            "cards.`scryfallillustrationid`",
            "cards.`scryfalloracleid`",
            "cards.`side`",
            "cards.`subtypes`",
            "cards.`supertypes`",
            "cards.`tcgplayerproductid`",
            "cards.`text`",
            "cards.`toughness`",
            "cards.`type`",
            "cards.`types`",
            "cards.`uuid`",
            "cards.`variations`",
            "cards.`watermark`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "cards",
            "sets"
        ],
        "columns": [
            "cards.`convertedmanacost`",
            "cards.`power`",
            "sets.`name`",
            "cards.`setcode`",
            "sets.`code`"
        ],
        "sql_keywords": [
            "=",
            ">",
            "IS NULL",
            "OR"
        ],
        "conditions": [
            "converted mana cost higher than 5",
            "set Coldsnap",
            "unknown power"
        ]
    },
    {
        "tables": [
            "foreign_data",
            "cards"
        ],
        "columns": [
            "foreign_data.`flavortext`",
            "foreign_data.`language`",
            "cards.`name`",
            "cards.`uuid`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "Italian flavor text",
            "card 'Ancestor's Chosen'"
        ]
    },
    {
        "tables": [
            "foreign_data",
            "cards"
        ],
        "columns": [
            "foreign_data.`language`",
            "foreign_data.`flavortext`",
            "cards.`name`",
            "cards.`flavortext`",
            "cards.`uuid`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "foreign languages",
            "flavor text",
            "card 'Ancestor's Chosen'"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "foreign_data.`language`",
            "foreign_data.`type`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "German type of the card 'Ancestor's Chosen'"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data",
            "sets"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "cards.`setcode`",
            "foreign_data.`language`",
            "foreign_data.`text`",
            "sets.`name`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "Italian text ruling",
            "all the cards",
            "set Coldsnap"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data",
            "sets"
        ],
        "columns": [
            "cards.`convertedmanacost`",
            "cards.`uuid`",
            "cards.`name`",
            "cards.`setcode`",
            "foreign_data.`language`",
            "foreign_data.`name`",
            "foreign_data.`uuid`",
            "sets.`code`",
            "sets.`name`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "MAX",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "Italian names",
            "cards in the set Coldsnap",
            "highest converted mana cost"
        ]
    },
    {
        "tables": [
            "cards",
            "rulings"
        ],
        "columns": [
            "cards.`uuid`",
            "cards.`name`",
            "rulings.`uuid`",
            "rulings.`text`",
            "rulings.`date`",
            "rulings.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "ruling for the card 'Reminisce' created"
        ]
    },
    {
        "tables": [
            "cards",
            "sets"
        ],
        "columns": [
            "cards.`id`",
            "cards.`convertedmanacost`",
            "cards.`setcode`",
            "sets.`code`",
            "sets.`name`"
        ],
        "sql_keywords": [
            "=",
            "SUM",
            "DIVIDE"
        ],
        "conditions": [
            "converted mana cost of 7",
            "set Coldsnap"
        ]
    },
    {
        "tables": [
            "cards",
            "sets"
        ],
        "columns": [
            "cards.`cardkingdomid`",
            "cards.`cardkingdomfoilid`",
            "cards.`name`",
            "sets.`name`"
        ],
        "sql_keywords": [
            "SUM",
            "DIVIDE",
            "AND",
            "NOT NULL"
        ],
        "conditions": [
            "incredibly powerful cards",
            "set Coldsnap"
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`code`",
            "sets.`releasedate`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "set released on 2017/7/14"
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`keyrunecode`",
            "sets.`code`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "set code is 'PKHC'"
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`id`",
            "sets.`code`",
            "sets.`mcmid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "set had 'SS2' as the code"
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`mcmname`",
            "sets.`releasedate`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "set released on 2017/6/9"
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`name`",
            "sets.`type`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "set \"From the Vault: Lore\"",
            "expansion type"
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`code`",
            "sets.`parentcode`",
            "sets.`name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "set is Commander 2014 Oversized",
            "parent code is requested"
        ]
    },
    {
        "tables": [
            "cards",
            "rulings"
        ],
        "columns": [
            "cards.`id`",
            "cards.`artist`",
            "cards.`hascontentwarning`",
            "cards.`text`",
            "cards.`uuid`",
            "rulings.`uuid`",
            "rulings.`text`",
            "rulings.`id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "cards illustrated by Jim Pavelec",
            "describe the text of the ruling of these cards",
            "cards have missing or degraded properties and values"
        ]
    },
    {
        "tables": [
            "cards",
            "sets"
        ],
        "columns": [
            "cards.`name`",
            "cards.`setcode`",
            "sets.`code`",
            "sets.`releasedate`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "release date for the set",
            "card 'Evacuation' in it"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`code`",
            "sets.`basesetsize`",
            "set_translations.`setcode`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "set of Rinascita di Alara"
        ]
    },
    {
        "tables": [
            "set_translations",
            "sets"
        ],
        "columns": [
            "set_translations.`setcode`",
            "set_translations.`translation`",
            "sets.`code`",
            "sets.`type`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "expansion type of the set \"Huitième édition\""
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`id`",
            "sets.`code`",
            "sets.`name`",
            "set_translations.`setcode`",
            "set_translations.`language`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "LIKE"
        ],
        "conditions": [
            "Tendo Ice Bridge"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`id`",
            "sets.`code`",
            "sets.`name`",
            "set_translations.`setcode`",
            "set_translations.`language`",
            "set_translations.`id`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "translations of the name of the set 'Tenth Edition'"
        ]
    },
    {
        "tables": [
            "cards",
            "sets",
            "set_translations"
        ],
        "columns": [
            "cards.`name`",
            "cards.`setcode`",
            "sets.`code`",
            "sets.`name`",
            "set_translations.`language`",
            "set_translations.`setcode`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "card 'Fellwar Stone' is in it"
        ]
    },
    {
        "tables": [
            "cards",
            "sets"
        ],
        "columns": [
            "cards.`name`",
            "cards.`convertedmanacost`",
            "cards.`setcode`",
            "sets.`code`",
            "sets.`name`"
        ],
        "sql_keywords": [
            "=",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "card name in the set 'Journey into Nyx Hero's Path'",
            "highest converted mana cost"
        ]
    },
    {
        "tables": [
            "set_translations",
            "sets"
        ],
        "columns": [
            "set_translations.`setcode`",
            "set_translations.`translation`",
            "sets.`code`",
            "sets.`releasedate`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "release date for the set 'Ola de frío'"
        ]
    },
    {
        "tables": [
            "cards",
            "sets"
        ],
        "columns": [
            "cards.`name`",
            "cards.`setcode`",
            "sets.`type`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "expansion type for the set which card 'Samite Pilgrim' in it"
        ]
    },
    {
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.`id`",
            "sets.`code`",
            "sets.`name`",
            "cards.`manacost`",
            "cards.`convertedmanacost`",
            "cards.`setcode`",
            "cards.`name`",
            "cards.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "set 'World Championship Decks 2004'",
            "converted mana cost as '3'"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`code`",
            "sets.`name`",
            "set_translations.`language`",
            "set_translations.`translation`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": []
    },
    {
        "tables": [
            "sets",
            "set_translations",
            "cards",
            "foreign_data"
        ],
        "columns": [
            "sets.`id`",
            "sets.`code`",
            "sets.`isnonfoilonly`",
            "set_translations.`setcode`",
            "set_translations.`language`",
            "set_translations.`translation`",
            "cards.`id`",
            "cards.`setcode`",
            "foreign_data.`id`",
            "foreign_data.`language`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "SUM",
            "CASE",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "set of cards that has Japanese translation",
            "only available in non-foil"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`id`",
            "cards.`isonlineonly`",
            "cards.`uuid`",
            "foreign_data.`id`",
            "foreign_data.`uuid`",
            "foreign_data.`language`"
        ],
        "sql_keywords": [
            "SUM",
            "CASE",
            "WHEN",
            "THEN",
            "ELSE",
            "END",
            "AS",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "set of cards that has Brazil Portuguese translation",
            "only available online"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`availability`",
            "cards.`istextless`",
            "cards.`artist`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "available printing types of the cards",
            "doesn't have a text box",
            "created by Aleksi Briclot"
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`id`",
            "sets.`basesetsize`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "set has the highest number of cards"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`artist`",
            "cards.`convertedmanacost`",
            "cards.`side`"
        ],
        "sql_keywords": [
            "=",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "cards that doesn't have multiple faces on the same card",
            "highest cost of converted mana"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`frameeffects`",
            "cards.`cardkingdomid`",
            "cards.`cardkingdomfoilid`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "incredibly powerful foils"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`id`",
            "cards.`power`",
            "cards.`hasfoil`",
            "cards.`dueldeck`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "unknown power",
            "can't be found in foil",
            "duel deck A"
        ]
    },
    {
        "tables": [
            "sets"
        ],
        "columns": [
            "sets.`id`",
            "sets.`totalsetsize`",
            "sets.`type`"
        ],
        "sql_keywords": [
            "=",
            "MAX"
        ],
        "conditions": [
            "expansion type is Commander",
            "highest total number of cards",
            "including promotional and related supplemental products",
            "excluding Alchemy modifications"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`name`",
            "cards.`manacost`",
            "legalities.`format`",
            "legalities.`status`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "top 10 cards",
            "highest uncoverted mana cost"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`id`",
            "cards.`uuid`",
            "cards.`originalreleasedate`",
            "cards.`rarity`",
            "legalities.`id`",
            "legalities.`format`",
            "legalities.`uuid`",
            "legalities.`status`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "oldest mythic card",
            "legal play formats"
        ]
    },
    {
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`uuid`",
            "foreign_data.`uuid`",
            "foreign_data.`language`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "foreign language is in French",
            "illustrated by Volkan BaÇµa"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`id`",
            "cards.`uuid`",
            "cards.`name`",
            "cards.`rarity`",
            "cards.`types`",
            "legalities.`status`",
            "legalities.`format`",
            "legalities.`uuid`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "rare enchantment Abundance cards",
            "play format status are all legal"
        ]
    },
    {
        "tables": [
            "legalities",
            "cards"
        ],
        "columns": [
            "legalities.`format`",
            "legalities.`status`",
            "cards.`name`",
            "cards.`uuid`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "GROUP BY",
            "HAVING",
            "MAX",
            "COUNT"
        ],
        "conditions": [
            "play format has the highest number of banned status",
            "names of all the card meet the condition"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`code`",
            "sets.`name`",
            "set_translations.`language`",
            "set_translations.`setcode`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "language of the 'Battlebond' set"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`uuid`",
            "legalities.`format`",
            "legalities.`uuid`"
        ],
        "sql_keywords": [
            "MIN",
            "GROUP BY",
            "JOIN"
        ],
        "conditions": [
            "illustrator that illustrated the least amount of cards",
            "format of play of the cards that he/she illustrated"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`frameversion`",
            "cards.`artist`",
            "cards.`hascontentwarning`",
            "cards.`uuid`",
            "legalities.`format`",
            "legalities.`status`",
            "legalities.`uuid`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "version of frame style is 1997",
            "illustrated by D. Alexander Gregory",
            "in legacy play format",
            "has sensitive content",
            "Wizards of the Coast"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`name`",
            "cards.`edhrecrank`",
            "legalities.`format`",
            "legalities.`status`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "cards ranked 1st on EDHRec",
            "banned play format"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`id`",
            "sets.`releasedate`",
            "set_translations.`language`"
        ],
        "sql_keywords": [
            "AVG",
            "BETWEEN",
            "MAX",
            "COUNT"
        ],
        "conditions": [
            "sets released between 1/1/2012 to 12/31/2015",
            "common language of the card"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`availability`",
            "cards.`bordercolor`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "illustrated cards with black borders",
            "available only in arena"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`uuid`",
            "legalities.`uuid`",
            "legalities.`format`",
            "legalities.`status`"
        ],
        "sql_keywords": [
            "=",
            "OR"
        ],
        "conditions": [
            "old school format is restricted",
            "old school format is banned"
        ]
    },
    {
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`availability`"
        ],
        "sql_keywords": [
            "=",
            "COUNT"
        ],
        "conditions": [
            "card designed by Matthew D.Wilson",
            "available only in the paper"
        ]
    },
    {
        "tables": [
            "cards",
            "rulings"
        ],
        "columns": [
            "cards.`artist`",
            "cards.`name`",
            "cards.`uuid`",
            "rulings.`text`",
            "rulings.`date`",
            "rulings.`uuid`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "card named and designed by Kev Walker",
            "descending order of dates"
        ]
    },
    {
        "tables": [
            "sets",
            "cards",
            "legalities"
        ],
        "columns": [
            "sets.`id`",
            "sets.`code`",
            "sets.`name`",
            "cards.`uuid`",
            "cards.`name`",
            "cards.`setcode`",
            "legalities.`id`",
            "legalities.`format`",
            "legalities.`uuid`",
            "legalities.`status`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "List the names of all the cards in the set Hour of Devastation",
            "find the formats in which these cards are legal"
        ]
    },
    {
        "tables": [
            "sets",
            "set_translations"
        ],
        "columns": [
            "sets.`name`",
            "set_translations.`language`",
            "set_translations.`setcode`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "doesn't have Japanese translation",
            "have Korean translation"
        ]
    },
    {
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.`frameversion`",
            "cards.`artist`",
            "cards.`name`",
            "cards.`uuid`",
            "legalities.`status`",
            "legalities.`uuid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "frame styles",
            "cards Allen Williams worked on",
            "banned cards"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`displayname`",
            "users.`reputation`"
        ],
        "sql_keywords": [
            "=",
            "MAX"
        ],
        "conditions": [
            "higher reputation",
            "Harlan",
            "Jarrod Dixon"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`displayname`",
            "users.`creationdate`"
        ],
        "sql_keywords": [
            "EXTRACT",
            "YEAR",
            "="
        ],
        "conditions": [
            "accounts were created in the year 2011"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`id`",
            "users.`lastaccessdate`"
        ],
        "sql_keywords": [
            "COUNT",
            "WHERE"
        ],
        "conditions": [
            "last accessed the website after 2014/9/1"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`displayname`",
            "users.`views`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "most number of views"
        ]
    },
    {
        "tables": [
            "users",
            "votes"
        ],
        "columns": [
            "users.`id`",
            "users.`upvotes`",
            "users.`downvotes`",
            "votes.`userid`"
        ],
        "sql_keywords": [
            "SELECT",
            "COUNT",
            "FROM",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "more than 100 upvotes",
            "more than 1 downvotes"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`id`",
            "users.`views`",
            "users.`creationdate`"
        ],
        "sql_keywords": [
            "COUNT",
            "WHERE"
        ],
        "conditions": [
            "more than 10 views",
            "created their account after the year 2013"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "posts.`id`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "user csgillespie"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "posts.`title`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "user is csgillespie"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`title`",
            "posts.`owneruserid`",
            "users.`id`",
            "users.`displayname`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "owner of the post 'Eliciting priors from experts'"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "posts.`id`",
            "posts.`viewcount`",
            "posts.`title`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "=",
            "MAX"
        ],
        "conditions": [
            "owned by csgillespie",
            "highest popularity"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "posts.`owneruserid`",
            "posts.`favoritecount`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "owner of the most valuable post"
        ]
    },
    {
        "tables": [
            "users",
            "posts",
            "comments"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "posts.`id`",
            "posts.`owneruserid`",
            "posts.`commentcount`",
            "comments.`id`",
            "comments.`postid`",
            "comments.`text`",
            "comments.`creationdate`",
            "comments.`userid`",
            "comments.`userdisplayname`"
        ],
        "sql_keywords": [
            "=",
            "SUM"
        ],
        "conditions": [
            "total number of comments",
            "all the posts owned by csgillespie"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "posts.`owneruserid`",
            "posts.`answercount`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "post got the most number of answers",
            "owned by csgillespie"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`title`",
            "posts.`lasteditoruserid`",
            "users.`id`",
            "users.`displayname`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "last edited the post 'Examples for teaching: Correlation does not mean causation'"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "posts.`id`",
            "posts.`parentid`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "=",
            "COUNT"
        ],
        "conditions": [
            "posts owned by csgillespie",
            "root posts"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "posts.`owneruserid`",
            "posts.`closeddate`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN"
        ],
        "conditions": [
            "owns a post",
            "post is well-finished"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`score`",
            "posts.`owneruserid`",
            "users.`id`",
            "users.`age`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "user is an elder",
            "post score over 19"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`title`",
            "posts.`owneruserid`",
            "users.`id`",
            "users.`location`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "location of the owner of the post 'Eliciting priors from experts'"
        ]
    },
    {
        "tables": [
            "tags",
            "posts"
        ],
        "columns": [
            "tags.`excerptpostid`",
            "tags.`tagname`",
            "posts.`id`",
            "posts.`body`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "tag 'bayesian'"
        ]
    },
    {
        "tables": [
            "tags",
            "posts"
        ],
        "columns": [
            "tags.`id`",
            "tags.`tagname`",
            "tags.`wikipostid`",
            "tags.`count`",
            "tags.`excerptpostid`",
            "posts.`id`",
            "posts.`body`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN"
        ],
        "conditions": []
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "badges.`userid`",
            "badges.`name`",
            "badges.`date`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "user csgillespie"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "badges.`userid`",
            "badges.`name`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "badges.`userid`",
            "badges.`date`",
            "badges.`name`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "EXTRACT(YEAR FROM date) = 2011"
        ],
        "conditions": [
            "year 2011"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "badges.`name`",
            "badges.`userid`",
            "badges.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "obtained the most number of badges"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "posts.`score`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "=",
            "AVG"
        ],
        "conditions": [
            "user csgillespie"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`views`",
            "badges.`userid`",
            "badges.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "user with over 200 views"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`score`",
            "posts.`owneruserid`",
            "users.`id`",
            "users.`age`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING",
            "COUNT"
        ],
        "conditions": [
            "score of over 5",
            "owned by an elder user"
        ]
    },
    {
        "tables": [
            "users",
            "votes"
        ],
        "columns": [
            "users.`id`",
            "users.`reputation`",
            "users.`creationdate`",
            "users.`displayname`",
            "users.`lastaccessdate`",
            "users.`websiteurl`",
            "users.`location`",
            "users.`aboutme`",
            "users.`views`",
            "users.`upvotes`",
            "users.`downvotes`",
            "users.`accountid`",
            "users.`age`",
            "users.`profileimageurl`",
            "votes.`postid`",
            "votes.`id`",
            "votes.`creationdate`",
            "votes.`userid`",
            "votes.`votetypeid`",
            "votes.`bountyamount`"
        ],
        "sql_keywords": [
            "=",
            "COUNT"
        ],
        "conditions": [
            "user No.58",
            "2010/7/19"
        ]
    },
    {
        "tables": [
            "votes"
        ],
        "columns": [
            "votes.`creationdate`",
            "votes.`id`"
        ],
        "sql_keywords": [
            "MAX",
            "COUNT",
            "GROUP BY"
        ],
        "conditions": [
            "maximum number of votes"
        ]
    },
    {
        "tables": [
            "badges"
        ],
        "columns": [
            "badges.`id`",
            "badges.`userid`",
            "badges.`name`",
            "badges.`date`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "comments",
            "posts"
        ],
        "columns": [
            "comments.`creationdate`",
            "comments.`score`",
            "comments.`postid`",
            "comments.`text`",
            "comments.`userdisplayname`",
            "comments.`id`",
            "comments.`userid`",
            "posts.`answercount`",
            "posts.`lasteditoruserid`",
            "posts.`acceptedanswerid`",
            "posts.`lasteditdate`",
            "posts.`id`",
            "posts.`lasactivitydate`",
            "posts.`favoritecount`",
            "posts.`communityowneddate`",
            "posts.`title`",
            "posts.`score`",
            "posts.`viewcount`",
            "posts.`creaiondate`",
            "posts.`parentid`",
            "posts.`posttypeid`",
            "posts.`body`",
            "posts.`lasteditordisplayname`",
            "posts.`ownerdisplayname`",
            "posts.`tags`",
            "posts.`closeddate`",
            "posts.`owneruserid`",
            "posts.`commentcount`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "highest score comment"
        ]
    },
    {
        "tables": [
            "posts",
            "comments"
        ],
        "columns": [
            "posts.`id`",
            "posts.`viewcount`",
            "posts.`commentcount`",
            "comments.`id`",
            "comments.`postid`",
            "comments.`creationdate`",
            "comments.`score`",
            "comments.`text`",
            "comments.`userid`",
            "comments.`userdisplayname`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "post got 1910 view counts"
        ]
    },
    {
        "tables": [
            "comments",
            "posts"
        ],
        "columns": [
            "comments.`creationdate`",
            "comments.`postid`",
            "comments.`userid`",
            "posts.`id`",
            "posts.`favoritecount`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "User No.3025 gave a comment",
            "comment at 20:29:39 on 2014/4/23",
            "to a post"
        ]
    },
    {
        "tables": [
            "posts",
            "comments"
        ],
        "columns": [
            "posts.`id`",
            "posts.`parentid`",
            "posts.`commentcount`",
            "comments.`text`",
            "comments.`postid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "parent id 107829"
        ]
    },
    {
        "tables": [
            "comments",
            "posts",
            "users"
        ],
        "columns": [
            "comments.`creationdate`",
            "comments.`postid`",
            "comments.`userid`",
            "posts.`id`",
            "posts.`closeddate`",
            "users.`id`",
            "users.`creationdate`"
        ],
        "sql_keywords": [
            "=",
            "IS NULL"
        ],
        "conditions": [
            "comment to a post",
            "9:08:18 on 2013/7/12"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`owneruserid`",
            "users.`reputation`",
            "users.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "owner user of post No. 65041"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "posts.`id`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "display name of 'Tiago Pasqualini'"
        ]
    },
    {
        "tables": [
            "votes",
            "users"
        ],
        "columns": [
            "votes.`id`",
            "votes.`userid`",
            "users.`id`",
            "users.`displayname`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "vote No.6347"
        ]
    },
    {
        "tables": [
            "votes",
            "posts"
        ],
        "columns": [
            "votes.`postid`",
            "votes.`id`",
            "posts.`id`",
            "posts.`title`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "COUNT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "badges.`name`",
            "badges.`userid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "display name is 'DatEpicCoderGuyWhoPrograms'"
        ]
    },
    {
        "tables": [
            "users",
            "posts",
            "votes"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "posts.`id`",
            "posts.`owneruserid`",
            "votes.`id`",
            "votes.`postid`",
            "votes.`userid`"
        ],
        "sql_keywords": [
            "COUNT",
            "JOIN",
            "GROUP BY"
        ],
        "conditions": [
            "number of posts",
            "number of votes"
        ]
    },
    {
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.`viewcount`",
            "posts.`title`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'"
        ]
    },
    {
        "tables": [
            "comments"
        ],
        "columns": [
            "comments.`id`",
            "comments.`postid`",
            "comments.`creationdate`",
            "comments.`text`",
            "comments.`score`",
            "comments.`userid`",
            "comments.`userdisplayname`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "score of 17"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`displayname`",
            "users.`websiteurl`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "website URL listed at 'http://stackoverflow.com'"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "badges.`userid`",
            "badges.`name`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "user 'SilentGhost'",
            "badge name"
        ]
    },
    {
        "tables": [
            "comments",
            "users"
        ],
        "columns": [
            "comments.`text`",
            "comments.`userid`",
            "users.`displayname`",
            "users.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "commented 'thank you user93!'"
        ]
    },
    {
        "tables": [
            "users",
            "comments"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "comments.`text`",
            "comments.`userid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "user 'A Lion'"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`title`",
            "posts.`owneruserid`",
            "users.`displayname`",
            "users.`reputation`",
            "users.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "user made a post titled 'Understanding what Dassault iSight is doing?'",
            "reputation of the user"
        ]
    },
    {
        "tables": [
            "comments",
            "posts"
        ],
        "columns": [
            "comments.`creationdate`",
            "comments.`text`",
            "comments.`postid`",
            "comments.`userdisplayname`",
            "comments.`id`",
            "comments.`userid`",
            "posts.`id`",
            "posts.`title`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`displayname`",
            "badges.`userid`",
            "badges.`name`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "badge name 'Necromancer'"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`title`",
            "posts.`lasteditoruserid`",
            "users.`id`",
            "users.`displayname`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "editor of the post",
            "post titled 'Open source tools for visualizing multi-dimensional data?'"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "posts.`lasteditoruserid`",
            "posts.`id`",
            "posts.`title`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "edited by Vebjorn Ljosa"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`websiteurl`",
            "posts.`lasteditoruserid`",
            "posts.`score`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "SUM"
        ],
        "conditions": [
            "posts edited by Yevgeny",
            "include the user's website URL"
        ]
    },
    {
        "tables": [
            "posts",
            "comments",
            "posthistory",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`title`",
            "comments.`text`",
            "comments.`postid`",
            "comments.`userid`",
            "posthistory.`userid`",
            "posthistory.`postid`",
            "users.`id`",
            "users.`displayname`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "comments left by users",
            "edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'"
        ]
    },
    {
        "tables": [
            "posts",
            "votes"
        ],
        "columns": [
            "posts.`id`",
            "posts.`title`",
            "votes.`postid`",
            "votes.`bountyamount`"
        ],
        "sql_keywords": [
            "SUM",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "post titled about 'data'"
        ]
    },
    {
        "tables": [
            "users",
            "posts",
            "votes"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "posts.`id`",
            "posts.`title`",
            "votes.`bountyamount`",
            "votes.`userid`",
            "votes.`postid`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "LIKE"
        ],
        "conditions": [
            "added a bounty amount of 50",
            "post title mentioning variance"
        ]
    },
    {
        "tables": [
            "posts",
            "tags",
            "comments"
        ],
        "columns": [
            "posts.`id`",
            "posts.`viewcount`",
            "posts.`title`",
            "tags.`tagname`",
            "tags.`excerptpostid`",
            "comments.`text`",
            "comments.`postid`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE",
            "GROUP BY"
        ],
        "conditions": [
            "tagged as 'humor'"
        ]
    },
    {
        "tables": [
            "comments",
            "users"
        ],
        "columns": [
            "comments.`id`",
            "comments.`creationdate`",
            "comments.`score`",
            "comments.`userid`",
            "comments.`text`",
            "comments.`postid`",
            "comments.`userdisplayname`",
            "users.`displayname`",
            "users.`downvotes`",
            "users.`id`",
            "users.`aboutme`",
            "users.`views`",
            "users.`lastaccessdate`",
            "users.`reputation`",
            "users.`accountid`",
            "users.`upvotes`",
            "users.`age`",
            "users.`profileimageurl`",
            "users.`websiteurl`",
            "users.`location`",
            "users.`creationdate`"
        ],
        "sql_keywords": [
            "COUNT",
            "="
        ],
        "conditions": [
            "user ID 13"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`id`",
            "users.`reputation`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "highest reputation"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`id`",
            "users.`views`"
        ],
        "sql_keywords": [
            "MIN",
            "="
        ],
        "conditions": [
            "lowest view"
        ]
    },
    {
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.`name`",
            "badges.`date`",
            "badges.`userid`",
            "users.`id`",
            "users.`displayname`",
            "users.`reputation`",
            "users.`creationdate`",
            "users.`lastaccessdate`",
            "users.`websiteurl`",
            "users.`location`",
            "users.`aboutme`",
            "users.`views`",
            "users.`upvotes`",
            "users.`downvotes`",
            "users.`accountid`",
            "users.`age`",
            "users.`profileimageurl`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "="
        ],
        "conditions": [
            "year 2011",
            "awarded with supporter badge"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "users.`reputation`",
            "users.`creationdate`",
            "users.`lastaccessdate`",
            "users.`websiteurl`",
            "users.`location`",
            "users.`aboutme`",
            "users.`views`",
            "users.`upvotes`",
            "users.`downvotes`",
            "users.`accountid`",
            "users.`age`",
            "users.`profileimageurl`",
            "badges.`name`",
            "badges.`userid`",
            "badges.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "awarded with more than 5 badges"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`location`",
            "badges.`name`",
            "badges.`userid`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "JOIN",
            "COUNT"
        ],
        "conditions": [
            "users from New York",
            "have a teacher badge",
            "have a supporter badge"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`owneruserid`",
            "users.`id`",
            "users.`reputation`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "user created post ID 1",
            "reputation of this user"
        ]
    },
    {
        "tables": [
            "users",
            "posthistory",
            "posts"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "users.`views`",
            "posthistory.`userid`",
            "posthistory.`postid`",
            "posthistory.`id`",
            "posts.`id`",
            "posts.`viewcount`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "only one post history per post",
            "at least 1000 views"
        ]
    },
    {
        "tables": [
            "users",
            "comments",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "comments.`userid`",
            "comments.`id`",
            "badges.`userid`",
            "badges.`name`",
            "badges.`date`",
            "badges.`id`"
        ],
        "sql_keywords": [
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "JOIN"
        ],
        "conditions": [
            "users have posted the most comments",
            "user's badge"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`location`",
            "badges.`userid`",
            "badges.`name`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "COUNT",
            "DISTINCT"
        ],
        "conditions": [
            "users from India",
            "have the teacher badges"
        ]
    },
    {
        "tables": [
            "badges"
        ],
        "columns": [
            "badges.`name`",
            "badges.`date`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "COUNT",
            "YEAR",
            "WHERE"
        ],
        "conditions": [
            "student badges given during 2010",
            "student badges given during 2011"
        ]
    },
    {
        "tables": [
            "posthistory",
            "comments",
            "posts",
            "users"
        ],
        "columns": [
            "posthistory.`posthistorytypeid`",
            "posthistory.`postid`",
            "comments.`postid`",
            "comments.`userid`",
            "posts.`id`",
            "users.`id`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "post ID 3720",
            "unique users commented"
        ]
    },
    {
        "tables": [
            "posts",
            "postlinks"
        ],
        "columns": [
            "posts.`id`",
            "posts.`viewcount`",
            "postlinks.`relatedpostid`",
            "postlinks.`postid`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "post related to post ID 61217",
            "popularity of post"
        ]
    },
    {
        "tables": [
            "posts",
            "postlinks"
        ],
        "columns": [
            "posts.`id`",
            "posts.`score`",
            "postlinks.`linktypeid`",
            "postlinks.`postid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "post ID 395"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`score`",
            "posts.`owneruserid`",
            "users.`id`"
        ],
        "sql_keywords": [
            "SELECT",
            "FROM",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "score more than 60"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "posts.`owneruserid`",
            "posts.`favoritecount`",
            "posts.`creaiondate`"
        ],
        "sql_keywords": [
            "SUM",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "user ID 686",
            "year 2011"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`id`",
            "users.`upvotes`",
            "users.`age`",
            "posts.`owneruserid`",
            "posts.`id`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "users creating more than 10 posts"
        ]
    },
    {
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.`name`",
            "badges.`userid`",
            "users.`id`",
            "users.`displayname`",
            "users.`reputation`",
            "users.`creationdate`",
            "users.`lastaccessdate`",
            "users.`websiteurl`",
            "users.`location`",
            "users.`aboutme`",
            "users.`views`",
            "users.`upvotes`",
            "users.`downvotes`",
            "users.`accountid`",
            "users.`age`",
            "users.`profileimageurl`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "obtained the 'Announcer' badge"
        ]
    },
    {
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.`name`",
            "badges.`userid`",
            "badges.`date`",
            "users.`id`",
            "users.`displayname`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "users obtained badges",
            "date 7/19/2010",
            "time 7:39:08 PM"
        ]
    },
    {
        "tables": [
            "comments"
        ],
        "columns": [
            "comments.`id`",
            "comments.`postid`",
            "comments.`creationdate`",
            "comments.`score`",
            "comments.`text`",
            "comments.`userid`",
            "comments.`userdisplayname`"
        ],
        "sql_keywords": [
            "COUNT",
            "WHERE"
        ],
        "conditions": [
            "positive comments"
        ]
    },
    {
        "tables": [
            "comments"
        ],
        "columns": [
            "comments.`text`",
            "comments.`creationdate`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "comment created on 7/19/2010 7:25:47 PM"
        ]
    },
    {
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.`id`",
            "posts.`score`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "score of 10"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`reputation`",
            "badges.`name`",
            "badges.`userid`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "highest reputation"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`reputation`",
            "users.`id`",
            "badges.`userid`",
            "badges.`date`",
            "badges.`name`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "obtained the badge on 7/19/2010 7:39:08 PM"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "badges.`name`",
            "badges.`userid`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "display name is 'Pierre'"
        ]
    },
    {
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.`userid`",
            "badges.`date`",
            "users.`id`",
            "users.`location`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "DISTINCT"
        ],
        "conditions": [
            "located in Rochester, NY",
            "obtained their badges"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`reputation`",
            "users.`creationdate`",
            "users.`displayname`",
            "users.`lastaccessdate`",
            "users.`websiteurl`",
            "users.`location`",
            "users.`aboutme`",
            "users.`views`",
            "users.`upvotes`",
            "users.`downvotes`",
            "users.`accountid`",
            "users.`age`",
            "users.`profileimageurl`",
            "badges.`name`",
            "badges.`userid`",
            "badges.`date`",
            "badges.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "COUNT"
        ],
        "conditions": [
            "obtained the 'Teacher' badge"
        ]
    },
    {
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.`name`",
            "badges.`userid`",
            "users.`age`",
            "users.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "BETWEEN",
            "COUNT",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "obtained the 'Organizer' badges",
            "are teenagers"
        ]
    },
    {
        "tables": [
            "comments",
            "posts"
        ],
        "columns": [
            "comments.`score`",
            "comments.`postid`",
            "posts.`id`",
            "posts.`creaiondate`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "post created on 7/19/2010 7:19:56 PM"
        ]
    },
    {
        "tables": [
            "comments",
            "posts"
        ],
        "columns": [
            "comments.`text`",
            "comments.`creationdate`",
            "comments.`postid`",
            "posts.`id`",
            "posts.`creaiondate`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "post created on 7/19/2010 7:37:33 PM"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`age`",
            "users.`location`",
            "badges.`userid`",
            "badges.`name`",
            "badges.`date`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "located in Vienna, Austria",
            "obtained the badge"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`age`",
            "badges.`name`",
            "badges.`userid`",
            "badges.`date`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "adults",
            "obtained the badge Supporter"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`views`",
            "users.`id`",
            "badges.`userid`",
            "badges.`date`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "="
        ],
        "conditions": [
            "obtained the badge on 7/19/2010 7:39:08 PM"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`reputation`",
            "users.`accountid`",
            "badges.`name`",
            "badges.`userid`",
            "badges.`date`",
            "badges.`id`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "ON"
        ],
        "conditions": [
            "lowest reputation"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "badges.`userid`",
            "badges.`name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "display name is 'Sharpie'"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`age`",
            "badges.`name`",
            "badges.`userid`",
            "badges.`date`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "elders",
            "obtained the 'Supporter' badge"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "ID of 30"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`location`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "users from New York"
        ]
    },
    {
        "tables": [
            "votes"
        ],
        "columns": [
            "votes.`id`",
            "votes.`postid`",
            "votes.`creationdate`",
            "votes.`votetypeid`",
            "votes.`bountyamount`",
            "votes.`userid`"
        ],
        "sql_keywords": [
            "COUNT",
            "="
        ],
        "conditions": [
            "votes made in 2010"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`id`",
            "users.`age`"
        ],
        "sql_keywords": [
            "COUNT",
            "BETWEEN"
        ],
        "conditions": [
            "adult"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "users.`views`"
        ],
        "sql_keywords": [
            "MAX"
        ],
        "conditions": [
            "highest number of views"
        ]
    },
    {
        "tables": [
            "votes"
        ],
        "columns": [
            "votes.`id`",
            "votes.`creationdate`"
        ],
        "sql_keywords": [
            "COUNT",
            "YEAR",
            "DIVIDE"
        ],
        "conditions": [
            "votes in 2010",
            "votes in 2011"
        ]
    },
    {
        "tables": [
            "users",
            "posts",
            "tags"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "posts.`id`",
            "posts.`tags`",
            "posts.`owneruserid`",
            "tags.`tagname`",
            "tags.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "="
        ],
        "conditions": [
            "name of tags",
            "John Salvatier's"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "posts.`id`",
            "posts.`creaiondate`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "posts created by Daniel Vassallo"
        ]
    },
    {
        "tables": [
            "users",
            "votes"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "votes.`userid`",
            "votes.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "votes made by Harlan"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "posts.`id`",
            "posts.`owneruserid`",
            "posts.`answercount`"
        ],
        "sql_keywords": [
            "=",
            "MAX"
        ],
        "conditions": [
            "post by slashnick",
            "most answers count",
            "state the post ID"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "posts.`viewcount`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "MAX",
            "SUM",
            "WHERE",
            "OR"
        ],
        "conditions": [
            "posts by Harvey Motulsky",
            "posts by Noah Snyder",
            "higher popularity"
        ]
    },
    {
        "tables": [
            "users",
            "posts",
            "votes"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "posts.`id`",
            "posts.`owneruserid`",
            "votes.`postid`",
            "votes.`votetypeid`",
            "votes.`userid`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "posts by Matt Parker",
            "more than 4 votes"
        ]
    },
    {
        "tables": [
            "users",
            "comments",
            "posts"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "comments.`score`",
            "comments.`postid`",
            "comments.`userid`",
            "posts.`id`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": []
    },
    {
        "tables": [
            "users",
            "posts",
            "tags"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "posts.`id`",
            "posts.`owneruserid`",
            "posts.`commentcount`",
            "posts.`tags`",
            "tags.`tagname`",
            "tags.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "tags used by Mark Meckes",
            "posts without comments"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "badges.`userid`",
            "badges.`id`",
            "badges.`name`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "JOIN"
        ],
        "conditions": [
            "obtained the Organizer Badges"
        ]
    },
    {
        "tables": [
            "posts",
            "tags",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`owneruserid`",
            "tags.`excerptpostid`",
            "tags.`tagname`",
            "users.`id`",
            "users.`displayname`"
        ],
        "sql_keywords": [
            "COUNT",
            "WHERE",
            "DIVIDE"
        ],
        "conditions": [
            "posts posted by Community",
            "use the R language"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "posts.`viewcount`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "SUM",
            "SUBTRACT"
        ],
        "conditions": [
            "post posted by Mornington",
            "view count from posts posted by Amos"
        ]
    },
    {
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.`id`",
            "badges.`userid`",
            "badges.`name`",
            "badges.`date`",
            "users.`id`",
            "users.`displayname`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "received commentator badges",
            "in 2014"
        ]
    },
    {
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.`id`",
            "posts.`creaiondate`"
        ],
        "sql_keywords": [
            "COUNT",
            "="
        ],
        "conditions": [
            "posts created on 21st July, 2010"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`displayname`",
            "users.`age`",
            "users.`views`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "highest in views"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`lasteditdate`",
            "posts.`lasteditoruserid`",
            "users.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "last edit date",
            "last edit user ID",
            "post 'Detecting a given face in a database of facial images'"
        ]
    },
    {
        "tables": [
            "comments",
            "users"
        ],
        "columns": [
            "comments.`creationdate`",
            "comments.`score`",
            "comments.`userid`",
            "comments.`text`",
            "comments.`postid`",
            "comments.`userdisplayname`",
            "comments.`id`",
            "users.`displayname`",
            "users.`downvotes`",
            "users.`id`",
            "users.`aboutme`",
            "users.`views`",
            "users.`lastaccessdate`",
            "users.`reputation`",
            "users.`accountid`",
            "users.`upvotes`",
            "users.`age`",
            "users.`profileimageurl`",
            "users.`websiteurl`",
            "users.`location`",
            "users.`creationdate`"
        ],
        "sql_keywords": [
            "=",
            "<"
        ],
        "conditions": [
            "user ID 13",
            "negative comments"
        ]
    },
    {
        "tables": [
            "comments",
            "posts",
            "users"
        ],
        "columns": [
            "comments.`creationdate`",
            "comments.`score`",
            "comments.`postid`",
            "comments.`userid`",
            "comments.`text`",
            "comments.`userdisplayname`",
            "comments.`id`",
            "posts.`answercount`",
            "posts.`lasteditoruserid`",
            "posts.`acceptedanswerid`",
            "posts.`lasteditdate`",
            "posts.`id`",
            "posts.`lasactivitydate`",
            "posts.`favoritecount`",
            "posts.`communityowneddate`",
            "posts.`title`",
            "posts.`score`",
            "posts.`viewcount`",
            "posts.`creaiondate`",
            "posts.`parentid`",
            "posts.`posttypeid`",
            "posts.`body`",
            "posts.`lasteditordisplayname`",
            "posts.`ownerdisplayname`",
            "posts.`tags`",
            "posts.`closeddate`",
            "posts.`owneruserid`",
            "posts.`commentcount`",
            "users.`displayname`",
            "users.`downvotes`",
            "users.`aboutme`",
            "users.`views`",
            "users.`lastaccessdate`",
            "users.`id`",
            "users.`reputation`",
            "users.`accountid`",
            "users.`upvotes`",
            "users.`age`",
            "users.`profileimageurl`",
            "users.`websiteurl`",
            "users.`location`",
            "users.`creationdate`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "post title which got positive comments",
            "display names of the users who posted those comments"
        ]
    },
    {
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.`name`",
            "badges.`date`",
            "badges.`userid`",
            "users.`id`",
            "users.`location`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "=",
            "LIKE"
        ],
        "conditions": [
            "badge names received in 2011",
            "location is in the North Pole"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`websiteurl`",
            "posts.`favoritecount`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "favorite count of more than 150"
        ]
    },
    {
        "tables": [
            "posthistory",
            "posts"
        ],
        "columns": [
            "posthistory.`posthistorytypeid`",
            "posthistory.`postid`",
            "posthistory.`text`",
            "posthistory.`id`",
            "posthistory.`creationdate`",
            "posts.`lasteditdate`",
            "posts.`id`",
            "posts.`title`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "COUNT",
            "MAX"
        ],
        "conditions": [
            "post history counts",
            "last edit date",
            "post title 'What is the best introductory Bayesian statistics textbook?'"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`lastaccessdate`",
            "users.`location`",
            "badges.`name`",
            "badges.`userid`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY"
        ],
        "conditions": [
            "received the outliers badge"
        ]
    },
    {
        "tables": [
            "posts",
            "postlinks"
        ],
        "columns": [
            "posts.`id`",
            "posts.`title`",
            "postlinks.`postid`",
            "postlinks.`relatedpostid`"
        ],
        "sql_keywords": [
            "LIKE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "users",
            "posts",
            "badges",
            "comments",
            "posthistory"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "posts.`id`",
            "posts.`owneruserid`",
            "badges.`name`",
            "badges.`userid`",
            "badges.`date`",
            "comments.`userid`",
            "comments.`userdisplayname`",
            "posthistory.`userid`",
            "posthistory.`userdisplayname`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "user Samuel",
            "year 2013"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "posts.`viewcount`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "most popular post"
        ]
    },
    {
        "tables": [
            "users",
            "tags",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`location`",
            "tags.`excerptpostid`",
            "tags.`tagname`",
            "posts.`id`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "="
        ],
        "conditions": [
            "display name of the user",
            "location of the user",
            "owned the excerpt post",
            "hypothesis-testing tag"
        ]
    },
    {
        "tables": [
            "posts",
            "postlinks"
        ],
        "columns": [
            "posts.`id`",
            "posts.`title`",
            "posts.`score`",
            "postlinks.`linktypeid`",
            "postlinks.`relatedpostid`",
            "postlinks.`postid`",
            "postlinks.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "related posts titles",
            "link type IDs",
            "post 'What are principal component scores?'"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`score`",
            "posts.`parentid`",
            "posts.`owneruserid`",
            "users.`displayname`",
            "users.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "child post with the highest score"
        ]
    },
    {
        "tables": [
            "votes",
            "users"
        ],
        "columns": [
            "votes.`postid`",
            "votes.`id`",
            "votes.`creationdate`",
            "votes.`bountyamount`",
            "votes.`userid`",
            "votes.`votetypeid`",
            "users.`displayname`",
            "users.`websiteurl`",
            "users.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "vote type of 8",
            "highest bounty amount"
        ]
    },
    {
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.`id`",
            "posts.`viewcount`",
            "posts.`title`"
        ],
        "sql_keywords": [
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "top 5 posts",
            "highest popularity"
        ]
    },
    {
        "tables": [
            "tags"
        ],
        "columns": [
            "tags.`count`",
            "tags.`id`",
            "tags.`tagname`",
            "tags.`excerptpostid`",
            "tags.`wikipostid`"
        ],
        "sql_keywords": [
            "BETWEEN"
        ],
        "conditions": [
            "post count between 5,000 to 7,000"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`favoritecount`",
            "posts.`owneruserid`",
            "users.`id`",
            "users.`displayname`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "most valuable post"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`age`",
            "users.`reputation`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "most influential user"
        ]
    },
    {
        "tables": [
            "posts",
            "votes"
        ],
        "columns": [
            "posts.`id`",
            "posts.`creaiondate`",
            "votes.`postid`",
            "votes.`bountyamount`",
            "votes.`creationdate`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "posts with votes",
            "created in 2011",
            "bounty of 50"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`id`",
            "users.`age`"
        ],
        "sql_keywords": [
            "MIN"
        ],
        "conditions": [
            "youngest user"
        ]
    },
    {
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.`score`",
            "posts.`lasactivitydate`"
        ],
        "sql_keywords": [
            "SUM",
            "LIKE"
        ],
        "conditions": [
            "post on 2010-07-19"
        ]
    },
    {
        "tables": [
            "posts",
            "postlinks"
        ],
        "columns": [
            "posts.`id`",
            "posts.`answercount`",
            "posts.`creationdate`",
            "postlinks.`id`",
            "postlinks.`postid`",
            "postlinks.`creationdate`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "COUNT",
            "YEAR",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "year is 2010",
            "number of answers is no more than 2"
        ]
    },
    {
        "tables": [
            "votes",
            "posts",
            "users"
        ],
        "columns": [
            "votes.`postid`",
            "votes.`userid`",
            "posts.`id`",
            "posts.`favoritecount`",
            "users.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "MAX"
        ],
        "conditions": [
            "posts voted by user 1465",
            "most valuable post"
        ]
    },
    {
        "tables": [
            "posts",
            "postlinks"
        ],
        "columns": [
            "posts.`id`",
            "posts.`title`",
            "posts.`creaiondate`",
            "postlinks.`postid`",
            "postlinks.`creationdate`",
            "postlinks.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "MIN"
        ],
        "conditions": [
            "oldest post link"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "badges.`name`",
            "badges.`userid`",
            "badges.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "acquired the highest amount of badges"
        ]
    },
    {
        "tables": [
            "users",
            "votes",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "votes.`creationdate`",
            "votes.`userid`",
            "votes.`id`",
            "posts.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "MIN",
            "WHERE"
        ],
        "conditions": [
            "chl cast its first vote in a post"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`id`",
            "users.`age`",
            "users.`creationdate`",
            "posts.`id`",
            "posts.`creaiondate`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "ON"
        ],
        "conditions": [
            "youngest user",
            "first post"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`displayname`",
            "badges.`name`",
            "badges.`userid`",
            "badges.`date`"
        ],
        "sql_keywords": [
            "JOIN",
            "MIN"
        ],
        "conditions": [
            "acquired the first Autobiographer badge"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`id`",
            "users.`location`",
            "posts.`id`",
            "posts.`favoritecount`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "located in United Kingdom",
            "post have a total favorite amount of 4 or more"
        ]
    },
    {
        "tables": [
            "votes",
            "users"
        ],
        "columns": [
            "votes.`postid`",
            "votes.`userid`",
            "users.`id`",
            "users.`age`"
        ],
        "sql_keywords": [
            "AVG",
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "oldest users"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`displayname`",
            "users.`reputation`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "highest reputation"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`id`",
            "users.`reputation`",
            "users.`views`"
        ],
        "sql_keywords": [
            "=",
            ">"
        ],
        "conditions": [
            "reputation higher than 2000",
            "number of views higher than 1000"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`displayname`",
            "users.`age`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "adults"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "users.`creationdate`",
            "posts.`id`",
            "posts.`creaiondate`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "=",
            "YEAR"
        ],
        "conditions": [
            "year 2010"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "users.`views`",
            "posts.`id`",
            "posts.`viewcount`",
            "posts.`title`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "MAX",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "post by Harvey Motulsky",
            "most views",
            "give the id",
            "give the title"
        ]
    },
    {
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.`id`",
            "posts.`score`",
            "posts.`title`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "highest score"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "posts.`score`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "Stephen Turner's posts"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "posts.`viewcount`",
            "posts.`id`",
            "posts.`creaiondate`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "posts had over 20000 views",
            "in 2011"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`favoritecount`",
            "posts.`owneruserid`",
            "users.`displayname`",
            "users.`id`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "most valuable post in 2010",
            "give its id",
            "give the owner's display name"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`owneruserid`",
            "users.`id`",
            "users.`reputation`",
            "users.`creationdate`"
        ],
        "sql_keywords": [
            "COUNT",
            "YEAR",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "reputation of over 1000",
            "in 2011"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`id`",
            "users.`age`"
        ],
        "sql_keywords": [
            "COUNT",
            "BETWEEN"
        ],
        "conditions": [
            "teenage users"
        ]
    },
    {
        "tables": [
            "posts",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`viewcount`",
            "posts.`lasteditoruserid`",
            "users.`displayname`",
            "users.`id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "total views on the post 'Computer Game Datasets'",
            "name the user who posted it last time"
        ]
    },
    {
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.`viewcount`",
            "posts.`id`"
        ],
        "sql_keywords": [
            "AVG",
            ">"
        ],
        "conditions": [
            "views above average"
        ]
    },
    {
        "tables": [
            "posts",
            "comments"
        ],
        "columns": [
            "posts.`id`",
            "posts.`score`",
            "comments.`postid`",
            "comments.`id`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "post with the highest score"
        ]
    },
    {
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.`viewcount`",
            "posts.`commentcount`"
        ],
        "sql_keywords": [
            "=",
            ">"
        ],
        "conditions": [
            "number of posts viewed over 35000 times",
            "posts received no comments from other users"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`displayname`",
            "users.`location`",
            "posts.`lasteditoruserid`",
            "posts.`lasteditdate`",
            "posts.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "="
        ],
        "conditions": [
            "display name",
            "location",
            "last to edit the post with ID 183"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "badges.`name`",
            "badges.`userid`",
            "badges.`date`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "display name Emmett"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`id`",
            "users.`upvotes`",
            "users.`age`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "adult users",
            "cast over 5000 upvotes"
        ]
    },
    {
        "tables": [
            "users",
            "badges"
        ],
        "columns": [
            "users.`displayname`",
            "users.`id`",
            "users.`creationdate`",
            "badges.`name`",
            "badges.`userid`",
            "badges.`date`",
            "badges.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "user's display name is 'Zolomon'",
            "count from the date the user's account was created"
        ]
    },
    {
        "tables": [
            "users",
            "posts",
            "comments"
        ],
        "columns": [
            "users.`id`",
            "users.`creationdate`",
            "posts.`id`",
            "posts.`owneruserid`",
            "comments.`id`",
            "comments.`userid`",
            "comments.`postid`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "GROUP BY"
        ],
        "conditions": [
            "number of posts",
            "number of comments",
            "latest created user account"
        ]
    },
    {
        "tables": [
            "comments",
            "posts",
            "users"
        ],
        "columns": [
            "comments.`creationdate`",
            "comments.`text`",
            "comments.`userid`",
            "posts.`id`",
            "posts.`title`",
            "users.`displayname`",
            "users.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "latest 10 comments",
            "post with the title 'Analysing wind data with R'",
            "display name of the user who left it"
        ]
    },
    {
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.`name`",
            "badges.`userid`",
            "badges.`date`",
            "badges.`id`",
            "users.`id`",
            "users.`displayname`",
            "users.`reputation`",
            "users.`creationdate`",
            "users.`lastaccessdate`",
            "users.`websiteurl`",
            "users.`location`",
            "users.`aboutme`",
            "users.`views`",
            "users.`upvotes`",
            "users.`downvotes`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "awarded with 'Citizen Patrol' badge"
        ]
    },
    {
        "tables": [
            "tags",
            "posts"
        ],
        "columns": [
            "tags.`tagname`",
            "tags.`count`",
            "posts.`id`",
            "posts.`tags`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "tag specified as 'careers'"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`displayname`",
            "users.`reputation`",
            "users.`views`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "display name 'Jarrod Dixon'"
        ]
    },
    {
        "tables": [
            "posts",
            "comments",
            "users"
        ],
        "columns": [
            "posts.`id`",
            "posts.`title`",
            "posts.`answercount`",
            "posts.`commentcount`",
            "comments.`postid`",
            "comments.`id`",
            "comments.`userid`",
            "users.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "post with the title 'Clustering 1D data'"
        ]
    },
    {
        "tables": [
            "users"
        ],
        "columns": [
            "users.`displayname`",
            "users.`creationdate`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "user known as 'IrishStat'",
            "create his or her account"
        ]
    },
    {
        "tables": [
            "votes",
            "posts"
        ],
        "columns": [
            "votes.`postid`",
            "votes.`bountyamount`",
            "posts.`id`"
        ],
        "sql_keywords": [
            "=",
            ">="
        ],
        "conditions": [
            "bounty amount over 30"
        ]
    },
    {
        "tables": [
            "users",
            "posts"
        ],
        "columns": [
            "users.`id`",
            "users.`reputation`",
            "posts.`id`",
            "posts.`score`",
            "posts.`owneruserid`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "HAVING",
            "MAX",
            "COUNT"
        ],
        "conditions": [
            "posts by the most influential user",
            "score above 50"
        ]
    },
    {
        "tables": [
            "posts"
        ],
        "columns": [
            "posts.`score`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "score less than 20"
        ]
    },
    {
        "tables": [
            "tags"
        ],
        "columns": [
            "tags.`id`",
            "tags.`count`"
        ],
        "sql_keywords": [
            "SELECT",
            "COUNT",
            "FROM",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "tag ID below 15",
            "20 count of posts and below"
        ]
    },
    {
        "tables": [
            "tags"
        ],
        "columns": [
            "tags.`excerptpostid`",
            "tags.`wikipostid`",
            "tags.`tagname`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "tag named sample"
        ]
    },
    {
        "tables": [
            "comments",
            "users"
        ],
        "columns": [
            "comments.`text`",
            "comments.`userid`",
            "users.`reputation`",
            "users.`upvotes`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "user commented 'fine, you win :)'"
        ]
    },
    {
        "tables": [
            "comments",
            "posts"
        ],
        "columns": [
            "comments.`text`",
            "posts.`id`",
            "posts.`title`"
        ],
        "sql_keywords": [
            "LIKE"
        ],
        "conditions": [
            "texts commented on the post about linear regression"
        ]
    },
    {
        "tables": [
            "posts",
            "comments"
        ],
        "columns": [
            "posts.`id`",
            "posts.`viewcount`",
            "posts.`score`",
            "comments.`text`",
            "comments.`score`",
            "comments.`postid`"
        ],
        "sql_keywords": [
            "BETWEEN",
            "MAX"
        ],
        "conditions": [
            "views ranging from 100 to 150"
        ]
    },
    {
        "tables": [
            "comments",
            "users"
        ],
        "columns": [
            "comments.`creationdate`",
            "comments.`text`",
            "comments.`userid`",
            "users.`id`",
            "users.`age`",
            "users.`creationdate`"
        ],
        "sql_keywords": [
            "JOIN",
            "LIKE"
        ],
        "conditions": [
            "creation date",
            "age of the user",
            "commented with website"
        ]
    },
    {
        "tables": [
            "comments",
            "posts"
        ],
        "columns": [
            "comments.`score`",
            "comments.`postid`",
            "posts.`viewcount`",
            "posts.`id`"
        ],
        "sql_keywords": [
            "=",
            "<"
        ],
        "conditions": [
            "comments with 0 score",
            "posts have view count lower than 5"
        ]
    },
    {
        "tables": [
            "posts",
            "comments"
        ],
        "columns": [
            "posts.`id`",
            "posts.`commentcount`",
            "comments.`postid`",
            "comments.`score`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "posts with 1 comment",
            "comments have 0 score"
        ]
    },
    {
        "tables": [
            "comments",
            "users"
        ],
        "columns": [
            "comments.`creationdate`",
            "comments.`score`",
            "comments.`userid`",
            "comments.`text`",
            "comments.`postid`",
            "comments.`userdisplayname`",
            "comments.`id`",
            "users.`displayname`",
            "users.`downvotes`",
            "users.`id`",
            "users.`aboutme`",
            "users.`views`",
            "users.`lastaccessdate`",
            "users.`reputation`",
            "users.`accountid`",
            "users.`upvotes`",
            "users.`age`",
            "users.`profileimageurl`",
            "users.`websiteurl`",
            "users.`location`",
            "users.`creationdate`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "COUNT"
        ],
        "conditions": [
            "products comments with 0 score",
            "users ages 40 years old"
        ]
    },
    {
        "tables": [
            "posts",
            "comments"
        ],
        "columns": [
            "posts.`id`",
            "posts.`title`",
            "comments.`postid`",
            "comments.`text`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "post ID",
            "comments commented in the post",
            "post titled by 'Group differences on a five point Likert item'"
        ]
    },
    {
        "tables": [
            "comments",
            "users"
        ],
        "columns": [
            "comments.`text`",
            "comments.`userid`",
            "users.`id`",
            "users.`upvotes`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "user commented 'R is also lazy evaluated.'"
        ]
    },
    {
        "tables": [
            "users",
            "comments"
        ],
        "columns": [
            "users.`id`",
            "users.`displayname`",
            "comments.`id`",
            "comments.`text`",
            "comments.`userid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "username of Harvey Motulsky"
        ]
    },
    {
        "tables": [
            "comments",
            "users"
        ],
        "columns": [
            "comments.`creationdate`",
            "comments.`score`",
            "comments.`userid`",
            "comments.`text`",
            "comments.`postid`",
            "comments.`userdisplayname`",
            "comments.`id`",
            "users.`displayname`",
            "users.`downvotes`",
            "users.`id`",
            "users.`aboutme`",
            "users.`views`",
            "users.`lastaccessdate`",
            "users.`reputation`",
            "users.`accountid`",
            "users.`upvotes`",
            "users.`age`",
            "users.`profileimageurl`",
            "users.`websiteurl`",
            "users.`location`",
            "users.`creationdate`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "BETWEEN"
        ],
        "conditions": [
            "score between 1 to 5",
            "0 down votes"
        ]
    },
    {
        "tables": [
            "comments",
            "users"
        ],
        "columns": [
            "comments.`score`",
            "comments.`userid`",
            "users.`id`",
            "users.`upvotes`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "BETWEEN"
        ],
        "conditions": [
            "scores between 5 to 10",
            "users with 0 up votes"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "super power of 'Super Strength'"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`height_cm`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "super power of 'Super Strength'",
            "height of over 200cm"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`full_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "superheroes with over 15 super powers"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`eye_colour_id`",
            "colour.`id`",
            "colour.`colour`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "blue eyes"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`skin_colour_id`",
            "colour.`colour`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "colour",
            "superpower",
            "hero_power"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`eye_colour_id`",
            "colour.`id`",
            "colour.`colour`",
            "superpower.`id`",
            "superpower.`power_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "blue eyes",
            "super power of 'Agility'"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`eye_colour_id`",
            "superhero.`hair_colour_id`",
            "colour.`colour`",
            "colour.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "blue eyes",
            "blond hair"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`publisher_id`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "publisher"
        ],
        "columns": [
            "superhero.`height_cm`",
            "superhero.`superhero_name`",
            "superhero.`publisher_id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "ORDER BY",
            "DESC",
            "JOIN"
        ],
        "conditions": [
            "heroes published by Marvel Comics",
            "height in descending order"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`publisher_id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "publisher of Sauron"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour",
            "publisher"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`eye_colour_id`",
            "superhero.`publisher_id`",
            "colour.`id`",
            "colour.`colour`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "Rank superheroes from Marvel Comics",
            "by their eye color popularity",
            "starting with the most common color"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher"
        ],
        "columns": [
            "superhero.`height_cm`",
            "superhero.`publisher_id`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "="
        ],
        "conditions": [
            "superheroes from Marvel Comics"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`publisher_id`",
            "publisher.`id`",
            "publisher.`publisher_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "super power of 'Super Strength'"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`publisher_id`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "hero_attribute",
            "attribute",
            "publisher"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`publisher_id`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`",
            "attribute.`id`",
            "attribute.`attribute_name`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "slowest superhero"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour",
            "publisher"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`eye_colour_id`",
            "superhero.`publisher_id`",
            "colour.`id`",
            "colour.`colour`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "COUNT"
        ],
        "conditions": [
            "gold-eyed superheroes",
            "Marvel Comics"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`publisher_id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "publisher's name",
            "Blue Beetle II"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`hair_colour_id`",
            "colour.`id`",
            "colour.`colour`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "superheroes with blonde hair"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_attribute",
            "attribute"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`",
            "attribute.`id`",
            "attribute.`attribute_name`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "WHERE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "race"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`race_id`",
            "race.`race`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "hero_attribute",
            "attribute"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`",
            "attribute.`id`",
            "attribute.`attribute_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "durability attribute value of less than 50"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`power_name`",
            "superpower.`id`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "power of death touch"
        ]
    },
    {
        "tables": [
            "superhero",
            "gender",
            "hero_attribute",
            "attribute"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`gender_id`",
            "gender.`gender`",
            "gender.`id`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`",
            "attribute.`id`",
            "attribute.`attribute_name`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "female superheroes",
            "strength value of 100"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`id`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "MAX",
            "COUNT",
            "GROUP BY"
        ],
        "conditions": [
            "superhero",
            "most powers"
        ]
    },
    {
        "tables": [
            "superhero",
            "race"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`race_id`",
            "race.`id`",
            "race.`race`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "alignment",
            "publisher"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`alignment_id`",
            "superhero.`publisher_id`",
            "alignment.`alignment`",
            "alignment.`id`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "COUNT",
            "SUM",
            "DIVIDE",
            "MULTIPLY",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "superheroes who act in their own self-interest",
            "superheroes who make decisions based on their own moral code",
            "superheroes published by Marvel Comics"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`publisher_id`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "UNION",
            "SUM",
            "SUBTRACT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "publisher"
        ],
        "columns": [
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "publisher ID of Star Trek"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_attribute"
        ],
        "columns": [
            "superhero.`id`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`"
        ],
        "sql_keywords": [
            "AVG"
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`full_name`"
        ],
        "sql_keywords": [
            "COUNT",
            "IS NULL"
        ],
        "conditions": [
            "without full name"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`eye_colour_id`",
            "colour.`id`",
            "colour.`colour`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "superhero ID 75"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "superpowers of the superhero called Deathlok"
        ]
    },
    {
        "tables": [
            "superhero",
            "gender"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`gender_id`",
            "superhero.`full_name`",
            "superhero.`weight_kg`",
            "gender.`id`",
            "gender.`gender`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "female superheroes"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower",
            "gender"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`gender_id`",
            "hero_power.`power_id`",
            "hero_power.`hero_id`",
            "superpower.`power_name`",
            "superpower.`id`",
            "gender.`id`",
            "gender.`gender`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "male superheroes"
        ]
    },
    {
        "tables": [
            "superhero",
            "race"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "race.`race`"
        ],
        "sql_keywords": [
            "LIKE",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`height_cm`",
            "superhero.`eye_colour_id`",
            "colour.`id`",
            "colour.`colour`"
        ],
        "sql_keywords": [
            "BETWEEN",
            "="
        ],
        "conditions": [
            "height from 170 to 190",
            "no eye color"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN"
        ],
        "conditions": [
            "hero ID 56"
        ]
    },
    {
        "tables": [
            "superhero",
            "race"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`race_id`",
            "superhero.`full_name`",
            "race.`race`",
            "race.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "alignment"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`alignment_id`",
            "alignment.`id`",
            "alignment.`alignment`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "race"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`full_name`",
            "superhero.`weight_kg`",
            "superhero.`race_id`",
            "race.`id`",
            "race.`race`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "race of the superhero",
            "weighed 169 kg"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`full_name`",
            "superhero.`gender_id`",
            "superhero.`eye_colour_id`",
            "superhero.`hair_colour_id`",
            "superhero.`skin_colour_id`",
            "superhero.`race_id`",
            "superhero.`publisher_id`",
            "superhero.`alignment_id`",
            "superhero.`height_cm`",
            "superhero.`weight_kg`",
            "colour.`colour`",
            "colour.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "WHERE"
        ],
        "conditions": [
            "human superhero",
            "185 cm tall"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`eye_colour_id`",
            "superhero.`weight_kg`",
            "colour.`id`",
            "colour.`colour`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "ON"
        ],
        "conditions": [
            "heaviest superhero"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher"
        ],
        "columns": [
            "superhero.`height_cm`",
            "superhero.`publisher_id`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "BETWEEN",
            "=",
            "COUNT",
            "SUM",
            "DIVIDE",
            "MULTIPLY"
        ],
        "conditions": [
            "height between 150 to 180",
            "published by Marvel Comics"
        ]
    },
    {
        "tables": [
            "superhero",
            "gender"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`weight_kg`",
            "superhero.`gender_id`",
            "gender.`gender`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "AVG",
            "SUBQUERY"
        ],
        "conditions": [
            "male superheroes",
            "weight greater than the 79% average weight of all superheroes"
        ]
    },
    {
        "tables": [
            "superpower",
            "hero_power",
            "superhero"
        ],
        "columns": [
            "superpower.`id`",
            "superpower.`power_name`",
            "hero_power.`power_id`",
            "hero_power.`hero_id`",
            "superhero.`id`"
        ],
        "sql_keywords": [
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "power do superheroes have the most of"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_attribute"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "attribute value of superhero Abomination"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`id`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`power_name`",
            "superpower.`id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "ID 1"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`id`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`power_name`",
            "superpower.`id`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "heroes have stealth power"
        ]
    },

    {
        "tables": [
            "superhero",
            "hero_attribute",
            "attribute"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`full_name`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`",
            "attribute.`id`",
            "attribute.`attribute_name`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "hero's full name",
            "highest attribute in strength"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`skin_colour_id`",
            "colour.`id`",
            "colour.`colour`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "no skin colour"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`publisher_id`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "superheroes published by Dark Horse Comics"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_attribute",
            "attribute",
            "publisher"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`id`",
            "superhero.`publisher_id`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`",
            "attribute.`id`",
            "attribute.`attribute_name`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "MAX",
            "WHERE",
            "JOIN"
        ],
        "conditions": [
            "superhero",
            "most durability",
            "published by Dark Horse Comics"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`full_name`",
            "superhero.`eye_colour_id`",
            "colour.`colour`",
            "colour.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`power_name`",
            "superpower.`id`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "superheroes with flight power"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour",
            "gender",
            "publisher"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`gender_id`",
            "superhero.`eye_colour_id`",
            "superhero.`hair_colour_id`",
            "superhero.`skin_colour_id`",
            "superhero.`publisher_id`",
            "colour.`colour`",
            "gender.`gender`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "female superheroes",
            "published by Dark Horse Comics"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour",
            "publisher"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`eye_colour_id`",
            "superhero.`hair_colour_id`",
            "superhero.`skin_colour_id`",
            "superhero.`publisher_id`",
            "colour.`colour`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "same eyes",
            "same hair",
            "same skin colour",
            "indicate publisher"
        ]
    },
    {
        "tables": [
            "superhero",
            "race"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`race_id`",
            "race.`race`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "superhero A-Bomb"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour",
            "gender"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`skin_colour_id`",
            "superhero.`gender_id`",
            "colour.`colour`",
            "colour.`id`",
            "gender.`gender`",
            "gender.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "SUM",
            "COUNT",
            "DIVIDE",
            "MULTIPLY"
        ],
        "conditions": [
            "blue female superheroes",
            "all female superheroes"
        ]
    },
    {
        "tables": [
            "superhero",
            "race"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`full_name`",
            "superhero.`race_id`",
            "race.`race`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "hero name",
            "race",
            "Charles Chandler"
        ]
    },
    {
        "tables": [
            "superhero",
            "gender"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`gender_id`",
            "gender.`gender`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "gender of Agent 13 hero"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`power_name`",
            "superpower.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "superheroes with adaptation power"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "COUNT",
            "JOIN"
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`full_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "powers of Hunter Zolomon"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`height_cm`",
            "superhero.`eye_colour_id`",
            "colour.`colour`",
            "colour.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "eye colours are amber"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`eye_colour_id`",
            "superhero.`hair_colour_id`",
            "colour.`colour`",
            "colour.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "eyes are black",
            "hair colour is black"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`eye_colour_id`",
            "superhero.`skin_colour_id`",
            "colour.`colour`",
            "colour.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "skin colours are gold"
        ]
    },
    {
        "tables": [
            "superhero",
            "race"
        ],
        "columns": [
            "superhero.`full_name`",
            "superhero.`race_id`",
            "race.`race`",
            "race.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "alignment"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`alignment_id`",
            "alignment.`alignment`",
            "alignment.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "hero_attribute",
            "attribute"
        ],
        "columns": [
            "superhero.`id`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`",
            "attribute.`id`",
            "attribute.`attribute_name`"
        ],
        "sql_keywords": [
            "MAX",
            "WHERE",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "highest attribute value in strength"
        ]
    },
    {
        "tables": [
            "superhero",
            "race",
            "alignment"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`race_id`",
            "superhero.`alignment_id`",
            "race.`race`",
            "alignment.`alignment`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "race",
            "alignment"
        ]
    },
    {
        "tables": [
            "superhero",
            "gender",
            "publisher"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`gender_id`",
            "superhero.`publisher_id`",
            "gender.`id`",
            "gender.`gender`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "JOIN",
            "WHERE",
            "DIVIDE",
            "MULTIPLY"
        ],
        "conditions": [
            "female heroes",
            "published by Marvel Comics"
        ]
    },
    {
        "tables": [
            "superhero",
            "race"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`race_id`",
            "superhero.`weight_kg`",
            "race.`race`",
            "race.`id`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "heroes",
            "aliens"
        ]
    },
    {
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.`weight_kg`",
            "superhero.`full_name`"
        ],
        "sql_keywords": [
            "SUM",
            "WHERE",
            "SUBTRACT"
        ],
        "conditions": [
            "Emil Blonsky's weight",
            "Charles Chandler's weight"
        ]
    },
    {
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`height_cm`"
        ],
        "sql_keywords": [
            "AVG",
            "GROUP BY"
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "gender",
            "race"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`race_id`",
            "superhero.`gender_id`",
            "gender.`id`",
            "gender.`gender`",
            "race.`id`",
            "race.`race`"
        ],
        "sql_keywords": [
            "=",
            "INTERSECT"
        ],
        "conditions": [
            "race of god/eternal",
            "male"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_attribute",
            "attribute"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`",
            "attribute.`id`",
            "attribute.`attribute_name`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "fastest"
        ]
    },
    {
        "tables": [
            "superhero",
            "alignment"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`alignment_id`",
            "alignment.`id`",
            "alignment.`alignment`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "neutral alignment"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_attribute",
            "attribute"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`",
            "attribute.`id`",
            "attribute.`attribute_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "3-D Man's attributes"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`eye_colour_id`",
            "superhero.`hair_colour_id`",
            "colour.`colour`",
            "colour.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "blue eyes",
            "brown hair"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`publisher_id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "=",
            "INTERSECT"
        ],
        "conditions": [
            "publisher for Hawkman",
            "publisher for Karate Kid",
            "publisher for Speedy"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`publisher_id`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "superheroes didn't have any publisher"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`eye_colour_id`",
            "colour.`colour`",
            "colour.`id`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "DIVIDE",
            "MULTIPLY",
            "JOIN"
        ],
        "conditions": [
            "superheroes with blue eyes"
        ]
    },
    {
        "tables": [
            "superhero",
            "gender"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`gender_id`",
            "gender.`id`",
            "gender.`gender`"
        ],
        "sql_keywords": [
            "SUM",
            "DIVIDE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`height_cm`"
        ],
        "sql_keywords": [
            "MAX"
        ],
        "conditions": [
            "tallest superhero"
        ]
    },
    {
        "tables": [
            "superpower"
        ],
        "columns": [
            "superpower.`id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "power ID of cryokinesis"
        ]
    },
    {
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "superhero ID 294"
        ]
    },
    {
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.`full_name`",
            "superhero.`weight_kg`"
        ],
        "sql_keywords": [
            "=",
            "OR"
        ],
        "conditions": [
            "superheroes with missing weight"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`full_name`",
            "superhero.`eye_colour_id`",
            "colour.`colour`",
            "colour.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "eye colour of the superhero",
            "Karen Beecher-Duncan as their full name"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`full_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "superhero has Helen Parr as their full name"
        ]
    },
    {
        "tables": [
            "superhero",
            "race"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`full_name`",
            "superhero.`race_id`",
            "superhero.`height_cm`",
            "superhero.`weight_kg`",
            "race.`id`",
            "race.`race`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "weighs 108kg",
            "is 188cm tall"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`publisher_id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "superhero ID 38"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_attribute",
            "race"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`race_id`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_value`",
            "race.`id`",
            "race.`race`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "superhero with maximum attribute value"
        ]
    },
    {
        "tables": [
            "superhero",
            "alignment",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`alignment_id`",
            "alignment.`alignment`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "alignment",
            "superpowers",
            "superhero named Atom IV"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`full_name`",
            "superhero.`eye_colour_id`",
            "colour.`colour`",
            "colour.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "LIMIT"
        ],
        "conditions": [
            "full names of superheroes",
            "blue eyes"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_attribute",
            "alignment"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`alignment_id`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_value`",
            "alignment.`id`",
            "alignment.`alignment`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "neutral superheroes"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_attribute",
            "colour"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`skin_colour_id`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_value`",
            "colour.`id`",
            "colour.`colour`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "skin colour of the superheroes",
            "100 attribute value"
        ]
    },
    {
        "tables": [
            "superhero",
            "gender",
            "alignment"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`gender_id`",
            "superhero.`alignment_id`",
            "gender.`id`",
            "gender.`gender`",
            "alignment.`id`",
            "alignment.`alignment`"
        ],
        "sql_keywords": [
            "COUNT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "female superheroes",
            "good"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_attribute"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`"
        ],
        "sql_keywords": [
            "BETWEEN"
        ],
        "conditions": [
            "attribute value between 75 to 80"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour",
            "gender",
            "race"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`gender_id`",
            "superhero.`hair_colour_id`",
            "superhero.`race_id`",
            "colour.`colour`",
            "gender.`gender`",
            "race.`race`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "="
        ],
        "conditions": [
            "blue-haired male superhero"
        ]
    },
    {
        "tables": [
            "superhero",
            "alignment",
            "gender"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`alignment_id`",
            "superhero.`gender_id`",
            "alignment.`id`",
            "alignment.`alignment`",
            "gender.`id`",
            "gender.`gender`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "DIVIDE",
            "MULTIPLY"
        ],
        "conditions": [
            "bad superheroes",
            "female superheroes"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`eye_colour_id`",
            "superhero.`weight_kg`",
            "colour.`id`",
            "colour.`colour`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "SUM",
            "SUBTRACT"
        ],
        "conditions": [
            "superheroes with missing weight data",
            "superheroes with blue eyes",
            "superheroes with no eye color"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_attribute",
            "attribute"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`",
            "attribute.`id`",
            "attribute.`attribute_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "How strong is the Hulk?"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`id`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`power_name`",
            "superpower.`id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "colour",
            "alignment"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`skin_colour_id`",
            "superhero.`alignment_id`",
            "colour.`id`",
            "colour.`colour`",
            "alignment.`id`",
            "alignment.`alignment`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "=",
            "AND"
        ],
        "conditions": [
            "green-skinned villains"
        ]
    },
    {
        "tables": [
            "superhero",
            "gender",
            "publisher"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`gender_id`",
            "superhero.`publisher_id`",
            "gender.`gender`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "female superheroes",
            "Marvel Comics"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`id`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`power_name`",
            "superpower.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY"
        ],
        "conditions": [
            "superheroes who can control wind"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower",
            "gender"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`gender_id`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`id`",
            "superpower.`power_name`",
            "gender.`id`",
            "gender.`gender`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "gender of the superhero",
            "ability of Phoenix Force"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`full_name`",
            "superhero.`publisher_id`",
            "superhero.`weight_kg`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "heaviest superhero",
            "DC Comics"
        ]
    },
    {
        "tables": [
            "superhero",
            "race",
            "publisher"
        ],
        "columns": [
            "superhero.`height_cm`",
            "superhero.`race_id`",
            "superhero.`publisher_id`",
            "race.`race`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "non-human superhero",
            "Dark Horse Comics"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_attribute",
            "attribute"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`",
            "attribute.`id`",
            "attribute.`attribute_name`"
        ],
        "sql_keywords": [
            "COUNT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "fastest superheroes"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`publisher_id`",
            "publisher.`id`",
            "publisher.`publisher_name`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "UNION",
            "SUM",
            "SUBTRACT"
        ],
        "conditions": [
            "publisher created more superheroes",
            "DC",
            "Marvel Comics",
            "difference in the number of superheroes"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_attribute",
            "attribute"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`",
            "attribute.`id`",
            "attribute.`attribute_name`"
        ],
        "sql_keywords": [
            "MIN",
            "="
        ],
        "conditions": [
            "weakest attribute of the Black Panther"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`eye_colour_id`",
            "colour.`colour`",
            "colour.`id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`height_cm`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`full_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "superhero",
            "otherwise known as Charles Chandler"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher",
            "gender"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`gender_id`",
            "superhero.`publisher_id`",
            "publisher.`publisher_name`",
            "gender.`gender`"
        ],
        "sql_keywords": [
            "EXACT MATCHING (=)",
            "SUM",
            "COUNT",
            "DIVIDE",
            "MULTIPLY"
        ],
        "conditions": [
            "superheroes created by George Lucas",
            "female superheroes"
        ]
    },
    {
        "tables": [
            "superhero",
            "publisher",
            "alignment"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`alignment_id`",
            "superhero.`publisher_id`",
            "publisher.`id`",
            "publisher.`publisher_name`",
            "alignment.`id`",
            "alignment.`alignment`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "COUNT",
            "SUM",
            "DIVIDE",
            "MULTIPLY"
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "superhero.`full_name`"
        ],
        "sql_keywords": [
            "LIKE"
        ],
        "conditions": [
            "first name is John"
        ]
    },
    {
        "tables": [
            "hero_attribute",
            "superhero"
        ],
        "columns": [
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`",
            "superhero.`id`",
            "superhero.`superhero_name`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN"
        ],
        "conditions": [
            "lowest attribute value"
        ]
    },
    {
        "tables": [
            "superhero"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`full_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`full_name`",
            "superhero.`eye_colour_id`",
            "superhero.`weight_kg`",
            "colour.`id`",
            "colour.`colour`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "weight less than 100",
            "brown eyes"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_attribute",
            "attribute"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`superhero_name`",
            "hero_attribute.`hero_id`",
            "hero_attribute.`attribute_id`",
            "hero_attribute.`attribute_value`",
            "attribute.`id`",
            "attribute.`attribute_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "superhero named Aquababy"
        ]
    },
    {
        "tables": [
            "superhero",
            "race"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`weight_kg`",
            "superhero.`race_id`",
            "race.`race`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "superhero ID 40",
            "weight",
            "race"
        ]
    },
    {
        "tables": [
            "superhero",
            "alignment"
        ],
        "columns": [
            "superhero.`height_cm`",
            "superhero.`alignment_id`",
            "alignment.`alignment`",
            "alignment.`id`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "neutral superheroes"
        ]
    },
    {
        "tables": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "superhero.`id`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`",
            "superpower.`id`",
            "superpower.`power_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "have intelligence as their power"
        ]
    },
    {
        "tables": [
            "superhero",
            "colour"
        ],
        "columns": [
            "superhero.`superhero_name`",
            "superhero.`eye_colour_id`",
            "colour.`colour`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "eye colour of Blackwulf"
        ]
    },
    {
        "tables": [
            "superhero",
            "superpower",
            "hero_power"
        ],
        "columns": [
            "superhero.`id`",
            "superhero.`height_cm`",
            "superpower.`power_name`",
            "hero_power.`hero_id`",
            "hero_power.`power_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "AVG",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "height greater than 80% of the average height of all superheroes"
        ]
    },
    {
        "tables": [
            "qualifying",
            "drivers"
        ],
        "columns": [
            "qualifying.`raceid`",
            "qualifying.`q1`",
            "qualifying.`driverid`",
            "drivers.`driverref`"
        ],
        "sql_keywords": [
            "MAX",
            "WHERE"
        ],
        "conditions": [
            "eliminated in the first period",
            "race number 20"
        ]
    },
    {
        "tables": [
            "qualifying",
            "drivers"
        ],
        "columns": [
            "qualifying.`raceid`",
            "qualifying.`driverid`",
            "qualifying.`q2`",
            "drivers.`surname`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "best lap time",
            "race number 19",
            "second qualifying period"
        ]
    },
    {
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.`circuitid`",
            "circuits.`circuitref`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`lng`",
            "circuits.`alt`",
            "circuits.`url`",
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "races.`time`",
            "races.`date`",
            "races.`url`",
            "races.`round`",
            "races.`raceid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "race is held on circuits in Shanghai"
        ]
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`url`",
            "circuits.`name`",
            "circuits.`circuitid`",
            "races.`circuitid`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`name`",
            "races.`circuitid`",
            "circuits.`name`",
            "circuits.`country`",
            "circuits.`circuitid`",
            "circuits.`location`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "constructors",
            "circuits",
            "races",
            "results",
            "constructorresults",
            "constructorstandings"
        ],
        "columns": [
            "constructors.`constructorid`",
            "constructors.`name`",
            "circuits.`circuitid`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "races.`circuitid`",
            "races.`name`",
            "results.`constructorid`",
            "results.`position`",
            "constructorresults.`constructorid`",
            "constructorresults.`points`",
            "constructorstandings.`constructorid`",
            "constructorstandings.`position`",
            "constructorstandings.`points`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`year`",
            "races.`name`",
            "races.`circuitid`",
            "circuits.`country`",
            "circuits.`circuitid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "year 2010",
            "grand prixs",
            "outside Asia",
            "outside Europe"
        ]
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`name`",
            "races.`circuitid`",
            "circuits.`name`",
            "circuits.`country`",
            "circuits.`circuitid`",
            "circuits.`location`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "races held on circuits in Spain"
        ]
    },
    {
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.`circuitid`",
            "circuits.`circuitref`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`lng`",
            "circuits.`alt`",
            "circuits.`url`",
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "races.`time`",
            "races.`date`",
            "races.`url`",
            "races.`round`",
            "races.`raceid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "coordinates location",
            "circuits",
            "Australian grand prix"
        ]
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "races.`time`",
            "races.`date`",
            "races.`url`",
            "races.`round`",
            "races.`raceid`",
            "circuits.`circuitref`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`alt`",
            "circuits.`name`",
            "circuits.`url`",
            "circuits.`lng`",
            "circuits.`circuitid`",
            "circuits.`location`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "races held on Sepang International Circuit"
        ]
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "races.`time`",
            "races.`date`",
            "races.`url`",
            "races.`round`",
            "circuits.`circuitid`",
            "circuits.`circuitref`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`lng`",
            "circuits.`alt`",
            "circuits.`url`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "time of the races",
            "held on Sepang International Circuit"
        ]
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`round`",
            "races.`circuitid`",
            "races.`name`",
            "races.`date`",
            "races.`time`",
            "races.`url`",
            "circuits.`circuitid`",
            "circuits.`circuitref`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`lng`",
            "circuits.`alt`",
            "circuits.`url`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "constructorresults",
            "constructors"
        ],
        "columns": [
            "constructorresults.`constructorid`",
            "constructorresults.`points`",
            "constructorresults.`raceid`",
            "constructors.`nationality`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "WHERE"
        ],
        "conditions": [
            "constructor got 1 point",
            "race No. 24"
        ]
    },
    {
        "tables": [
            "qualifying",
            "drivers"
        ],
        "columns": [
            "qualifying.`raceid`",
            "qualifying.`q1`",
            "qualifying.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "drivers.`driverid`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "Bruno Senna's Q1 result",
            "qualifying race No. 354"
        ]
    },
    {
        "tables": [
            "qualifying",
            "drivers"
        ],
        "columns": [
            "qualifying.`raceid`",
            "qualifying.`driverid`",
            "qualifying.`q2`",
            "drivers.`nationality`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "Q2 time as 0:01:40",
            "qualifying race No. 355"
        ]
    },
    {
        "tables": [
            "qualifying",
            "drivers"
        ],
        "columns": [
            "qualifying.`raceid`",
            "qualifying.`driverid`",
            "qualifying.`q3`",
            "drivers.`number`",
            "drivers.`driverid`"
        ],
        "sql_keywords": [
            "LIKE",
            "="
        ],
        "conditions": [
            "finished 0:01:54 in the Q3 of qualifying race No.903"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "drivers"
        ],
        "columns": [
            "races.`year`",
            "races.`name`",
            "races.`raceid`",
            "results.`driverid`",
            "results.`raceid`",
            "results.`time`",
            "drivers.`driverid`",
            "drivers.`surname`",
            "drivers.`forename`"
        ],
        "sql_keywords": [
            "NOT EXISTS",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "Bahrain Grand Prix in 2007",
            "drivers not finished the game"
        ]
    },
    {
        "tables": [
            "races",
            "seasons"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "seasons.`url`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "race No. 901 took place"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "status"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`date`",
            "results.`driverid`",
            "results.`time`",
            "results.`statusid`",
            "status.`statusid`",
            "status.`status`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "race happened on 2015/11/29"
        ]
    },
    {
        "tables": [
            "results",
            "drivers"
        ],
        "columns": [
            "results.`driverid`",
            "results.`raceid`",
            "results.`time`",
            "drivers.`driverid`",
            "drivers.`dob`",
            "drivers.`surname`",
            "drivers.`forename`"
        ],
        "sql_keywords": [
            "=",
            "IS NOT NULL",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "finished the game in race No. 592",
            "oldest"
        ]
    },
    {
        "tables": [
            "laptimes",
            "drivers"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`driverid`",
            "laptimes.`time`",
            "drivers.`url`",
            "drivers.`driverid`"
        ],
        "sql_keywords": [
            "=",
            "LIKE"
        ],
        "conditions": [
            "lap time of 0:01:27",
            "race No. 161"
        ]
    },
    {
        "tables": [
            "results",
            "drivers"
        ],
        "columns": [
            "results.`driverid`",
            "results.`fastestlapspeed`",
            "results.`raceid`",
            "drivers.`nationality`",
            "drivers.`driverid`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "driver set the fastest lap speed",
            "race No.933"
        ]
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`name`",
            "races.`circuitid`",
            "circuits.`location`",
            "circuits.`lat`",
            "circuits.`lng`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "constructorresults",
            "constructors",
            "races"
        ],
        "columns": [
            "constructorresults.`constructorid`",
            "constructorresults.`points`",
            "constructorresults.`raceid`",
            "constructors.`url`",
            "races.`raceid`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "="
        ],
        "conditions": [
            "constructor got the highest point in the race No. 9"
        ]
    },
    {
        "tables": [
            "qualifying",
            "drivers",
            "races"
        ],
        "columns": [
            "qualifying.`raceid`",
            "qualifying.`driverid`",
            "qualifying.`q1`",
            "drivers.`driverid`",
            "drivers.`surname`",
            "drivers.`forename`",
            "races.`raceid`",
            "races.`name`",
            "races.`date`"
        ],
        "sql_keywords": [
            "=",
            "LIKE"
        ],
        "conditions": [
            "Lucas di Grassi's Q1 result",
            "race No. 345"
        ]
    },
    {
        "tables": [
            "qualifying",
            "drivers"
        ],
        "columns": [
            "qualifying.`raceid`",
            "qualifying.`driverid`",
            "qualifying.`q2`",
            "drivers.`nationality`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "Q2 time as 0:01:15",
            "race No. 347"
        ]
    },
    {
        "tables": [
            "qualifying",
            "drivers"
        ],
        "columns": [
            "qualifying.`raceid`",
            "qualifying.`driverid`",
            "qualifying.`q3`",
            "drivers.`driverid`",
            "drivers.`code`"
        ],
        "sql_keywords": [
            "LIKE",
            "="
        ],
        "conditions": [
            "race No. 45",
            "Q3 time as 0:01:33"
        ]
    },
    {
        "tables": [
            "results",
            "drivers",
            "races"
        ],
        "columns": [
            "results.`driverid`",
            "results.`raceid`",
            "results.`time`",
            "drivers.`driverid`",
            "drivers.`driverref`",
            "races.`raceid`",
            "races.`name`",
            "races.`time`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "race No.743",
            "actual finish time for Bruce McLaren"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "drivers"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`driverid`",
            "results.`raceid`",
            "results.`position`",
            "drivers.`driverid`",
            "drivers.`surname`",
            "drivers.`forename`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "finished second",
            "San Marino Grand Prix",
            "2006"
        ]
    },
    {
        "tables": [
            "races",
            "seasons"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "seasons.`url`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "race No. 901 took place"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "status"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`date`",
            "results.`driverid`",
            "results.`raceid`",
            "results.`statusid`",
            "status.`statusid`",
            "status.`status`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "race happened in 2015/11/29",
            "drivers did not finish the game"
        ]
    },
    {
        "tables": [
            "results",
            "drivers"
        ],
        "columns": [
            "results.`raceid`",
            "results.`driverid`",
            "results.`time`",
            "drivers.`driverid`",
            "drivers.`dob`",
            "drivers.`forename`",
            "drivers.`surname`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "MAX"
        ],
        "conditions": [
            "finished the game in race No. 872"
        ]
    },
    {
        "tables": [
            "laptimes",
            "drivers"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`driverid`",
            "laptimes.`time`",
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN"
        ],
        "conditions": [
            "driver",
            "best lap time",
            "race No. 348",
            "full name"
        ]
    },
    {
        "tables": [
            "results",
            "drivers"
        ],
        "columns": [
            "results.`fastestlapspeed`",
            "results.`driverid`",
            "drivers.`nationality`",
            "drivers.`driverid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "MAX"
        ],
        "conditions": [
            "driver set the fastest lap speed"
        ]
    },
    {
        "tables": [
            "drivers",
            "results",
            "races"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "results.`raceid`",
            "results.`driverid`",
            "results.`fastestlapspeed`",
            "races.`raceid`",
            "races.`name`"
        ],
        "sql_keywords": [
            "=",
            "SUBTRACT",
            "DIVIDE"
        ],
        "conditions": [
            "Paul di Resta was in the No. 853 race",
            "what percent faster did he finish in the 853rd race than the next race for the fastest lap speed"
        ]
    },
    {
        "tables": [
            "results",
            "races",
            "drivers"
        ],
        "columns": [
            "results.`driverid`",
            "results.`time`",
            "races.`raceid`",
            "races.`date`",
            "drivers.`driverid`"
        ],
        "sql_keywords": [
            "COUNT",
            "CASE",
            "WHEN",
            "THEN",
            "ELSE",
            "END",
            "AS",
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "took part in the race in 1983/7/16"
        ]
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`year`",
            "races.`name`",
            "races.`date`",
            "circuits.`country`"
        ],
        "sql_keywords": [
            "=",
            "MIN"
        ],
        "conditions": []
    },
    {
        "tables": [
            "races",
            "seasons"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`round`",
            "races.`circuitid`",
            "races.`name`",
            "races.`date`",
            "races.`time`",
            "races.`url`",
            "seasons.`year`",
            "seasons.`url`"
        ],
        "sql_keywords": [
            "COUNT",
            "ORDER BY DESC"
        ],
        "conditions": [
            "year 2005",
            "descending order"
        ]
    },
    {
        "tables": [
            "races",
            "seasons"
        ],
        "columns": [
            "races.`name`",
            "races.`date`",
            "seasons.`year`",
            "seasons.`url`"
        ],
        "sql_keywords": [
            "MIN",
            "EXTRACT",
            "YEAR",
            "MONTH",
            "GROUP BY",
            "ORDER BY"
        ],
        "conditions": [
            "earliest recorded year",
            "earliest recorded month"
        ]
    },
    {
        "tables": [
            "races",
            "seasons"
        ],
        "columns": [
            "races.`name`",
            "races.`date`",
            "races.`year`",
            "races.`round`",
            "seasons.`year`"
        ],
        "sql_keywords": [
            "SELECT",
            "FROM",
            "WHERE",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "year 1999",
            "last round of race"
        ]
    },
    {
        "tables": [
            "races",
            "seasons"
        ],
        "columns": [
            "races.`year`",
            "races.`round`",
            "seasons.`year`"
        ],
        "sql_keywords": [
            "MAX",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "races",
            "seasons"
        ],
        "columns": [
            "races.`raceid`",
            "races.`url`",
            "races.`year`",
            "races.`time`",
            "races.`round`",
            "races.`circuitid`",
            "races.`date`",
            "races.`name`",
            "seasons.`year`",
            "seasons.`url`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "EXCEPT"
        ],
        "conditions": [
            "races in year 2017",
            "not hosted in year 2000"
        ]
    },
    {
        "tables": [
            "races",
            "circuits",
            "seasons"
        ],
        "columns": [
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "seasons.`year`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "JOIN"
        ],
        "conditions": [
            "first European Grand Prix hosted",
            "name the circuit",
            "location"
        ]
    },
    {
        "tables": [
            "races",
            "circuits",
            "seasons"
        ],
        "columns": [
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "races.`date`",
            "circuits.`circuitid`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "seasons.`year`",
            "seasons.`url`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "Brands Hatch hosted the British Grand Prix"
        ]
    },
    {
        "tables": [
            "races",
            "circuits",
            "seasons"
        ],
        "columns": [
            "races.`circuitid`",
            "races.`year`",
            "races.`name`",
            "circuits.`circuitid`",
            "circuits.`name`",
            "circuits.`country`",
            "seasons.`year`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "races",
            "results",
            "drivers"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`raceid`",
            "results.`driverid`",
            "results.`position`",
            "drivers.`driverid`",
            "drivers.`surname`",
            "drivers.`forename`"
        ],
        "sql_keywords": [
            "ORDER BY"
        ],
        "conditions": [
            "drivers in the 2010 Singapore Grand Prix",
            "order by their position stands"
        ]
    },
    {
        "tables": [
            "drivers",
            "driverstandings"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "driverstandings.`driverid`",
            "driverstandings.`points`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "driver with the most points scored",
            "full name with that points"
        ]
    },
    {
        "tables": [
            "races",
            "driverstandings",
            "drivers"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "driverstandings.`driverid`",
            "driverstandings.`points`",
            "drivers.`forename`",
            "drivers.`surname`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "top 3 drivers",
            "points scored",
            "2017 Chinese Grand Prix"
        ]
    },
    {
        "tables": [
            "laptimes",
            "drivers",
            "races"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`driverid`",
            "laptimes.`milliseconds`",
            "drivers.`forename`",
            "drivers.`surname`",
            "races.`name`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN"
        ],
        "conditions": [
            "best lap time recorded",
            "driver",
            "race"
        ]
    },
    {
        "tables": [
            "laptimes",
            "races",
            "drivers"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`driverid`",
            "laptimes.`milliseconds`",
            "races.`year`",
            "races.`name`",
            "races.`raceid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "drivers.`driverid`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "=",
            "WHERE"
        ],
        "conditions": [
            "Lewis Hamilton",
            "2009 Malaysian Grand Prix"
        ]
    },
    {
        "tables": [
            "results",
            "races",
            "drivers"
        ],
        "columns": [
            "results.`raceid`",
            "results.`driverid`",
            "results.`position`",
            "races.`year`",
            "drivers.`surname`"
        ],
        "sql_keywords": [
            "COUNT",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING",
            "DIVIDE"
        ],
        "conditions": [
            "Hamilton was not at the 1st track of the F1 circuit since 2010"
        ]
    },
    {
        "tables": [
            "drivers",
            "driverstandings"
        ],
        "columns": [
            "drivers.`forename`",
            "drivers.`surname`",
            "drivers.`nationality`",
            "driverstandings.`wins`",
            "driverstandings.`points`"
        ],
        "sql_keywords": [
            "MAX",
            "COUNT",
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "driver with the most winning",
            "nationality",
            "maximum point scores"
        ]
    },
    {
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.`driverref`",
            "drivers.`dob`",
            "drivers.`forename`",
            "drivers.`surname`",
            "drivers.`nationality`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "=",
            "MIN"
        ],
        "conditions": [
            "youngest Japanese driver"
        ]
    },
    {
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.`circuitid`",
            "circuits.`circuitref`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`lng`",
            "circuits.`alt`",
            "circuits.`url`",
            "races.`raceid`",
            "races.`year`",
            "races.`round`",
            "races.`circuitid`",
            "races.`name`",
            "races.`date`",
            "races.`time`",
            "races.`url`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "host 4 f1 races",
            "year 1990 to 2000"
        ]
    },
    {
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.`name`",
            "circuits.`location`",
            "races.`name`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "circuits in USA",
            "hosted f1 races in 2006",
            "name and location of circuit",
            "name of the race it hosted"
        ]
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`name`",
            "races.`date`",
            "circuits.`name`",
            "circuits.`location`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "f1 races hosted in September 2005",
            "races along with its circuit name and location"
        ]
    },
    {
        "tables": [
            "drivers",
            "results",
            "races"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "results.`raceid`",
            "results.`driverid`",
            "results.`position`",
            "races.`raceid`",
            "races.`name`",
            "races.`date`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "<"
        ],
        "conditions": [
            "Alex Yoong in track number less than 20"
        ]
    },
    {
        "tables": [
            "drivers",
            "races",
            "results",
            "circuits"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`driverref`",
            "drivers.`forename`",
            "drivers.`surname`",
            "races.`raceid`",
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "races.`date`",
            "races.`round`",
            "results.`driverid`",
            "results.`points`",
            "results.`raceid`",
            "results.`position`",
            "results.`resultid`",
            "circuits.`circuitid`",
            "circuits.`circuitref`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "MAX",
            "GROUP BY"
        ],
        "conditions": [
            "Michael Schumacher won",
            "races hosted in Sepang International Circuit"
        ]
    },
    {
        "tables": [
            "laptimes",
            "races",
            "drivers"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`driverid`",
            "laptimes.`milliseconds`",
            "races.`year`",
            "races.`name`",
            "drivers.`forename`",
            "drivers.`surname`"
        ],
        "sql_keywords": [
            "JOIN",
            "MIN",
            "GROUP BY"
        ],
        "conditions": [
            "race",
            "year of race",
            "Michael Schumacher",
            "fastest lap"
        ]
    },
    {
        "tables": [
            "drivers",
            "results",
            "races"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`surname`",
            "results.`driverid`",
            "results.`points`",
            "results.`raceid`",
            "races.`raceid`",
            "races.`year`"
        ],
        "sql_keywords": [
            "=",
            "AVG"
        ],
        "conditions": [
            "Eddie Irvine's average points scored",
            "year 2000"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "drivers"
        ],
        "columns": [
            "races.`year`",
            "races.`raceid`",
            "results.`driverid`",
            "results.`points`",
            "results.`raceid`",
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "="
        ],
        "conditions": [
            "Lewis Hamilton first race",
            "points recorded for his first race event"
        ]
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`year`",
            "races.`name`",
            "races.`date`",
            "circuits.`country`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY"
        ],
        "conditions": []
    },
    {
        "tables": [
            "races",
            "circuits",
            "results"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "races.`circuitid`",
            "circuits.`circuitid`",
            "circuits.`name`",
            "circuits.`location`",
            "results.`laps`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "most laps f1 races had",
            "name the race",
            "year",
            "circuit location"
        ]
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`round`",
            "races.`circuitid`",
            "races.`name`",
            "races.`date`",
            "races.`time`",
            "races.`url`",
            "circuits.`circuitid`",
            "circuits.`circuitref`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`lng`",
            "circuits.`alt`",
            "circuits.`url`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "COUNT",
            "JOIN"
        ],
        "conditions": [
            "European Grand Prix races",
            "hosted in Germany"
        ]
    },
    {
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.`lat`",
            "circuits.`lng`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.`name`",
            "circuits.`lat`"
        ],
        "sql_keywords": [
            "=",
            "MAX"
        ],
        "conditions": [
            "higher latitude",
            "Silverstone Circuit",
            "Hockenheimring",
            "Hungaroring"
        ]
    },
    {
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.`name`",
            "circuits.`circuitref`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.`country`",
            "circuits.`alt`"
        ],
        "sql_keywords": [
            "MAX",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "circuit with the highest altitude"
        ]
    },
    {
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`code`"
        ],
        "sql_keywords": [
            "COUNT",
            "DISTINCT",
            "IS NULL"
        ],
        "conditions": [
            "drivers don't have a code"
        ]
    },
    {
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`driverref`",
            "drivers.`dob`",
            "drivers.`nationality`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "oldest driver"
        ]
    },
    {
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.`surname`",
            "drivers.`nationality`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "Italian drivers"
        ]
    },
    {
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.`url`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "want to know more about Anthony Davidson"
        ]
    },
    {
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.`driverref`",
            "drivers.`forename`",
            "drivers.`surname`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`year`",
            "races.`name`",
            "races.`circuitid`",
            "circuits.`circuitid`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`lng`",
            "circuits.`url`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "2009 Spanish Grand Prix"
        ]
    },
    {
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.`circuitid`",
            "circuits.`name`",
            "races.`year`",
            "races.`circuitid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "Silverstone Circuit was used in a Formula_1 race"
        ]
    },
    {
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.`circuitid`",
            "circuits.`circuitref`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`lng`",
            "circuits.`alt`",
            "circuits.`url`",
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "races.`time`",
            "races.`date`",
            "races.`url`",
            "races.`round`",
            "races.`raceid`"
        ],
        "sql_keywords": [
            "LIKE"
        ],
        "conditions": [
            "Formula_1 races",
            "used the Silverstone Circuit"
        ]
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`year`",
            "races.`name`",
            "races.`time`",
            "races.`date`",
            "races.`url`",
            "races.`round`",
            "races.`raceid`",
            "circuits.`circuitref`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`alt`",
            "circuits.`name`",
            "circuits.`url`",
            "circuits.`lng`",
            "circuits.`circuitid`",
            "circuits.`location`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "2010's Formula_1 race",
            "Abu Dhabi Circuit"
        ]
    },
    {
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.`circuitid`",
            "circuits.`country`",
            "circuits.`name`",
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "races.`date`",
            "races.`time`",
            "races.`url`",
            "races.`round`",
            "races.`raceid`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "COUNT"
        ],
        "conditions": [
            "circuits in Italy"
        ]
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`date`",
            "races.`name`",
            "races.`time`",
            "races.`url`",
            "races.`round`",
            "races.`raceid`",
            "races.`year`",
            "races.`circuitid`",
            "circuits.`circuitid`",
            "circuits.`circuitref`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`lng`",
            "circuits.`alt`",
            "circuits.`url`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "Formula_1 race",
            "Barcelona-Catalunya circuit",
            "exact dates"
        ]
    },
    {
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.`circuitid`",
            "circuits.`circuitref`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`lng`",
            "circuits.`alt`",
            "circuits.`url`",
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "races.`time`",
            "races.`date`",
            "races.`url`",
            "races.`round`",
            "races.`raceid`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "LIKE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "drivers",
            "results",
            "races"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`driverref`",
            "results.`fastestlaptime`",
            "results.`driverid`",
            "races.`raceid`",
            "races.`name`",
            "races.`date`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "fastest lap time",
            "Lewis Hamilton"
        ]
    },
    {
        "tables": [
            "results",
            "drivers"
        ],
        "columns": [
            "results.`fastestlapspeed`",
            "results.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "driver created the fastest lap speed",
            "Formula_1 race",
            "give both his forename and surname"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "drivers"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`driverid`",
            "results.`raceid`",
            "results.`position`",
            "drivers.`driverid`",
            "drivers.`driverref`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "driver ranked the first",
            "Canadian Grand Prix",
            "2007"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "drivers"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "races.`date`",
            "results.`driverid`",
            "results.`raceid`",
            "drivers.`driverid`",
            "drivers.`surname`",
            "drivers.`forename`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "Lewis Hamilton participated"
        ]
    },
    {
        "tables": [
            "drivers",
            "results",
            "races"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "results.`driverid`",
            "results.`rank`",
            "results.`raceid`",
            "races.`raceid`",
            "races.`name`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "Lewis Hamilton rank the highest"
        ]
    },
    {
        "tables": [
            "races",
            "results"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`fastestlapspeed`",
            "results.`raceid`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "fastest lap speed",
            "all drivers",
            "2009 Spanish Grand Prix"
        ]
    },
    {
        "tables": [
            "drivers",
            "races",
            "results"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "races.`raceid`",
            "races.`year`",
            "results.`driverid`",
            "results.`raceid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN"
        ],
        "conditions": [
            "Lewis Hamilton",
            "participate in a Formula_1 race"
        ]
    },
    {
        "tables": [
            "drivers",
            "races",
            "results"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`driverid`",
            "results.`raceid`",
            "results.`positionorder`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "Lewis Hamilton's final rank",
            "2008 Chinese Grand Prix"
        ]
    },
    {
        "tables": [
            "results",
            "races",
            "drivers"
        ],
        "columns": [
            "results.`driverid`",
            "results.`grid`",
            "results.`raceid`",
            "races.`year`",
            "races.`name`",
            "races.`raceid`",
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "driver in the no. 4 grid formation",
            "starting the race",
            "1989's Australian Grand Prix"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "drivers"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`driverid`",
            "results.`raceid`",
            "results.`time`",
            "drivers.`driverid`",
            "drivers.`surname`",
            "drivers.`forename`"
        ],
        "sql_keywords": [
            "COUNT",
            "JOIN",
            "WHERE",
            "="
        ],
        "conditions": [
            "2008 Australian Grand Prix"
        ]
    },
    {
        "tables": [
            "laptimes",
            "races",
            "drivers"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`driverid`",
            "laptimes.`milliseconds`",
            "laptimes.`lap`",
            "laptimes.`time`",
            "laptimes.`position`",
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "races.`time`",
            "races.`round`",
            "drivers.`surname`",
            "drivers.`driverref`",
            "drivers.`forename`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "fastest lap",
            "Lewis Hamilton",
            "2008 Australian Grand Prix"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "drivers"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`driverid`",
            "results.`raceid`",
            "results.`position`",
            "results.`time`",
            "drivers.`driverid`",
            "drivers.`surname`",
            "drivers.`forename`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "driver ranked second",
            "2008's Australian Grand Prix"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "drivers"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`raceid`",
            "results.`driverid`",
            "results.`position`",
            "drivers.`driverid`",
            "drivers.`surname`",
            "drivers.`url`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "champion of 2008's Australian Grand Prix"
        ]
    },
    {
        "tables": [
            "drivers",
            "races",
            "results"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`driverref`",
            "drivers.`nationality`",
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`driverid`",
            "results.`raceid`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "drivers from the UN",
            "participated in the 2008 Australian Grand Prix"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "drivers"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`driverid`",
            "results.`raceid`",
            "results.`time`",
            "drivers.`driverid`",
            "drivers.`surname`",
            "drivers.`forename`",
            "drivers.`nationality`",
            "drivers.`dob`",
            "drivers.`url`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "COUNT"
        ],
        "conditions": [
            "finished the race in the 2008 Chinese Grand Prix",
            "participated in Formula_1 races"
        ]
    },
    {
        "tables": [
            "drivers",
            "results",
            "races"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "results.`driverid`",
            "results.`points`",
            "results.`raceid`",
            "races.`raceid`",
            "races.`year`",
            "races.`round`",
            "races.`name`",
            "races.`date`"
        ],
        "sql_keywords": [
            "SUM",
            "JOIN",
            "WHERE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "drivers",
            "results"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "results.`driverid`",
            "results.`fastestlaptime`",
            "results.`raceid`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "Lewis Hamilton",
            "Formula_1 races",
            "average fastest lap time in seconds"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "circuits"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "results.`raceid`",
            "results.`driverid`",
            "results.`laps`",
            "results.`time`",
            "circuits.`circuitid`",
            "circuits.`name`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "WHERE",
            "COUNT",
            "NOT NULL"
        ],
        "conditions": [
            "drivers completing all the laps",
            "2008 Australian Grand Prix"
        ]
    },
    {
        "tables": [
            "races",
            "results"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`driverid`",
            "results.`position`",
            "results.`time`",
            "results.`milliseconds`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "UNION",
            "DISTINCT"
        ],
        "conditions": [
            "champion",
            "driver who finished the race last",
            "2008 Australian Grand Prix"
        ]
    },
    {
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.`name`",
            "circuits.`circuitref`",
            "circuits.`circuitid`",
            "circuits.`lat`",
            "circuits.`country`",
            "circuits.`url`",
            "circuits.`alt`",
            "circuits.`location`",
            "circuits.`lng`"
        ],
        "sql_keywords": [
            "=",
            "COUNT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.`lat`",
            "circuits.`lng`",
            "circuits.`country`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "location coordinates of the US circuits"
        ]
    },
    {
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.`surname`",
            "drivers.`url`",
            "drivers.`driverid`",
            "drivers.`code`",
            "drivers.`driverref`",
            "drivers.`number`",
            "drivers.`nationality`",
            "drivers.`dob`",
            "drivers.`forename`"
        ],
        "sql_keywords": [
            "COUNT",
            "DISTINCT",
            "=",
            ">"
        ],
        "conditions": [
            "born after 1980"
        ]
    },
    {
        "tables": [
            "constructors",
            "constructorresults"
        ],
        "columns": [
            "constructors.`constructorid`",
            "constructors.`nationality`",
            "constructorresults.`constructorid`",
            "constructorresults.`points`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "WHERE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "constructors",
            "constructorresults"
        ],
        "columns": [
            "constructors.`constructorid`",
            "constructors.`name`",
            "constructors.`nationality`",
            "constructors.`constructorref`",
            "constructors.`url`",
            "constructorresults.`constructorid`",
            "constructorresults.`points`"
        ],
        "sql_keywords": [
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "constructor has the highest point"
        ]
    },
    {
        "tables": [
            "constructorresults",
            "constructors"
        ],
        "columns": [
            "constructorresults.`constructorid`",
            "constructorresults.`points`",
            "constructorresults.`raceid`",
            "constructors.`name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "constructor names with 0 points",
            "at race 291"
        ]
    },
    {
        "tables": [
            "constructors",
            "constructorresults",
            "races"
        ],
        "columns": [
            "constructors.`constructorid`",
            "constructors.`nationality`",
            "constructorresults.`constructorid`",
            "constructorresults.`points`",
            "constructorresults.`raceid`",
            "races.`raceid`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "COUNT",
            "JOIN"
        ],
        "conditions": [
            "Japanese constructors",
            "0 points",
            "2 races"
        ]
    },
    {
        "tables": [
            "constructors",
            "constructorstandings"
        ],
        "columns": [
            "constructors.`constructorid`",
            "constructors.`name`",
            "constructors.`nationality`",
            "constructors.`url`",
            "constructorstandings.`position`",
            "constructorstandings.`constructorid`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "constructors have been ranked 1"
        ]
    },
    {
        "tables": [
            "constructors",
            "results",
            "races",
            "laptimes"
        ],
        "columns": [
            "constructors.`constructorid`",
            "constructors.`name`",
            "constructors.`nationality`",
            "results.`number`",
            "results.`driverid`",
            "results.`laps`",
            "results.`raceid`",
            "results.`time`",
            "results.`constructorid`",
            "races.`year`",
            "races.`time`",
            "races.`raceid`",
            "laptimes.`raceid`",
            "laptimes.`driverid`",
            "laptimes.`lap`",
            "laptimes.`time`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "COUNT",
            "DISTINCT"
        ],
        "conditions": [
            "French constructors",
            "lap number over 50"
        ]
    },
    {
        "tables": [
            "drivers",
            "results",
            "races"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`nationality`",
            "results.`driverid`",
            "results.`raceid`",
            "results.`time`",
            "races.`raceid`",
            "races.`year`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "AND",
            "COUNT"
        ],
        "conditions": [
            "Japanese drivers",
            "race completion percentage",
            "2007 to 2009"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "seasons"
        ],
        "columns": [
            "races.`year`",
            "races.`raceid`",
            "results.`raceid`",
            "results.`time`",
            "seasons.`year`"
        ],
        "sql_keywords": [
            "AVG",
            "GROUP BY",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "year before 1975"
        ]
    },
    {
        "tables": [
            "drivers",
            "driverstandings"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "drivers.`dob`",
            "driverstandings.`driverid`",
            "driverstandings.`position`"
        ],
        "sql_keywords": [
            "=",
            ">"
        ],
        "conditions": [
            "born after 1975",
            "ranked 2"
        ]
    },
    {
        "tables": [
            "drivers",
            "results",
            "status"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`nationality`",
            "results.`driverid`",
            "results.`time`",
            "results.`statusid`",
            "status.`statusid`",
            "status.`status`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "JOIN",
            "COUNT"
        ],
        "conditions": [
            "Italian drivers",
            "haven't finished the race"
        ]
    },
    {
        "tables": [
            "drivers",
            "laptimes"
        ],
        "columns": [
            "drivers.`forename`",
            "drivers.`surname`",
            "laptimes.`milliseconds`",
            "laptimes.`driverid`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN"
        ],
        "conditions": [
            "fastest lap time"
        ]
    },
    {
        "tables": [
            "races",
            "laptimes",
            "results"
        ],
        "columns": [
            "races.`year`",
            "races.`raceid`",
            "laptimes.`raceid`",
            "laptimes.`driverid`",
            "laptimes.`lap`",
            "laptimes.`time`",
            "results.`raceid`",
            "results.`driverid`",
            "results.`position`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "fastest lap number",
            "champion",
            "2009"
        ]
    },
    {
        "tables": [
            "races",
            "results"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`fastestlapspeed`",
            "results.`raceid`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "fastest lap speed",
            "2009 Spanish Grand Prix race"
        ]
    },
    {
        "tables": [
            "races",
            "results"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`raceid`",
            "results.`milliseconds`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "ON"
        ],
        "conditions": [
            "shortest actual finishing time",
            "name",
            "year"
        ]
    },
    {
        "tables": [
            "drivers",
            "results"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`dob`",
            "results.`driverid`",
            "results.`laps`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "WHERE",
            "AND",
            "COUNT",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "born before 1985",
            "lap numbers over 50"
        ]
    },
    {
        "tables": [
            "drivers",
            "laptimes"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`nationality`",
            "laptimes.`driverid`",
            "laptimes.`milliseconds`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "French drivers",
            "laptime less than 02:00.00"
        ]
    },
    {
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.`code`",
            "drivers.`nationality`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "nationality in America"
        ]
    },
    {
        "tables": [
            "races",
            "seasons"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "seasons.`year`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "races held in 2009"
        ]
    },
    {
        "tables": [
            "results",
            "drivers",
            "races"
        ],
        "columns": [
            "results.`raceid`",
            "results.`driverid`",
            "drivers.`driverid`",
            "races.`raceid`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "race ID number 18"
        ]
    },
    {
        "tables": [
            "drivers",
            "results"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`dob`",
            "drivers.`code`",
            "drivers.`nationality`"
        ],
        "sql_keywords": [
            "ORDER BY",
            "LIMIT",
            "JOIN",
            "COUNT",
            "GROUP BY"
        ],
        "conditions": [
            "top 3 youngest drivers",
            "Netherlandic drivers among them"
        ]
    },
    {
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.`driverref`",
            "drivers.`surname`",
            "drivers.`forename`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`driverref`",
            "drivers.`number`",
            "drivers.`dob`",
            "drivers.`surname`",
            "drivers.`nationality`",
            "drivers.`url`",
            "drivers.`forename`",
            "drivers.`code`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "DISTINCT"
        ],
        "conditions": [
            "British drivers",
            "born in 1980"
        ]
    },
    {
        "tables": [
            "drivers",
            "laptimes"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`surname`",
            "drivers.`dob`",
            "drivers.`nationality`",
            "laptimes.`driverid`",
            "laptimes.`time`"
        ],
        "sql_keywords": [
            "=",
            "AND",
            "MIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "German drivers",
            "born from 1980-1990",
            "have the earliest lap time"
        ]
    },
    {
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.`driverref`",
            "drivers.`dob`",
            "drivers.`nationality`"
        ],
        "sql_keywords": [
            "MIN",
            "="
        ],
        "conditions": [
            "oldest German driver"
        ]
    },
    {
        "tables": [
            "drivers",
            "results"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`code`",
            "drivers.`dob`",
            "results.`driverid`",
            "results.`fastestlaptime`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "born in 1971",
            "has the fastest lap time on the race"
        ]
    },
    {
        "tables": [
            "drivers",
            "laptimes"
        ],
        "columns": [
            "drivers.`surname`",
            "drivers.`driverid`",
            "drivers.`driverref`",
            "drivers.`nationality`",
            "drivers.`dob`",
            "drivers.`forename`",
            "laptimes.`driverid`",
            "laptimes.`lap`",
            "laptimes.`milliseconds`",
            "laptimes.`time`",
            "laptimes.`raceid`",
            "laptimes.`position`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "born before 1982",
            "latest lap time"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "seasons"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "results.`fastestlaptime`",
            "results.`raceid`",
            "seasons.`year`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "racing year",
            "fastest lap time"
        ]
    },
    {
        "tables": [
            "laptimes",
            "races",
            "seasons"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`time`",
            "races.`raceid`",
            "races.`year`",
            "seasons.`year`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN"
        ],
        "conditions": [
            "lowest speed of lap time"
        ]
    },
    {
        "tables": [
            "drivers",
            "laptimes"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`driverref`",
            "drivers.`forename`",
            "drivers.`surname`",
            "laptimes.`driverid`",
            "laptimes.`lap`",
            "laptimes.`time`",
            "laptimes.`raceid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "top five drivers",
            "descending order",
            "fastest time",
            "first lap of the race"
        ]
    },
    {
        "tables": [
            "results",
            "status",
            "races"
        ],
        "columns": [
            "results.`raceid`",
            "results.`time`",
            "results.`statusid`",
            "status.`statusid`",
            "status.`status`",
            "races.`raceid`",
            "races.`time`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "race no. 50 to 100",
            "finishers",
            "disqualified"
        ]
    },
    {
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.`circuitid`",
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`lng`",
            "races.`circuitid`",
            "races.`name`",
            "races.`date`",
            "races.`raceid`"
        ],
        "sql_keywords": [
            "=",
            "DISTINCT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "results",
            "races"
        ],
        "columns": [
            "results.`raceid`",
            "results.`time`",
            "races.`raceid`",
            "races.`name`"
        ],
        "sql_keywords": [
            "COUNT",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "race number",
            "most finishers"
        ]
    },
    {
        "tables": [
            "qualifying",
            "drivers"
        ],
        "columns": [
            "qualifying.`raceid`",
            "qualifying.`driverid`",
            "qualifying.`q2`",
            "drivers.`driverref`",
            "drivers.`nationality`",
            "drivers.`dob`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "WHERE",
            "AND",
            "SELECT",
            "DISTINCT"
        ],
        "conditions": [
            "passed the second qualifying lap",
            "during race no. 23",
            "indicate their nationality",
            "indicate their birthday"
        ]
    },
    {
        "tables": [
            "drivers",
            "qualifying",
            "races"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`driverref`",
            "drivers.`dob`",
            "qualifying.`raceid`",
            "qualifying.`driverid`",
            "races.`year`",
            "races.`date`",
            "races.`time`",
            "races.`raceid`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "youngest driver",
            "first qualifying race",
            "year",
            "name",
            "date",
            "time"
        ]
    },
    {
        "tables": [
            "drivers",
            "results",
            "status"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`driverref`",
            "drivers.`nationality`",
            "results.`driverid`",
            "results.`statusid`",
            "status.`statusid`",
            "status.`status`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "American drivers",
            "puncture status"
        ]
    },
    {
        "tables": [
            "constructors",
            "constructorresults"
        ],
        "columns": [
            "constructors.`constructorid`",
            "constructors.`name`",
            "constructors.`nationality`",
            "constructors.`url`",
            "constructorresults.`constructorid`",
            "constructorresults.`points`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "Italian constructor",
            "highest point to date"
        ]
    },
    {
        "tables": [
            "constructors",
            "constructorstandings"
        ],
        "columns": [
            "constructors.`url`",
            "constructors.`constructorid`",
            "constructorstandings.`wins`",
            "constructorstandings.`constructorid`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "constructor who tallied the most total wins"
        ]
    },
    {
        "tables": [
            "laptimes",
            "drivers",
            "races"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`driverid`",
            "laptimes.`lap`",
            "laptimes.`time`",
            "drivers.`surname`",
            "drivers.`driverid`",
            "drivers.`driverref`",
            "drivers.`forename`",
            "races.`name`",
            "races.`time`",
            "races.`raceid`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "participated in the French Grand Prix",
            "slowest time in the 3rd lap"
        ]
    },
    {
        "tables": [
            "laptimes",
            "races"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`milliseconds`",
            "laptimes.`lap`",
            "races.`name`",
            "races.`year`",
            "races.`round`",
            "races.`date`",
            "races.`time`",
            "races.`url`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN"
        ],
        "conditions": [
            "fastest 1st lap time",
            "time in milliseconds"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "drivers"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`driverid`",
            "results.`fastestlaptime`",
            "results.`rank`",
            "results.`raceid`",
            "drivers.`driverid`"
        ],
        "sql_keywords": [
            "AVG",
            "=",
            "INTERSECT"
        ],
        "conditions": [
            "top 10 drivers",
            "2006 United States Grand Prix"
        ]
    },
    {
        "tables": [
            "drivers",
            "pitstops"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "drivers.`nationality`",
            "drivers.`dob`",
            "pitstops.`duration`",
            "pitstops.`driverid`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "ORDER BY",
            "LIMIT",
            "AVG",
            "MIN",
            "BETWEEN"
        ],
        "conditions": [
            "German drivers",
            "shortest average pit stop duration",
            "born between 1980-1985"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "drivers"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`driverid`",
            "results.`position`",
            "results.`time`",
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "champion of the Canadian Grand Prix in 2008",
            "finish time"
        ]
    },
    {
        "tables": [
            "races",
            "results",
            "constructors"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "results.`raceid`",
            "results.`position`",
            "results.`constructorid`",
            "constructors.`constructorid`",
            "constructors.`constructorref`",
            "constructors.`url`"
        ],
        "sql_keywords": [
            "=",
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "2009 Singapore Grand Prix",
            "constructor reference name",
            "website"
        ]
    },
    {
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.`forename`",
            "drivers.`surname`",
            "drivers.`dob`"
        ],
        "sql_keywords": [
            "=",
            "BETWEEN"
        ],
        "conditions": [
            "Austrian drivers",
            "born between 1981 and 1991"
        ]
    },
    {
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.`forename`",
            "drivers.`surname`",
            "drivers.`url`",
            "drivers.`dob`"
        ],
        "sql_keywords": [
            "SELECT",
            "FROM",
            "WHERE",
            "ORDER BY",
            "DESC",
            "=",
            "BETWEEN"
        ],
        "conditions": [
            "German drivers",
            "born between 1971 and 1985",
            "descending order of date of birth"
        ]
    },
    {
        "tables": [
            "circuits"
        ],
        "columns": [
            "circuits.`name`",
            "circuits.`location`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`lng`"
        ],
        "sql_keywords": [
            "=",
            "SELECT",
            "FROM",
            "WHERE"
        ],
        "conditions": [
            "location of the Hungaroring circuit",
            "country of the Hungaroring circuit",
            "coordinates of the Hungaroring circuit"
        ]
    },
    {
        "tables": [
            "races",
            "constructorresults",
            "constructors"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "constructorresults.`constructorid`",
            "constructorresults.`points`",
            "constructors.`name`",
            "constructors.`nationality`"
        ],
        "sql_keywords": [
            "=",
            "AND",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "constructor scored most points",
            "Monaco Grand Prix",
            "between 1980 and 2010"
        ]
    },
    {
        "tables": [
            "drivers",
            "results",
            "races"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "results.`points`",
            "results.`raceid`",
            "races.`raceid`",
            "races.`name`",
            "races.`year`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "Lewis Hamilton",
            "Turkish Grand Prix"
        ]
    },
    {
        "tables": [
            "races",
            "seasons"
        ],
        "columns": [
            "races.`raceid`",
            "races.`year`",
            "races.`round`",
            "races.`circuitid`",
            "races.`name`",
            "races.`date`",
            "races.`time`",
            "races.`url`",
            "seasons.`year`",
            "seasons.`url`"
        ],
        "sql_keywords": [
            "GROUP BY",
            "AVG"
        ],
        "conditions": [
            "annual average number of races",
            "first 10 years of the 21st century"
        ]
    },
    {
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.`nationality`"
        ],
        "sql_keywords": [
            "MAX",
            "GROUP BY"
        ],
        "conditions": [
            "vast majority of the drivers"
        ]
    },
    {
        "tables": [
            "driverstandings",
            "drivers"
        ],
        "columns": [
            "driverstandings.`raceid`",
            "driverstandings.`driverid`",
            "driverstandings.`wins`",
            "driverstandings.`points`",
            "drivers.`surname`",
            "drivers.`driverid`",
            "drivers.`driverref`",
            "drivers.`forename`"
        ],
        "sql_keywords": [
            "=",
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "driver ranked 91st"
        ]
    },
    {
        "tables": [
            "races",
            "results"
        ],
        "columns": [
            "races.`name`",
            "results.`fastestlaptime`",
            "results.`raceid`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN"
        ],
        "conditions": [
            "fastest lap time",
            "fastest lap speed by a racer"
        ]
    },
    {
        "tables": [
            "races",
            "circuits"
        ],
        "columns": [
            "races.`circuitid`",
            "races.`date`",
            "circuits.`location`",
            "circuits.`country`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "qualifying",
            "races",
            "circuits",
            "drivers"
        ],
        "columns": [
            "qualifying.`driverid`",
            "qualifying.`raceid`",
            "qualifying.`q3`",
            "races.`raceid`",
            "races.`year`",
            "races.`circuitid`",
            "circuits.`circuitid`",
            "circuits.`name`",
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "JOIN",
            "MIN"
        ],
        "conditions": [
            "ranked 1st",
            "3rd qualifying race",
            "Marina Bay Street Circuit",
            "2008"
        ]
    },
    {
        "tables": [
            "drivers",
            "races",
            "results"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "drivers.`dob`",
            "drivers.`nationality`",
            "races.`raceid`",
            "races.`name`",
            "results.`driverid`",
            "results.`raceid`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "youngest racer",
            "nationality",
            "name of the race to which he/she first joined"
        ]
    },
    {
        "tables": [
            "results",
            "status",
            "drivers",
            "races"
        ],
        "columns": [
            "results.`driverid`",
            "results.`raceid`",
            "results.`statusid`",
            "status.`statusid`",
            "status.`status`",
            "drivers.`driverid`",
            "drivers.`driverref`",
            "drivers.`number`",
            "races.`raceid`",
            "races.`name`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "COUNT",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "highest number accidents",
            "Canadian Grand Prix"
        ]
    },
    {
        "tables": [
            "drivers",
            "driverstandings"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`dob`",
            "drivers.`forename`",
            "drivers.`surname`",
            "driverstandings.`wins`",
            "driverstandings.`driverid`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "ON",
            "SELECT",
            "FROM",
            "WHERE"
        ],
        "conditions": [
            "oldest racer"
        ]
    },
    {
        "tables": [
            "pitstops",
            "drivers"
        ],
        "columns": [
            "pitstops.`duration`",
            "pitstops.`time`",
            "pitstops.`raceid`",
            "pitstops.`stop`",
            "pitstops.`lap`",
            "pitstops.`driverid`",
            "pitstops.`milliseconds`",
            "drivers.`surname`",
            "drivers.`url`",
            "drivers.`driverid`",
            "drivers.`code`",
            "drivers.`driverref`",
            "drivers.`number`",
            "drivers.`nationality`",
            "drivers.`dob`",
            "drivers.`forename`"
        ],
        "sql_keywords": [
            "MAX"
        ],
        "conditions": [
            "longest time",
            "driver",
            "spent at a pit stop"
        ]
    },
    {
        "tables": [
            "laptimes",
            "races",
            "circuits"
        ],
        "columns": [
            "laptimes.`lap`",
            "laptimes.`milliseconds`",
            "laptimes.`time`",
            "laptimes.`raceid`",
            "laptimes.`position`",
            "laptimes.`driverid`",
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "races.`time`",
            "races.`date`",
            "races.`url`",
            "races.`round`",
            "races.`raceid`",
            "circuits.`circuitref`",
            "circuits.`country`",
            "circuits.`lat`",
            "circuits.`alt`",
            "circuits.`name`",
            "circuits.`url`",
            "circuits.`lng`",
            "circuits.`circuitid`",
            "circuits.`location`"
        ],
        "sql_keywords": [
            "MIN"
        ],
        "conditions": [
            "lap records set on various circuits",
            "fastest one"
        ]
    },
    {
        "tables": [
            "pitstops",
            "drivers"
        ],
        "columns": [
            "pitstops.`duration`",
            "pitstops.`driverid`",
            "drivers.`driverid`",
            "drivers.`surname`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "longest time",
            "Lewis Hamilton",
            "pit stop"
        ]
    },
    {
        "tables": [
            "pitstops",
            "drivers",
            "races"
        ],
        "columns": [
            "pitstops.`driverid`",
            "pitstops.`raceid`",
            "pitstops.`lap`",
            "drivers.`driverid`",
            "drivers.`driverref`",
            "races.`raceid`",
            "races.`year`",
            "races.`name`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "WHERE"
        ],
        "conditions": [
            "Lewis Hamilton",
            "pit stop",
            "2011 Australian Grand Prix"
        ]
    },
    {
        "tables": [
            "pitstops",
            "races",
            "drivers"
        ],
        "columns": [
            "pitstops.`duration`",
            "pitstops.`driverid`",
            "pitstops.`raceid`",
            "races.`raceid`",
            "races.`year`",
            "races.`name`",
            "drivers.`driverid`",
            "drivers.`surname`",
            "drivers.`forename`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "time each driver spent at the pit stop",
            "2011 Australian Grand Prix"
        ]
    },
    {
        "tables": [
            "laptimes",
            "drivers",
            "races"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`driverid`",
            "laptimes.`lap`",
            "laptimes.`milliseconds`",
            "laptimes.`time`",
            "laptimes.`position`",
            "drivers.`surname`",
            "drivers.`driverid`",
            "drivers.`driverref`",
            "drivers.`forename`",
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "races.`time`",
            "races.`date`",
            "races.`raceid`",
            "races.`url`",
            "races.`round`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "="
        ],
        "conditions": [
            "lap record set by Lewis Hamilton",
            "in a Formula_1 race"
        ]
    },
    {
        "tables": [
            "drivers",
            "laptimes"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`forename`",
            "drivers.`surname`",
            "laptimes.`driverid`",
            "laptimes.`time`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "top 20 driver",
            "shortest lap time ever record",
            "Formula_1 race",
            "full names"
        ]
    },
    {
        "tables": [
            "drivers",
            "laptimes",
            "races",
            "circuits"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`surname`",
            "laptimes.`driverid`",
            "laptimes.`time`",
            "laptimes.`position`",
            "laptimes.`raceid`",
            "races.`circuitid`",
            "races.`raceid`",
            "circuits.`circuitid`",
            "circuits.`position`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "Lewis Hamilton's fastest lap in a Formula_1 race"
        ]
    },
    {
        "tables": [
            "laptimes",
            "races",
            "circuits"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`lap`",
            "laptimes.`milliseconds`",
            "laptimes.`time`",
            "laptimes.`position`",
            "laptimes.`driverid`",
            "races.`circuitid`",
            "races.`name`",
            "races.`time`",
            "races.`raceid`",
            "circuits.`name`",
            "circuits.`circuitid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "MIN"
        ],
        "conditions": []
    },
    {
        "tables": [
            "laptimes",
            "races",
            "circuits"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`lap`",
            "laptimes.`milliseconds`",
            "laptimes.`time`",
            "laptimes.`position`",
            "laptimes.`driverid`",
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "races.`time`",
            "races.`date`",
            "races.`raceid`",
            "races.`round`",
            "circuits.`country`",
            "circuits.`name`",
            "circuits.`circuitid`",
            "circuits.`location`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "ON",
            "WHERE",
            "LIKE"
        ],
        "conditions": [
            "circuits in Italy"
        ]
    },
    {
        "tables": [
            "races",
            "laptimes",
            "circuits"
        ],
        "columns": [
            "races.`raceid`",
            "races.`name`",
            "races.`time`",
            "laptimes.`lap`",
            "laptimes.`time`",
            "circuits.`name`",
            "circuits.`circuitid`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "Formula_1 race",
            "lap record",
            "Austrian Grand Prix Circuit"
        ]
    },
    {
        "tables": [
            "laptimes",
            "pitstops",
            "races",
            "circuits",
            "drivers"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`driverid`",
            "laptimes.`lap`",
            "laptimes.`time`",
            "pitstops.`duration`",
            "pitstops.`driverid`",
            "pitstops.`time`",
            "pitstops.`raceid`",
            "pitstops.`stop`",
            "pitstops.`lap`",
            "races.`circuitid`",
            "races.`name`",
            "races.`time`",
            "races.`raceid`",
            "circuits.`name`",
            "circuits.`circuitid`",
            "drivers.`driverid`",
            "drivers.`driverref`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "LIMIT",
            "="
        ],
        "conditions": [
            "driver set the lap record for the Austrian Grand Prix Circuit",
            "how long did he spend at the pit stop at that same race"
        ]
    },
    {
        "tables": [
            "laptimes",
            "races",
            "circuits"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`time`",
            "races.`circuitid`",
            "circuits.`lat`",
            "circuits.`lng`",
            "circuits.`name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "lap record is 1:29.488"
        ]
    },
    {
        "tables": [
            "drivers",
            "pitstops"
        ],
        "columns": [
            "drivers.`driverid`",
            "drivers.`surname`",
            "pitstops.`driverid`",
            "pitstops.`milliseconds`",
            "pitstops.`time`",
            "pitstops.`raceid`",
            "pitstops.`stop`",
            "pitstops.`duration`",
            "pitstops.`lap`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "Lewis Hamilton",
            "Formula_1 races",
            "average time in milliseconds",
            "pit stop"
        ]
    },
    {
        "tables": [
            "laptimes",
            "races",
            "circuits"
        ],
        "columns": [
            "laptimes.`raceid`",
            "laptimes.`milliseconds`",
            "laptimes.`lap`",
            "laptimes.`time`",
            "laptimes.`position`",
            "laptimes.`driverid`",
            "races.`year`",
            "races.`circuitid`",
            "races.`name`",
            "races.`time`",
            "races.`date`",
            "races.`raceid`",
            "races.`url`",
            "races.`round`",
            "circuits.`country`",
            "circuits.`name`",
            "circuits.`circuitid`",
            "circuits.`location`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AVG"
        ],
        "conditions": [
            "lap records set on the various circuits in Italy"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`overall_rating`",
            "player.`player_api_id`",
            "player.`player_name`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "highest overall rating",
            "player's api id"
        ]
    },
    {
        "tables": [
            "player"
        ],
        "columns": [
            "player.`player_name`",
            "player.`height`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "height of the tallest player",
            "indicate his name"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`player_fifa_api_id`",
            "player_attributes.`potential`",
            "player_attributes.`preferred_foot`",
            "player.`player_api_id`",
            "player.`player_fifa_api_id`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "ON",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "player with the lowest potential"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`id`",
            "player_attributes.`defensive_work_rate`",
            "player_attributes.`date`",
            "player_attributes.`overall_rating`",
            "player_attributes.`player_fifa_api_id`",
            "player_attributes.`player_api_id`",
            "player.`weight`",
            "player.`player_api_id`",
            "player.`id`",
            "player.`birthday`",
            "player.`height`",
            "player.`player_fifa_api_id`",
            "player.`player_name`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "=",
            "AND"
        ],
        "conditions": [
            "overall rating between 60 to 65",
            "players in attack moves instead of defending"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`crossing`",
            "player_attributes.`player_api_id`",
            "player.`id`",
            "player.`player_api_id`",
            "player.`player_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "top 5 players",
            "perform better in crossing actions",
            "indicate their player id"
        ]
    },
    {
        "tables": [
            "match",
            "league"
        ],
        "columns": [
            "match.`home_team_goal`",
            "match.`away_team_goal`",
            "match.`league_id`",
            "match.`season`",
            "league.`name`",
            "league.`id`"
        ],
        "sql_keywords": [
            "SUM",
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "most goals",
            "2016 season"
        ]
    },
    {
        "tables": [
            "match",
            "team"
        ],
        "columns": [
            "match.`home_team_api_id`",
            "match.`season`",
            "match.`home_team_goal`",
            "match.`away_team_goal`",
            "team.`team_long_name`",
            "team.`team_api_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "=",
            "<"
        ],
        "conditions": [
            "home team",
            "lost the fewest matches",
            "2016 season"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`penalties`",
            "player.`player_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "top 10 players",
            "highest number of penalties"
        ]
    },
    {
        "tables": [
            "match",
            "league",
            "team"
        ],
        "columns": [
            "match.`away_team_api_id`",
            "match.`season`",
            "match.`home_team_goal`",
            "match.`away_team_goal`",
            "league.`name`",
            "league.`id`",
            "team.`team_long_name`",
            "team.`team_api_id`"
        ],
        "sql_keywords": [
            "MAX",
            "COUNT",
            "JOIN",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "away team",
            "won the most",
            "2010 season",
            "Scotland Premier League"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_long_name`",
            "team.`id`",
            "team.`team_api_id`",
            "team_attributes.`id`",
            "team_attributes.`team_api_id`",
            "team_attributes.`buildupplayspeed`"
        ],
        "sql_keywords": [
            "MAX",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "top 4 teams",
            "highest build Up Play Speed"
        ]
    },
    {
        "tables": [
            "match",
            "league"
        ],
        "columns": [
            "match.`home_team_goal`",
            "match.`away_team_goal`",
            "match.`season`",
            "match.`league_id`",
            "league.`name`",
            "league.`id`"
        ],
        "sql_keywords": [
            "MAX",
            "SUM",
            "JOIN",
            "="
        ],
        "conditions": [
            "most matches end as draw",
            "2016 season"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`birthday`",
            "player.`player_api_id`",
            "player.`id`",
            "player_attributes.`date`",
            "player_attributes.`sprint_speed`",
            "player_attributes.`id`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "SUBTRACT",
            "YEAR"
        ],
        "conditions": [
            "sprint speed of no less than 97",
            "between 2013 to 2015"
        ]
    },
    {
        "tables": [
            "match",
            "league"
        ],
        "columns": [
            "match.`league_id`",
            "league.`name`",
            "league.`id`"
        ],
        "sql_keywords": [
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "name of the league with the highest matches of all time",
            "how many matches were played in the said league"
        ]
    },
    {
        "tables": [
            "player"
        ],
        "columns": [
            "player.`birthday`",
            "player.`height`"
        ],
        "sql_keywords": [
            "AVG",
            "BETWEEN"
        ],
        "conditions": [
            "born between 1990 and 1995"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`overall_rating`",
            "player_attributes.`date`",
            "player.`player_api_id`",
            "player.`player_name`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "WHERE",
            "SUBSTR"
        ],
        "conditions": [
            "highest above average overall ratings",
            "in 2010"
        ]
    },
    {
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team_attributes.`team_fifa_api_id`",
            "team_attributes.`buildupplayspeed`",
            "team.`team_fifa_api_id`"
        ],
        "sql_keywords": [
            "=",
            ">",
            "<"
        ],
        "conditions": [
            "more than 50 build-up play speed",
            "less than 60 build-up play speed"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_long_name`",
            "team_attributes.`buildupplaypassing`",
            "team_attributes.`date`",
            "team_attributes.`team_api_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING",
            "AVG"
        ],
        "conditions": [
            "long name of teams",
            "above-average build-up play passing",
            "in 2012"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`birthday`",
            "player.`player_fifa_api_id`",
            "player.`id`",
            "player_attributes.`player_fifa_api_id`",
            "player_attributes.`id`",
            "player_attributes.`preferred_foot`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "BETWEEN",
            "COUNT",
            "SUM",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "prefer left foot",
            "born between 1987 and 1992"
        ]
    },
    {
        "tables": [
            "match",
            "league"
        ],
        "columns": [
            "match.`home_team_goal`",
            "match.`away_team_goal`",
            "match.`league_id`",
            "league.`id`",
            "league.`name`"
        ],
        "sql_keywords": [
            "SUM",
            "ORDER BY",
            "ASC"
        ],
        "conditions": [
            "top 5 leagues",
            "ascending order",
            "number of goals",
            "all seasons combined"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_name`",
            "player.`player_fifa_api_id`",
            "player_attributes.`player_fifa_api_id`",
            "player_attributes.`long_shots`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "long-shot done by Ahmed Samir Farag"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_name`",
            "player.`height`",
            "player_attributes.`heading_accuracy`",
            "player_attributes.`player_fifa_api_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "heights are above 180",
            "descending order of average heading accuracy"
        ]
    },
    {
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team_attributes.`buildupplaydribblingclass`",
            "team_attributes.`date`",
            "team_attributes.`team_api_id`",
            "team_attributes.`chancecreationpassing`",
            "team.`team_long_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING",
            "ORDER BY"
        ],
        "conditions": [
            "normal build-up play dribbling class in 2014",
            "less than average chance creation passing"
        ]
    },
    {
        "tables": [
            "match",
            "league"
        ],
        "columns": [
            "match.`id`",
            "match.`league_id`",
            "match.`season`",
            "match.`home_team_goal`",
            "match.`away_team_goal`",
            "league.`id`",
            "league.`name`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "average goals by the home team is higher than the away team",
            "2009/2010 season"
        ]
    },
    {
        "tables": [
            "team"
        ],
        "columns": [
            "team.`team_short_name`",
            "team.`team_long_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "player"
        ],
        "columns": [
            "player.`birthday`",
            "player.`player_name`"
        ],
        "sql_keywords": [
            "EXTRACT",
            "AND"
        ],
        "conditions": [
            "birthyear of 1970",
            "birthmonth of October"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player_attributes.`player_api_id`",
            "player_attributes.`attacking_work_rate`"
        ],
        "sql_keywords": [
            "LIKE",
            "JOIN"
        ],
        "conditions": [
            "attacking work rate of the football player Franco Zennaro"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_long_name`",
            "team.`team_api_id`",
            "team_attributes.`buildupplaypositioningclass`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "ADO Den Haag team",
            "freedom of movement",
            "1st two thirds of the pitch"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player_attributes.`heading_accuracy`",
            "player_attributes.`date`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "football player Francois Affolter",
            "header's finishing rate",
            "18/09/2014"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`overall_rating`",
            "player_attributes.`date`",
            "player.`player_name`",
            "player.`player_api_id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "year 2011"
        ]
    },
    {
        "tables": [
            "league",
            "match",
            "country"
        ],
        "columns": [
            "league.`id`",
            "league.`name`",
            "league.`country_id`",
            "match.`id`",
            "match.`season`",
            "match.`league_id`",
            "country.`id`",
            "country.`name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "2015/2016 season",
            "Scotland Premier League"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`birthday`",
            "player.`player_api_id`",
            "player.`player_name`",
            "player.`id`",
            "player_attributes.`player_api_id`",
            "player_attributes.`id`",
            "player_attributes.`preferred_foot`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "youngest football player",
            "preferred foot when attacking"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`potential`",
            "player.`player_name`",
            "player.`player_api_id`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "ON"
        ],
        "conditions": [
            "highest potential score"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`weight`",
            "player.`player_api_id`",
            "player_attributes.`preferred_foot`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "weight under 130",
            "preferred foot in attacking is left"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_short_name`",
            "team_attributes.`chancecreationpassingclass`",
            "team_attributes.`team_api_id`"
        ],
        "sql_keywords": [
            "LIKE",
            "="
        ],
        "conditions": [
            "chance creation passing class of Risky"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player_attributes.`defensive_work_rate`",
            "player_attributes.`date`"
        ],
        "sql_keywords": [
            "LIKE",
            "JOIN"
        ],
        "conditions": []
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`birthday`",
            "player.`player_api_id`",
            "player_attributes.`player_api_id`",
            "player_attributes.`overall_rating`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "GROUP BY"
        ],
        "conditions": [
            "football player",
            "highest overall rating"
        ]
    },
    {
        "tables": [
            "league",
            "country"
        ],
        "columns": [
            "league.`name`",
            "country.`name`",
            "league.`country_id`",
            "country.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "country of Netherlands"
        ]
    },
    {
        "tables": [
            "match",
            "country"
        ],
        "columns": [
            "match.`home_team_goal`",
            "match.`season`",
            "match.`country_id`",
            "country.`name`",
            "country.`id`"
        ],
        "sql_keywords": [
            "AVG",
            "SUM",
            "COUNT",
            "DISTINCT",
            "="
        ],
        "conditions": [
            "home team goal",
            "2010/2011 season",
            "country of Poland"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`height`",
            "player_attributes.`finishing`"
        ],
        "sql_keywords": [
            "MAX",
            "AVG",
            "JOIN",
            "ON"
        ],
        "conditions": [
            "highest football player",
            "shortest football player"
        ]
    },
    {
        "tables": [
            "player"
        ],
        "columns": [
            "player.`player_name`",
            "player.`height`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "height higher than 180"
        ]
    },
    {
        "tables": [
            "player"
        ],
        "columns": [
            "player.`birthday`",
            "player.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "born after 1990"
        ]
    },
    {
        "tables": [
            "player"
        ],
        "columns": [
            "player.`weight`",
            "player.`player_name`"
        ],
        "sql_keywords": [
            "LIKE",
            "=",
            ">"
        ],
        "conditions": [
            "first names are Adam",
            "weigh more than 170"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`id`",
            "player_attributes.`player_api_id`",
            "player_attributes.`date`",
            "player_attributes.`overall_rating`",
            "player.`id`",
            "player.`player_api_id`",
            "player.`player_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "BETWEEN"
        ],
        "conditions": [
            "overall rating of over 80",
            "from 2008 to 2010"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player_attributes.`player_api_id`",
            "player_attributes.`potential`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "Aaron Doran's potential score"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player.`birthday`",
            "player.`height`",
            "player.`weight`",
            "player_attributes.`preferred_foot`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "preferred foot is left"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_long_name`",
            "team.`id`",
            "team.`team_api_id`",
            "team_attributes.`buildupplayspeedclass`",
            "team_attributes.`id`",
            "team_attributes.`team_api_id`",
            "team_attributes.`buildupplayspeed`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "speed class is fast"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_short_name`",
            "team.`team_api_id`",
            "team_attributes.`buildupplaypassingclass`",
            "team_attributes.`team_api_id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "passing class of CLB team"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_short_name`",
            "team_attributes.`buildupplaypassing`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "="
        ],
        "conditions": [
            "build up play passing more than 70"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`overall_rating`",
            "player_attributes.`id`",
            "player_attributes.`date`",
            "player.`player_api_id`",
            "player.`height`",
            "player.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "AVG"
        ],
        "conditions": [
            "from 2010 to 2015",
            "players higher than 170"
        ]
    },
    {
        "tables": [
            "player"
        ],
        "columns": [
            "player.`height`",
            "player.`player_name`"
        ],
        "sql_keywords": [
            "MIN"
        ],
        "conditions": [
            "football player",
            "shortest height"
        ]
    },
    {
        "tables": [
            "league",
            "country"
        ],
        "columns": [
            "league.`name`",
            "league.`country_id`",
            "country.`name`",
            "country.`id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": []
    },
    {
        "tables": [
            "team_attributes",
            "team"
        ],
        "columns": [
            "team_attributes.`buildupplayspeed`",
            "team_attributes.`buildupplaydribbling`",
            "team_attributes.`buildupplaypassing`",
            "team.`team_short_name`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "build up play speed of 31",
            "build up plan dribbling of 53",
            "build up play passing of 32"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`overall_rating`",
            "player.`player_name`",
            "player.`player_api_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "AVG",
            "="
        ],
        "conditions": [
            "football player Aaron Doran"
        ]
    },
    {
        "tables": [
            "match",
            "league"
        ],
        "columns": [
            "match.`id`",
            "match.`date`",
            "match.`league_id`",
            "league.`id`",
            "league.`name`"
        ],
        "sql_keywords": [
            "=",
            "BETWEEN"
        ],
        "conditions": [
            "league Germany 1. Bundesliga",
            "from August to October 2008"
        ]
    },
    {
        "tables": [
            "match",
            "team"
        ],
        "columns": [
            "match.`id`",
            "match.`home_team_api_id`",
            "match.`home_team_goal`",
            "team.`team_short_name`",
            "team.`id`",
            "team.`team_api_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "home team goal of 10"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`id`",
            "player_attributes.`balance`",
            "player_attributes.`potential`",
            "player_attributes.`player_api_id`",
            "player.`player_api_id`",
            "player.`player_name`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "highest balance score",
            "potential score of 61"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`ball_control`",
            "player_attributes.`id`",
            "player.`player_name`",
            "player.`player_api_id`"
        ],
        "sql_keywords": [
            "AVG",
            "CASE",
            "WHEN",
            "THEN",
            "ELSE",
            "END",
            "SUM",
            "COUNT",
            "SUBTRACT"
        ],
        "conditions": [
            "average ball control score",
            "Abdou Diallo",
            "Aaron Appindangoye"
        ]
    },
    {
        "tables": [
            "team"
        ],
        "columns": [
            "team.`team_long_name`",
            "team.`team_short_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "player"
        ],
        "columns": [
            "player.`player_name`",
            "player.`birthday`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "player is older"
        ]
    },
    {
        "tables": [
            "player"
        ],
        "columns": [
            "player.`id`",
            "player.`player_name`",
            "player.`height`"
        ],
        "sql_keywords": [
            "MAX"
        ],
        "conditions": [
            "tallest"
        ]
    },
    {
        "tables": [
            "player_attributes"
        ],
        "columns": [
            "player_attributes.`id`",
            "player_attributes.`preferred_foot`",
            "player_attributes.`attacking_work_rate`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "preferred foot was the left foot",
            "remained in his position when the team attacked"
        ]
    },
    {
        "tables": [
            "league",
            "country"
        ],
        "columns": [
            "league.`name`",
            "league.`country_id`",
            "country.`name`",
            "country.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "league",
            "country"
        ],
        "columns": [
            "league.`id`",
            "league.`country_id`",
            "league.`name`",
            "country.`id`",
            "country.`name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`overall_rating`",
            "player.`player_name`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "strongest overall strength"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`id`",
            "player.`player_api_id`",
            "player.`birthday`",
            "player_attributes.`player_api_id`",
            "player_attributes.`defensive_work_rate`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "=",
            "AND"
        ],
        "conditions": [
            "players born before the year 1986",
            "remain in his position and defense while the team attacked"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_name`",
            "player.`player_api_id`",
            "player_attributes.`crossing`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "players perform best in crossing actions",
            "players: Alexis, Ariel Borysiuk, Arouna Kone"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player_attributes.`player_api_id`",
            "player_attributes.`heading_accuracy`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "heading accuracy of Ariel Borysiuk"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`id`",
            "player.`player_api_id`",
            "player.`player_fifa_api_id`",
            "player.`player_name`",
            "player.`birthday`",
            "player.`height`",
            "player.`weight`",
            "player_attributes.`id`",
            "player_attributes.`player_api_id`",
            "player_attributes.`player_fifa_api_id`",
            "player_attributes.`date`",
            "player_attributes.`overall_rating`",
            "player_attributes.`potential`",
            "player_attributes.`preferred_foot`",
            "player_attributes.`attacking_work_rate`",
            "player_attributes.`defensive_work_rate`",
            "player_attributes.`crossing`",
            "player_attributes.`finishing`",
            "player_attributes.`heading_accuracy`",
            "player_attributes.`short_passing`",
            "player_attributes.`volleys`",
            "player_attributes.`dribbling`",
            "player_attributes.`curve`",
            "player_attributes.`free_kick_accuracy`",
            "player_attributes.`long_passing`",
            "player_attributes.`ball_control`",
            "player_attributes.`acceleration`",
            "player_attributes.`sprint_speed`",
            "player_attributes.`agility`",
            "player_attributes.`reactions`",
            "player_attributes.`balance`",
            "player_attributes.`shot_power`",
            "player_attributes.`jumping`",
            "player_attributes.`stamina`",
            "player_attributes.`strength`",
            "player_attributes.`long_shots`",
            "player_attributes.`aggression`",
            "player_attributes.`interceptions`",
            "player_attributes.`positioning`",
            "player_attributes.`vision`",
            "player_attributes.`penalties`",
            "player_attributes.`marking`",
            "player_attributes.`standing_tackle`",
            "player_attributes.`sliding_tackle`",
            "player_attributes.`gk_diving`",
            "player_attributes.`gk_handling`",
            "player_attributes.`gk_kicking`",
            "player_attributes.`gk_positioning`",
            "player_attributes.`gk_reflexes`"
        ],
        "sql_keywords": [
            "=",
            ">"
        ],
        "conditions": [
            "height over 180",
            "volley score over 70"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`volleys`",
            "player_attributes.`dribbling`",
            "player.`player_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "volley score over 70",
            "dribbling score over 70"
        ]
    },
    {
        "tables": [
            "match",
            "country"
        ],
        "columns": [
            "match.`id`",
            "match.`season`",
            "match.`country_id`",
            "country.`id`",
            "country.`name`"
        ],
        "sql_keywords": [
            "EXACT_MATCHING",
            "DISTINCT"
        ],
        "conditions": [
            "matches in the 2008/2009 season",
            "held in Belgium"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`birthday`",
            "player_attributes.`player_api_id`",
            "player_attributes.`long_passing`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "long passing score",
            "oldest player"
        ]
    },
    {
        "tables": [
            "match",
            "league",
            "country"
        ],
        "columns": [
            "match.`id`",
            "match.`date`",
            "match.`league_id`",
            "league.`id`",
            "league.`name`",
            "league.`country_id`",
            "country.`id`",
            "country.`name`"
        ],
        "sql_keywords": [
            "EXTRACT",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "matches held",
            "Belgium Jupiler League",
            "April, 2009"
        ]
    },
    {
        "tables": [
            "match",
            "league"
        ],
        "columns": [
            "match.`season`",
            "match.`league_id`",
            "league.`name`",
            "league.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "league",
            "most matches",
            "2008/2009 season"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`birthday`",
            "player.`player_api_id`",
            "player_attributes.`player_api_id`",
            "player_attributes.`overall_rating`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "AVG"
        ],
        "conditions": [
            "born before the year 1986"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`overall_rating`",
            "player.`player_name`",
            "player.`player_api_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "SUBQUERY",
            "SUBTRACT",
            "DIVIDE",
            "MULTIPLY"
        ],
        "conditions": [
            "Ariel Borysiuk's overall rating",
            "Paulin Puel's overall rating"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_long_name`",
            "team.`team_api_id`",
            "team_attributes.`team_api_id`",
            "team_attributes.`buildupplayspeed`"
        ],
        "sql_keywords": [
            "JOIN",
            "AVG"
        ],
        "conditions": []
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player_attributes.`player_api_id`",
            "player_attributes.`overall_rating`"
        ],
        "sql_keywords": [
            "JOIN",
            "AVG"
        ],
        "conditions": [
            "average overall rating",
            "Pietro Marino"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player_attributes.`crossing`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "SUM"
        ],
        "conditions": []
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_long_name`",
            "team.`id`",
            "team.`team_api_id`",
            "team_attributes.`chancecreationpassing`",
            "team_attributes.`chancecreationpassingclass`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "Ajax's highest chance creation passing score",
            "classified as"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player_attributes.`player_api_id`",
            "player_attributes.`preferred_foot`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "Which foot is preferred by Abdou Diallo?"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_name`",
            "player.`player_api_id`",
            "player_attributes.`player_api_id`",
            "player_attributes.`overall_rating`"
        ],
        "sql_keywords": [
            "=",
            "MAX"
        ],
        "conditions": [
            "highest overall rating",
            "Dorlan Pabon"
        ]
    },
    {
        "tables": [
            "match",
            "team",
            "country",
            "league"
        ],
        "columns": [
            "match.`away_team_api_id`",
            "match.`away_team_goal`",
            "team.`team_long_name`",
            "team.`team_api_id`",
            "country.`name`",
            "country.`id`",
            "league.`name`",
            "league.`country_id`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "Parma as the away team",
            "playing in Italy"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_name`",
            "player.`birthday`",
            "player_attributes.`overall_rating`",
            "player_attributes.`date`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "=",
            "LIKE",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "players had a 77 points overall rating on 2016/6/23",
            "oldest"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player_attributes.`date`",
            "player_attributes.`overall_rating`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "=",
            "LIKE"
        ],
        "conditions": [
            "overall rating for Aaron Mooy",
            "date 2016/2/4"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player_attributes.`date`",
            "player_attributes.`potential`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "2010/8/30"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`id`",
            "player.`player_name`",
            "player.`player_api_id`",
            "player_attributes.`attacking_work_rate`",
            "player_attributes.`date`",
            "player_attributes.`id`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "LIKE",
            "="
        ],
        "conditions": [
            "Francesco Migliore's attacking work rate",
            "2015/5/1"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player_attributes.`defensive_work_rate`",
            "player_attributes.`date`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "defensive work rate",
            "Kevin Berigaud",
            "2013/2/22"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player_attributes.`date`",
            "player_attributes.`crossing`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "Kevin Constant",
            "highest crossing score",
            "date"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_long_name`",
            "team.`team_api_id`",
            "team_attributes.`buildupplayspeedclass`",
            "team_attributes.`date`",
            "team_attributes.`team_api_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "build up play speed class for 'Willem II'",
            "date 2011/2/22"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_short_name`",
            "team.`team_api_id`",
            "team_attributes.`buildupplaydribblingclass`",
            "team_attributes.`date`",
            "team_attributes.`team_api_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "build up play dribbling class for 'LEI'",
            "on 2015/9/10"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_long_name`",
            "team.`team_api_id`",
            "team_attributes.`buildupplaypassingclass`",
            "team_attributes.`date`",
            "team_attributes.`team_api_id`"
        ],
        "sql_keywords": [
            "LIKE",
            "="
        ],
        "conditions": [
            "build Up play passing class for FC Lorient",
            "date 2010/2/22"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_long_name`",
            "team.`team_api_id`",
            "team_attributes.`date`",
            "team_attributes.`chancecreationpassingclass`",
            "team_attributes.`team_api_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "PEC Zwolle",
            "2013/9/20"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_long_name`",
            "team.`id`",
            "team.`team_api_id`",
            "team_attributes.`date`",
            "team_attributes.`chancecreationcrossingclass`",
            "team_attributes.`chancecreationcrossing`",
            "team_attributes.`id`",
            "team_attributes.`team_api_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "Hull City",
            "2010/2/22"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_long_name`",
            "team.`id`",
            "team.`team_api_id`",
            "team_attributes.`date`",
            "team_attributes.`defenceaggressionclass`",
            "team_attributes.`defenceaggression`",
            "team_attributes.`id`",
            "team_attributes.`team_api_id`"
        ],
        "sql_keywords": [
            "=",
            "LIKE"
        ],
        "conditions": [
            "team 'Hannover 96'",
            "defence aggression class",
            "date 2015/9/10"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player_attributes.`date`",
            "player_attributes.`overall_rating`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "BETWEEN"
        ],
        "conditions": [
            "average overall rating",
            "Marko Arnautovic",
            "from 2007/2/22 to 2016/4/21"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`id`",
            "player.`player_name`",
            "player.`player_api_id`",
            "player_attributes.`date`",
            "player_attributes.`overall_rating`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "Landon Donovan's overall rating",
            "Jordan Bowery's overall rating",
            "date 2013/7/12"
        ]
    },
    {
        "tables": [
            "player"
        ],
        "columns": [
            "player.`player_name`",
            "player.`height`"
        ],
        "sql_keywords": [
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "most tallest players"
        ]
    },
    {
        "tables": [
            "player"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`weight`"
        ],
        "sql_keywords": [
            "MAX",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "player api id of 10 heaviest players"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_name`",
            "player.`birthday`",
            "player_attributes.`date`"
        ],
        "sql_keywords": [
            "EXTRACT",
            "YEAR",
            "CURRENT_TIMESTAMP",
            "INTERVAL",
            "="
        ],
        "conditions": [
            "age 35 years old and above"
        ]
    },
    {
        "tables": [
            "match",
            "player"
        ],
        "columns": [
            "match.`home_team_goal`",
            "match.`home_player_1`",
            "match.`home_player_2`",
            "match.`home_player_3`",
            "match.`home_player_4`",
            "match.`home_player_5`",
            "match.`home_player_6`",
            "match.`home_player_7`",
            "match.`home_player_8`",
            "match.`home_player_9`",
            "match.`home_player_10`",
            "match.`home_player_11`",
            "player.`player_api_id`",
            "player.`player_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "home team goal",
            "Aaron Lennon"
        ]
    },
    {
        "tables": [
            "match",
            "player"
        ],
        "columns": [
            "match.`away_team_goal`",
            "match.`away_player_1`",
            "match.`away_player_2`",
            "match.`away_player_3`",
            "match.`away_player_4`",
            "match.`away_player_5`",
            "match.`away_player_6`",
            "match.`away_player_7`",
            "match.`away_player_8`",
            "match.`away_player_9`",
            "match.`away_player_10`",
            "match.`away_player_11`",
            "player.`player_name`",
            "player.`player_api_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "SUM"
        ],
        "conditions": [
            "away team goal scored by Daan Smith",
            "away team goal scored by Filipe Ferreira"
        ]
    },
    {
        "tables": [
            "match",
            "player"
        ],
        "columns": [
            "match.`home_team_goal`",
            "match.`home_player_1`",
            "match.`home_player_2`",
            "match.`home_player_3`",
            "match.`home_player_4`",
            "match.`home_player_5`",
            "match.`home_player_6`",
            "match.`home_player_7`",
            "match.`home_player_8`",
            "match.`home_player_9`",
            "match.`home_player_10`",
            "match.`home_player_11`",
            "player.`birthday`",
            "player.`player_api_id`"
        ],
        "sql_keywords": [
            "SUM",
            "JOIN",
            "WHERE",
            "SUBSTR",
            "CURRENT_TIMESTAMP"
        ],
        "conditions": [
            "age 30 years old and below"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`overall_rating`",
            "player.`player_name`",
            "player.`player_api_id`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "most strongest player"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`potential`",
            "player.`player_name`",
            "player.`player_api_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "players with the highest potential"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`attacking_work_rate`",
            "player.`player_name`",
            "player.`player_api_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "="
        ],
        "conditions": [
            "players tend to be attacking",
            "mates were doing attack moves"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_name`",
            "player.`birthday`",
            "player_attributes.`finishing`",
            "player_attributes.`player_api_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "SUBTRACT",
            "datetime",
            "CURRENT_TIMESTAMP",
            "localtime",
            "WHERE",
            "="
        ],
        "conditions": [
            "finishing rate of 1",
            "eldest player"
        ]
    },
    {
        "tables": [
            "player",
            "country"
        ],
        "columns": [
            "player.`player_name`",
            "country.`name`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "players from Belgium"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes",
            "country"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_fifa_api_id`",
            "player.`player_name`",
            "player_attributes.`player_fifa_api_id`",
            "player_attributes.`vision`",
            "country.`name`",
            "country.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "vision scores of 90 and above",
            "state the country of these players"
        ]
    },
    {
        "tables": [
            "player",
            "country"
        ],
        "columns": [
            "player.`weight`",
            "player.`player_api_id`",
            "player.`id`",
            "player.`birthday`",
            "player.`height`",
            "player.`player_fifa_api_id`",
            "player.`player_name`",
            "country.`name`",
            "country.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "AVG",
            "MAX"
        ],
        "conditions": [
            "heaviest average weights"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_long_name`",
            "team.`id`",
            "team.`team_api_id`",
            "team_attributes.`buildupplayspeedclass`",
            "team_attributes.`id`",
            "team_attributes.`team_api_id`",
            "team_attributes.`buildupplayspeed`"
        ],
        "sql_keywords": [
            "LIKE",
            "="
        ],
        "conditions": [
            "long name",
            "slow speed class team"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_short_name`",
            "team_attributes.`chancecreationpassingclass`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "team played safe",
            "creating chance of passing"
        ]
    },
    {
        "tables": [
            "player",
            "country"
        ],
        "columns": [
            "player.`height`",
            "country.`name`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "player"
        ],
        "columns": [
            "player.`player_name`",
            "player.`height`"
        ],
        "sql_keywords": [
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "over 180 cm tall",
            "top three football players",
            "alphabetical order"
        ]
    },
    {
        "tables": [
            "player"
        ],
        "columns": [
            "player.`player_name`",
            "player.`birthday`"
        ],
        "sql_keywords": [
            "LIKE",
            "="
        ],
        "conditions": [
            "born after the 1990s",
            "first name 'Aaron'"
        ]
    },
    {
        "tables": [
            "player_attributes"
        ],
        "columns": [
            "player_attributes.`id`",
            "player_attributes.`jumping`"
        ],
        "sql_keywords": [
            "=",
            "-"
        ],
        "conditions": [
            "players 6 and 23's jumping scores"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`id`",
            "player_attributes.`potential`",
            "player_attributes.`preferred_foot`",
            "player.`player_api_id`"
        ],
        "sql_keywords": [
            "MIN",
            "ORDER BY",
            "LIMIT",
            "="
        ],
        "conditions": [
            "lowest potential players",
            "prefer to use the right foot when attacking"
        ]
    },
    {
        "tables": [
            "player_attributes"
        ],
        "columns": [
            "player_attributes.`crossing`",
            "player_attributes.`player_api_id`",
            "player_attributes.`id`",
            "player_attributes.`potential`",
            "player_attributes.`preferred_foot`"
        ],
        "sql_keywords": [
            "MAX",
            "=",
            "JOIN"
        ],
        "conditions": [
            "highest potential score for crossing",
            "preferred to use their left foots while attacking"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`player_api_id`",
            "player_attributes.`strength`",
            "player_attributes.`stamina`",
            "player_attributes.`id`",
            "player.`player_api_id`",
            "player.`id`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "strength score of more than 80",
            "stamina score of more than 80"
        ]
    },
    {
        "tables": [
            "league",
            "country"
        ],
        "columns": [
            "league.`country_id`",
            "league.`name`",
            "country.`id`",
            "country.`name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "Poland Ekstraklasa"
        ]
    },
    {
        "tables": [
            "match",
            "league",
            "country"
        ],
        "columns": [
            "match.`date`",
            "match.`home_team_goal`",
            "match.`away_team_goal`",
            "match.`league_id`",
            "league.`name`",
            "league.`country_id`",
            "country.`name`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "match on September 24, 2008",
            "Belgian Jupiler League",
            "home team",
            "away team"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`player_api_id`",
            "player.`player_name`",
            "player_attributes.`sprint_speed`",
            "player_attributes.`agility`",
            "player_attributes.`acceleration`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "Alexis Blin's sprint speed",
            "Alexis Blin's agility",
            "Alexis Blin's acceleration"
        ]
    },
    {
        "tables": [
            "team",
            "team_attributes"
        ],
        "columns": [
            "team.`team_long_name`",
            "team.`team_api_id`",
            "team_attributes.`buildupplayspeedclass`",
            "team_attributes.`team_api_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "KSV Cercle Brugge team",
            "slow speed class",
            "balanced speed class",
            "fast speed class"
        ]
    },
    {
        "tables": [
            "match",
            "league"
        ],
        "columns": [
            "match.`season`",
            "match.`league_id`",
            "league.`name`",
            "league.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "match",
            "league",
            "country"
        ],
        "columns": [
            "match.`home_team_goal`",
            "match.`league_id`",
            "league.`id`",
            "league.`name`",
            "league.`country_id`",
            "country.`id`",
            "country.`name`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "="
        ],
        "conditions": [
            "highest score",
            "home team",
            "Netherlands Eredivisie league"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`weight`",
            "player.`player_api_id`",
            "player_attributes.`finishing`",
            "player_attributes.`curve`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "heaviest weight"
        ]
    },
    {
        "tables": [
            "match",
            "league"
        ],
        "columns": [
            "match.`season`",
            "match.`league_id`",
            "league.`name`",
            "league.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "top 4 leagues",
            "most games",
            "2015-2016 season"
        ]
    },
    {
        "tables": [
            "match",
            "team"
        ],
        "columns": [
            "match.`away_team_api_id`",
            "match.`away_team_goal`",
            "team.`team_long_name`",
            "team.`team_api_id`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "away team",
            "scored the most goals"
        ]
    },
    {
        "tables": [
            "player_attributes",
            "player"
        ],
        "columns": [
            "player_attributes.`id`",
            "player_attributes.`date`",
            "player_attributes.`overall_rating`",
            "player_attributes.`player_fifa_api_id`",
            "player_attributes.`player_api_id`",
            "player_attributes.`strength`",
            "player.`weight`",
            "player.`player_api_id`",
            "player.`id`",
            "player.`birthday`",
            "player.`height`",
            "player.`player_fifa_api_id`",
            "player.`player_name`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "overall strength is the greatest"
        ]
    },
    {
        "tables": [
            "player",
            "player_attributes"
        ],
        "columns": [
            "player.`id`",
            "player.`player_api_id`",
            "player.`height`",
            "player_attributes.`id`",
            "player_attributes.`player_api_id`",
            "player_attributes.`overall_rating`"
        ],
        "sql_keywords": [
            "COUNT",
            "AND",
            "JOIN"
        ],
        "conditions": [
            "players under 180 cm",
            "overall strength more than 70"
        ]
    },

    {
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`admission`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "COUNT",
            "GROUP BY",
            "HAVING",
            "CASE",
            "WHEN",
            "THEN",
            "ELSE",
            "END"
        ],
        "conditions": [
            "in-patient",
            "outpatient",
            "male"
        ]
    },
    {
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "patient.`sex`"
        ],
        "sql_keywords": [
            "COUNT",
            "WHERE",
            "AND",
            "DIVIDE"
        ],
        "conditions": [
            "female patient",
            "born after 1930"
        ]
    },
    {
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.`birthday`",
            "patient.`admission`"
        ],
        "sql_keywords": [
            "BETWEEN",
            "="
        ],
        "conditions": [
            "patient born between Year 1930 to 1940"
        ]
    },
    {
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "patient.`admission`"
        ],
        "sql_keywords": [
            "COUNT",
            "WHERE",
            "DIVIDE"
        ],
        "conditions": [
            "SLE diagnosed patient"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "laboratory.`date`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "disease patient '30609' diagnosed with",
            "date of laboratory tests done for this patient"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`birthday`",
            "examination.`examination date`",
            "examination.`symptoms`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "sex of patient ID '163109'",
            "birthday of patient ID '163109'",
            "date of examination for patient ID '163109'",
            "symptom of patient ID '163109'"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`birthday`",
            "laboratory.`ldh`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "LDH beyond normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "examination.`rvvt`",
            "examination.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "SUBSTR",
            "YEAR"
        ],
        "conditions": [
            "positive degree of coagulation"
        ]
    },
    {
        "tables": [
            "examination",
            "patient"
        ],
        "columns": [
            "examination.`id`",
            "examination.`diagnosis`",
            "examination.`thrombosis`",
            "patient.`id`",
            "patient.`sex`",
            "patient.`diagnosis`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "severe degree of thrombosis"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "patient.`diagnosis`",
            "patient.`admission`",
            "patient.`sex`",
            "patient.`first date`",
            "laboratory.`id`",
            "laboratory.`date`",
            "laboratory.`t-cho`"
        ],
        "sql_keywords": [
            "=",
            ">="
        ],
        "conditions": [
            "born in 1937",
            "total cholesterol beyond normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`diagnosis`",
            "laboratory.`alb`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "albumin level lower than 3.5"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`id`",
            "laboratory.`tp`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "COUNT",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "female patient",
            "total protein not within the normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "patient.`admission`",
            "examination.`id`",
            "examination.`acl igg`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AVG",
            "GROUP BY"
        ],
        "conditions": [
            "in-patient age 50 and above"
        ]
    },
    {
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`description`",
            "patient.`admission`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "female patients",
            "came at the hospital in 1997",
            "immediately followed at the outpatient clinic"
        ]
    },
    {
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "patient.`first date`"
        ],
        "sql_keywords": [
            "MIN",
            "YEAR",
            "SUBTRACT"
        ],
        "conditions": [
            "youngest patient",
            "initial arrival at the hospital"
        ]
    },
    {
        "tables": [
            "examination",
            "patient"
        ],
        "columns": [
            "examination.`id`",
            "examination.`examination date`",
            "examination.`thrombosis`",
            "patient.`id`",
            "patient.`sex`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "="
        ],
        "conditions": [
            "most serious thrombosis cases",
            "examined in 1997",
            "women"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`birthday`",
            "patient.`id`",
            "laboratory.`tg`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "MAX",
            "MIN",
            "SUBTRACT"
        ],
        "conditions": [
            "age gap between the youngest and oldest patient",
            "normal triglyceride recorded"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`birthday`",
            "patient.`id`",
            "patient.`diagnosis`",
            "examination.`diagnosis`",
            "examination.`symptoms`"
        ],
        "sql_keywords": [
            "JOIN",
            "ORDER BY",
            "LIMIT",
            "IS NOT NULL"
        ],
        "conditions": [
            "youngest patient",
            "medical examination",
            "symptoms observed",
            "diagnosis"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`date`",
            "laboratory.`id`",
            "patient.`id`",
            "patient.`sex`"
        ],
        "sql_keywords": [
            "BETWEEN",
            "=",
            "COUNT",
            "DIVIDE"
        ],
        "conditions": [
            "year concluded on December 31, 1998",
            "male patients",
            "tested in the lab each month"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`birthday`",
            "patient.`id`",
            "patient.`diagnosis`",
            "patient.`first date`",
            "laboratory.`date`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "MIN",
            "JOIN"
        ],
        "conditions": [
            "oldest SJS patient",
            "medical laboratory work completed",
            "age when initially arrived at the hospital"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`ua`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "COUNT",
            "SUM",
            "CASE"
        ],
        "conditions": [
            "abnormal uric acid counts"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "patient.`first date`",
            "examination.`id`",
            "examination.`examination date`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "EXTRACT",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "hadn't undergone a medical examination",
            "at least a year following their initial hospital visit"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "examination.`id`",
            "examination.`examination date`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "WHERE",
            "AND",
            "BETWEEN"
        ],
        "conditions": [
            "underage patients",
            "three-year period from 1990 to 1993"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`id`",
            "laboratory.`t-bil`"
        ],
        "sql_keywords": [
            "EXACT MATCHING (=)",
            "EXACT MATCHING (>=)"
        ],
        "conditions": [
            "male patients",
            "elevated total bilirubin count"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "examination.`diagnosis`",
            "examination.`examination date`",
            "examination.`id`"
        ],
        "sql_keywords": [
            "MAX",
            "COUNT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "lab work done between 1/1/1985 and 12/31/1995"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory",
            "examination"
        ],
        "columns": [
            "patient.`birthday`",
            "patient.`id`",
            "laboratory.`date`",
            "laboratory.`id`",
            "examination.`id`"
        ],
        "sql_keywords": [
            "AVG",
            "SUBTRACT",
            "BETWEEN",
            "JOIN"
        ],
        "conditions": [
            "year 1999",
            "October of the year 1991"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "patient.`diagnosis`",
            "laboratory.`id`",
            "laboratory.`hgb`",
            "examination.`id`",
            "examination.`examination date`",
            "examination.`diagnosis`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "SUBSTR",
            "="
        ],
        "conditions": [
            "highest hemoglobin count",
            "time of the examination",
            "doctor's diagnosis"
        ]
    },
    {
        "tables": [
            "examination",
            "patient"
        ],
        "columns": [
            "examination.`id`",
            "examination.`examination date`",
            "examination.`ana`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "patient id 3605340",
            "date 1996/12/2"
        ]
    },
    {
        "tables": [
            "laboratory"
        ],
        "columns": [
            "laboratory.`date`",
            "laboratory.`t-cho`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "patient id 2927464",
            "date 1995-9-4",
            "total cholesterol status",
            "normal level"
        ]
    },
    {
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "patient.`sex`"
        ],
        "sql_keywords": [
            "=",
            "LIMIT"
        ],
        "conditions": [
            "AORTITIS diagnosed patient"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "patient.`description`",
            "patient.`diagnosis`",
            "examination.`id`",
            "examination.`examination date`",
            "examination.`acl igm`",
            "examination.`diagnosis`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "diagnosed with SLE on 1994/2/19",
            "anti-Cardiolipin antibody concentration status on 1993/11/12"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`date`",
            "laboratory.`gpt`",
            "patient.`id`",
            "patient.`sex`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "JOIN"
        ],
        "conditions": [
            "patient is a man or a woman",
            "ALT glutamic pylvic transaminase status is 9",
            "date is 1992-6-12"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`birthday`",
            "patient.`id`",
            "laboratory.`date`",
            "laboratory.`ua`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "=",
            "SUBSTR",
            "-"
        ],
        "conditions": [
            "uric acid level as 8.4",
            "date of test on 1991-10-21"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`first date`",
            "patient.`diagnosis`",
            "laboratory.`id`",
            "laboratory.`date`"
        ],
        "sql_keywords": [
            "=",
            "COUNT"
        ],
        "conditions": [
            "first came to the hospital on 1991/6/13",
            "diagnosed with SJS",
            "Laboratory tests in 1995"
        ]
    },
    {
        "tables": [
            "examination",
            "patient"
        ],
        "columns": [
            "examination.`id`",
            "examination.`examination date`",
            "examination.`diagnosis`",
            "patient.`id`",
            "patient.`first date`",
            "patient.`diagnosis`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "diagnosed SLE on 1997/1/27",
            "original diagnose when he/she came to the hospital for the first time"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`birthday`",
            "patient.`id`",
            "examination.`id`",
            "examination.`symptoms`",
            "examination.`examination date`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "birthday was 1959/3/1",
            "examination on 1993/9/27"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`birthday`",
            "patient.`id`",
            "laboratory.`date`",
            "laboratory.`t-cho`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "=",
            "LIKE"
        ],
        "conditions": [
            "patient born on 1959/2/18",
            "total cholesterol decrease rate from November to December in 1981"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "patient.`description`",
            "patient.`diagnosis`",
            "examination.`id`",
            "examination.`examination date`",
            "examination.`diagnosis`"
        ],
        "sql_keywords": [
            "=",
            "AND",
            "BETWEEN"
        ],
        "conditions": [
            "diagnosed with Behcet's",
            "exams between 01/01/197 and 12/31/1997"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`date`",
            "laboratory.`gpt`",
            "laboratory.`alb`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "BETWEEN",
            ">",
            "<"
        ],
        "conditions": [
            "examined between 1987/7/6 and 1996/1/31",
            "GPT level greater than 30",
            "ALB level less than 4"
        ]
    },
    {
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "patient.`admission`",
            "patient.`sex`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "DISTINCT"
        ],
        "conditions": [
            "female patients",
            "born in 1964",
            "admitted to the hospital"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "examination.`acl igm`",
            "examination.`ana pattern`",
            "examination.`thrombosis`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "AVG",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "degree of thrombosis level 2",
            "ANA pattern of only S",
            "level of anti-Cardiolip in antibody (IgM) 20% higher than average"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`u-pro`",
            "laboratory.`ua`",
            "laboratory.`id`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING",
            "COUNT"
        ],
        "conditions": [
            "proteinuria level within the normal range",
            "uric acid level below the normal range"
        ]
    },
    {
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "patient.`sex`",
            "patient.`first date`"
        ],
        "sql_keywords": [
            "EXTRACT",
            "SUM",
            "COUNT",
            "DIVIDE",
            "MULTIPLY"
        ],
        "conditions": [
            "male patients",
            "first presented to the hospital in 1981",
            "diagnosed with BEHCET"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`admission`",
            "laboratory.`id`",
            "laboratory.`date`",
            "laboratory.`t-bil`"
        ],
        "sql_keywords": [
            "=",
            "LIKE",
            "<"
        ],
        "conditions": [
            "followed up at the outpatient clinic",
            "underwent a laboratory test in October 1991",
            "had a total blood bilirubin level within the normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`birthday`",
            "examination.`id`",
            "examination.`ana pattern`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "=",
            "AND",
            "BETWEEN"
        ],
        "conditions": [
            "excluding all P only ANA Pattern patients",
            "women born between 1980 and 1989"
        ]
    },
    {
        "tables": [
            "examination",
            "patient",
            "laboratory"
        ],
        "columns": [
            "examination.`id`",
            "examination.`diagnosis`",
            "patient.`id`",
            "patient.`sex`",
            "patient.`diagnosis`",
            "laboratory.`id`",
            "laboratory.`crp`",
            "laboratory.`cre`",
            "laboratory.`ldh`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "diagnosed with PSS",
            "blood level of C-reactive protein de 2+",
            "createnine 1",
            "LDH 123"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`alb`",
            "laboratory.`plt`",
            "laboratory.`id`",
            "patient.`id`",
            "patient.`sex`",
            "patient.`diagnosis`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "female patients",
            "PLT greater than 400",
            "diagnosed with SLE"
        ]
    },
    {
        "tables": [
            "examination",
            "patient"
        ],
        "columns": [
            "examination.`diagnosis`",
            "examination.`id`",
            "examination.`symptoms`",
            "patient.`id`",
            "patient.`diagnosis`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "SLE disease"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "patient.`description`",
            "patient.`diagnosis`",
            "examination.`id`",
            "examination.`diagnosis`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "medical information on patient number 48473 first documented",
            "disease patient number 48473 had"
        ]
    },
    {
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "patient.`sex`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "female patients",
            "given an APS diagnosis"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`date`",
            "laboratory.`tp`",
            "laboratory.`id`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "YEAR",
            "AND",
            "NOT BETWEEN"
        ],
        "conditions": [
            "underwent testing in 1997",
            "protein levels outside the normal range"
        ]
    },
    {
        "tables": [
            "examination",
            "patient"
        ],
        "columns": [
            "examination.`diagnosis`",
            "examination.`symptoms`",
            "examination.`id`",
            "patient.`id`",
            "patient.`diagnosis`"
        ],
        "sql_keywords": [
            "LIKE",
            "SUM",
            "DIVIDE",
            "MULTIPLY"
        ],
        "conditions": [
            "signs of thrombocytopenia",
            "SLE diagnosed"
        ]
    },
    {
        "tables": [
            "patient"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "patient.`diagnosis`",
            "patient.`sex`"
        ],
        "sql_keywords": [
            "EXACT MATCHING (=)",
            "JOIN",
            "GROUP BY",
            "COUNT",
            "SUM"
        ],
        "conditions": [
            "born in 1980",
            "diagnosed with RA",
            "are women"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`admission`",
            "patient.`diagnosis`",
            "examination.`id`",
            "examination.`examination date`",
            "examination.`diagnosis`"
        ],
        "sql_keywords": [
            "=",
            "AND",
            "BETWEEN"
        ],
        "conditions": [
            "male patients",
            "underwent testing between 1995 and 1997",
            "diagnosed with Behcet disease",
            "did not stay in the hospital for treatment"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`id`",
            "laboratory.`wbc`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "=",
            "<"
        ],
        "conditions": [
            "female",
            "white blood cells below 3.5"
        ]
    },
    {
        "tables": [
            "patient",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "patient.`first date`",
            "examination.`id`",
            "examination.`examination date`"
        ],
        "sql_keywords": [
            "=",
            "DATEDIFF"
        ],
        "conditions": [
            "patient number 821298",
            "arrived at the hospital for the first time",
            "evaluation began"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`ua`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "patient with the number 57266",
            "uric acid within a normal range"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`date`",
            "laboratory.`got`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "=",
            ">"
        ],
        "conditions": [
            "patient '48473'",
            "AST glutamic oxaloacetic transaminase (GOT) index is above the normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`birthday`",
            "laboratory.`date`",
            "laboratory.`got`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "=",
            "<"
        ],
        "conditions": [
            "sex",
            "date of birthday",
            "AST glutamic oxaloacetic transaminase (GOT) index is within normal range",
            "laboratory examination in 1994"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`id`",
            "laboratory.`gpt`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            ">="
        ],
        "conditions": [
            "male patients",
            "history of ALT glutamic pylvic transaminase (GPT) exceed the normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "patient.`diagnosis`",
            "laboratory.`gpt`",
            "laboratory.`date`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY"
        ],
        "conditions": [
            "ALT glutamic pylvic transaminase beyond the normal range",
            "ascending order of their date of birth"
        ]
    },
    {
        "tables": [
            "laboratory"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`ldh`"
        ],
        "sql_keywords": [
            "AVG",
            "WHERE"
        ],
        "conditions": [
            "lactate dehydrogenase (LDH) within the normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "laboratory.`id`",
            "laboratory.`ldh`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "lactate dehydrogenase (LDH) between 100-300 index above the normal range",
            "provide ID",
            "provide age"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`alp`",
            "laboratory.`id`",
            "patient.`id`",
            "patient.`admission`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "alkaliphophatase (ALP) within normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "laboratory.`alp`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "born on the April 1st, 1982",
            "alkaliphophatase (ALP) within normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`birthday`",
            "laboratory.`tp`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "total protein (TP) below the lower range of the normal index"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`tp`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "SUBTRACT"
        ],
        "conditions": [
            "female patient",
            "total protein (TP) beyond the normal index"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`birthday`",
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`alb`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "male patient",
            "albumin not within range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`birthday`",
            "patient.`id`",
            "laboratory.`id`",
            "laboratory.`alb`"
        ],
        "sql_keywords": [
            "=",
            "BETWEEN"
        ],
        "conditions": [
            "patient born in 1982",
            "albumin within normal range"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`date`",
            "laboratory.`ua`",
            "laboratory.`id`",
            "laboratory.`un`",
            "patient.`id`",
            "patient.`sex`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "COUNT",
            "CASE"
        ],
        "conditions": [
            "female patient",
            "uric acid (UA) beyond the normal range"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`date`",
            "laboratory.`ua`",
            "laboratory.`id`",
            "patient.`id`",
            "patient.`sex`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "ON",
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "AVG"
        ],
        "conditions": [
            "normal uric acid (UA)"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`birthday`",
            "laboratory.`un`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "urea nitrogen (UN) just within the borderline of passing"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`birthday`",
            "laboratory.`un`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "diagnosed with 'RA'",
            "within the UN normal index"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`id`",
            "laboratory.`cre`"
        ],
        "sql_keywords": [
            "=",
            ">="
        ],
        "conditions": [
            "male patients",
            "creatinine index out of the normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`cre`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "SUM",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "male patients",
            "creatinine not within the normal range",
            "female patients"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`t-bil`",
            "patient.`id`",
            "patient.`sex`",
            "patient.`birthday`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "highest total bilirubin level",
            "patient details with ID",
            "sex",
            "birthday"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`id`",
            "laboratory.`t-bil`"
        ],
        "sql_keywords": [
            "GROUP_CONCAT",
            "DISTINCT",
            "GROUP BY"
        ],
        "conditions": [
            "total bilirubin (T-BIL) level not within the normal range",
            "group by sex"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "laboratory.`id`",
            "laboratory.`t-cho`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "ON",
            "WHERE",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "oldest patient",
            "highest total cholesterol (T-CHO)"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`birthday`",
            "laboratory.`id`",
            "laboratory.`t-cho`"
        ],
        "sql_keywords": [
            "SUM",
            "SUBTRACT",
            "YEAR",
            "NOW",
            "COUNT",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "male patient",
            "high cholesterol"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "laboratory.`tg`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "triglyceride (TG) index greater than 100 of the normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`birthday`",
            "patient.`id`",
            "laboratory.`tg`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "SUBTRACT",
            "YEAR",
            "CURRENT_TIMESTAMP"
        ],
        "conditions": [
            "triglyceride (TG) level beyond the normal range",
            "age more than 50 years"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`admission`",
            "laboratory.`id`",
            "laboratory.`cpk`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "=",
            "<"
        ],
        "conditions": [
            "outpatient",
            "normal range of creatinine phosphokinase"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "patient.`sex`",
            "laboratory.`id`",
            "laboratory.`cpk`"
        ],
        "sql_keywords": [
            "BETWEEN",
            "=",
            ">=",
            "DISTINCT"
        ],
        "conditions": [
            "patient born between 1936-1956",
            "male patients",
            "creatinine phosphokinase beyond the normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`birthday`",
            "laboratory.`glu`",
            "laboratory.`t-cho`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "EXTRACT",
            "CURRENT_TIMESTAMP"
        ],
        "conditions": [
            "blood glucose (GLU) not within normal range",
            "total cholesterol (T-CHO) within normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`description`",
            "laboratory.`id`",
            "laboratory.`glu`"
        ],
        "sql_keywords": [
            "=",
            "<"
        ],
        "conditions": [
            "data was first recorded in 1991",
            "blood glucose (GLU) index within normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`birthday`",
            "laboratory.`wbc`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "GROUP BY",
            "ORDER BY"
        ],
        "conditions": [
            "abnormal white blood cell count"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "patient.`diagnosis`",
            "laboratory.`rbc`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "SUBSTR",
            "=",
            "<"
        ],
        "conditions": [
            "lower red blood cell",
            "patient's diagnosis",
            "patient's ID",
            "patient's age"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`birthday`",
            "patient.`admission`",
            "laboratory.`id`",
            "laboratory.`rbc`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "=",
            "<=",
            ">="
        ],
        "conditions": [
            "female patient",
            "age 50 and above",
            "abnormal red blood cell count"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`admission`",
            "laboratory.`id`",
            "laboratory.`hgb`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "low hemoglobin level"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "patient.`birthday`",
            "patient.`diagnosis`",
            "laboratory.`hgb`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "=",
            "AND",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "diagnosed with SLE",
            "oldest",
            "normal hemoglobin level"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "laboratory.`id`",
            "laboratory.`hct`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "HAVING",
            "SUBSTR",
            "COUNT"
        ],
        "conditions": [
            "two or more laboratory examinations",
            "hematocrit level exceeded the normal range"
        ]
    },
    {
        "tables": [
            "laboratory"
        ],
        "columns": [
            "laboratory.`date`",
            "laboratory.`hct`"
        ],
        "sql_keywords": [
            "AVG",
            "WHERE",
            "LIKE",
            "<"
        ],
        "conditions": [
            "laboratory examinations in 1991",
            "hematocrit level lower than the normal range"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`plt`",
            "laboratory.`id`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING",
            "SUM",
            "CASE"
        ],
        "conditions": [
            "abnormal platelet level",
            "lower than normal range",
            "higher than normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "laboratory.`date`",
            "laboratory.`plt`"
        ],
        "sql_keywords": [
            "YEAR",
            "SUBTRACT",
            "BETWEEN"
        ],
        "conditions": [
            "below 50 years old",
            "normal platelet level"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "patient.`sex`",
            "laboratory.`id`",
            "laboratory.`pt`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING",
            "SUM",
            "DIVIDE"
        ],
        "conditions": [
            "older than 55 years old",
            "female",
            "abnormal prothrombin time (PT)"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`first date`",
            "patient.`sex`",
            "patient.`birthday`",
            "patient.`description`",
            "patient.`admission`",
            "patient.`diagnosis`",
            "laboratory.`id`",
            "laboratory.`date`",
            "laboratory.`pt`",
            "laboratory.`ra`",
            "laboratory.`rf`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "first came to the hospital after year 1992",
            "prothrombin time (PT) level that are normal"
        ]
    },
    {
        "tables": [
            "examination"
        ],
        "columns": [
            "examination.`examination date`",
            "examination.`kct`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "examinations done after 1997/1/1",
            "result of an inactivated partial prothrombin time"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient",
            "examination"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`aptt`",
            "patient.`id`",
            "examination.`id`",
            "examination.`thrombosis`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "abnormal activated partial prothrombin time",
            "no thrombosis"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`id`",
            "laboratory.`wbc`",
            "laboratory.`fg`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "male patients",
            "normal level of white blood cells",
            "abnormal fibrinogen level"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "laboratory.`id`",
            "laboratory.`fg`"
        ],
        "sql_keywords": [
            "DISTINCT",
            ">",
            "BETWEEN"
        ],
        "conditions": [
            "born after 1980/1/1",
            "abnormal fibrinogen level"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`u-pro`",
            "laboratory.`id`",
            "patient.`id`",
            "patient.`diagnosis`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "=",
            ">="
        ],
        "conditions": [
            "proteinuria level higher than normal"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`u-pro`",
            "laboratory.`id`",
            "patient.`id`",
            "patient.`diagnosis`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "normal proteinuria level",
            "diagnosed with SLE"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`igg`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "Ig G higher than normal"
        ]
    },
    {
        "tables": [
            "laboratory",
            "examination",
            "patient"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`igg`",
            "examination.`id`",
            "examination.`symptoms`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "normal Ig G level",
            "have symptoms"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "laboratory.`iga`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "MAX",
            "BETWEEN",
            "JOIN"
        ],
        "conditions": [
            "highest Ig A within the normal range"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`iga`",
            "patient.`id`",
            "patient.`first date`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "COUNT"
        ],
        "conditions": [
            "normal Ig A level",
            "came to the hospital after 1990/1/1"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "laboratory.`igm`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "abnormal Ig M level"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`description`",
            "laboratory.`id`",
            "laboratory.`crp`"
        ],
        "sql_keywords": [
            "JOIN",
            "IS NULL",
            "="
        ],
        "conditions": [
            "abnormal C-reactive protein",
            "data not recorded"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "laboratory.`id`",
            "laboratory.`cre`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "SUBSTR",
            "YEAR",
            "CURDATE",
            "AND",
            "GROUP BY",
            "COUNT"
        ],
        "conditions": [
            "creatinine level is abnormal",
            "age isn't 70 yet"
        ]
    },
    {
        "tables": [
            "patient",
            "examination",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "patient.`birthday`",
            "patient.`first date`",
            "patient.`sex`",
            "patient.`description`",
            "patient.`admission`",
            "examination.`diagnosis`",
            "examination.`ana`",
            "examination.`ana pattern`",
            "examination.`kct`",
            "examination.`acl igg`",
            "examination.`examination date`",
            "examination.`symptoms`",
            "examination.`acl iga`",
            "examination.`rvvt`",
            "examination.`lac`",
            "examination.`acl igm`",
            "examination.`thrombosis`",
            "laboratory.`un`",
            "laboratory.`ra`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "normal Rhuematoid Factor",
            "positive measure of degree of coagulation"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "patient.`diagnosis`",
            "laboratory.`id`",
            "laboratory.`ra`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "ON",
            "WHERE",
            "YEAR",
            ">=",
            "IN"
        ],
        "conditions": [
            "born after 1985-1-1",
            "have a normal Rhuematoid Factor"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "laboratory.`id`",
            "laboratory.`rf`"
        ],
        "sql_keywords": [
            "=",
            ">",
            "AND"
        ],
        "conditions": [
            "RF is normal",
            "older than 60"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient",
            "examination"
        ],
        "columns": [
            "laboratory.`rf`",
            "laboratory.`id`",
            "patient.`id`",
            "examination.`thrombosis`",
            "examination.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "normal RF",
            "no thrombosis"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "laboratory.`c3`",
            "laboratory.`id`",
            "examination.`ana pattern`",
            "examination.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "normal level of complement 3",
            "P pattern observed in the sheet of ANA examination"
        ]
    },
    {
        "tables": [
            "examination",
            "laboratory",
            "patient"
        ],
        "columns": [
            "examination.`acl iga`",
            "examination.`id`",
            "laboratory.`hct`",
            "laboratory.`id`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "MAX",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "level of Hematoclit isn't normal",
            "highest anti-Cardiolipin antibody concentration"
        ]
    },
    {
        "tables": [
            "patient",
            "examination",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "examination.`thrombosis`",
            "examination.`id`",
            "laboratory.`c4`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "blood clots in veins",
            "normal level of complement 4"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`admission`",
            "patient.`id`",
            "laboratory.`rnp`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "normal level of anti-ribonuclear protein",
            "admitted to the hospital"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "patient.`sex`",
            "laboratory.`date`",
            "laboratory.`rnp`",
            "laboratory.`id`",
            "laboratory.`ra`",
            "laboratory.`un`"
        ],
        "sql_keywords": [
            "MAX",
            "NOT IN",
            "JOIN"
        ],
        "conditions": [
            "youngest patient",
            "abnormal anti-ribonuclear protein level"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "laboratory.`id`",
            "laboratory.`sm`",
            "examination.`id`",
            "examination.`thrombosis`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "normal anti-SM",
            "no thrombosis"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`birthday`",
            "laboratory.`sm`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "abnormal anti-SM",
            "three youngest"
        ]
    },
    {
        "tables": [
            "examination",
            "laboratory",
            "patient"
        ],
        "columns": [
            "examination.`id`",
            "examination.`examination date`",
            "laboratory.`id`",
            "laboratory.`sc170`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "examination done after 1997/1/1",
            "normal anti-scl70"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient",
            "examination"
        ],
        "columns": [
            "laboratory.`sc170`",
            "patient.`sex`",
            "patient.`id`",
            "examination.`symptoms`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "has a normal anti-scl70",
            "female",
            "does not have any symptom"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`ssa`",
            "laboratory.`id`",
            "patient.`id`",
            "patient.`first date`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "=",
            "<"
        ],
        "conditions": [
            "normal anti-SSA",
            "came to the hospital before 2000"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`ssa`",
            "laboratory.`date`",
            "laboratory.`id`",
            "patient.`id`",
            "patient.`first date`"
        ],
        "sql_keywords": [
            "MIN",
            "NOT IN",
            "JOIN"
        ],
        "conditions": [
            "abnormal anti-SSA",
            "first patient"
        ]
    },
    {
        "tables": [
            "examination",
            "patient",
            "laboratory"
        ],
        "columns": [
            "examination.`id`",
            "examination.`diagnosis`",
            "patient.`id`",
            "patient.`diagnosis`",
            "laboratory.`id`",
            "laboratory.`ssb`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "normal anti-SSB",
            "diagnosed with SLE"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "laboratory.`ssb`",
            "laboratory.`id`",
            "examination.`symptoms`",
            "examination.`id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "anti-SSB are normal",
            "other symptoms observed in their examination"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`id`",
            "laboratory.`ssb`",
            "laboratory.`centromea`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "IN"
        ],
        "conditions": [
            "normal level of anti-centromere",
            "normal level of anti-SSB",
            "male"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "laboratory.`id`",
            "laboratory.`dna`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "=",
            ">="
        ],
        "conditions": [
            "abnormal level of anti-DNA"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`description`",
            "laboratory.`id`",
            "laboratory.`dna`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "=",
            "IS NULL"
        ],
        "conditions": [
            "normal anti-DNA level",
            "data not recorded"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`igg`",
            "laboratory.`id`",
            "patient.`id`",
            "patient.`admission`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "normal level of IGG"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`got`",
            "laboratory.`glu`",
            "patient.`id`",
            "patient.`diagnosis`"
        ],
        "sql_keywords": [
            "COUNT",
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "abnormal level of glutamic oxaloacetic transaminase",
            "diagnosed with SLE"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`got`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "male patients",
            "glutamic oxaloacetic transaminase in the normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`birthday`",
            "patient.`id`",
            "laboratory.`got`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "abnormal level of glutamic oxaloacetic transaminase"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`birthday`",
            "patient.`id`",
            "laboratory.`gpt`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "WHERE",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "top three patients",
            "highest glutamic pylvic transaminase",
            "normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`id`",
            "laboratory.`got`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "normal glutamic pylvic transaminase level",
            "male"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`ldh`",
            "patient.`id`",
            "patient.`first date`"
        ],
        "sql_keywords": [
            "MAX",
            "MIN",
            "JOIN"
        ],
        "conditions": [
            "highest lactate dehydrogenase",
            "normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`first date`",
            "laboratory.`id`",
            "laboratory.`date`",
            "laboratory.`ldh`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            ">="
        ],
        "conditions": [
            "abnormal level of lactate dehydrogenase"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`alp`",
            "laboratory.`id`",
            "patient.`id`",
            "patient.`admission`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "abnormal alkaliphophatase level"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`admission`",
            "laboratory.`id`",
            "laboratory.`alp`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "=",
            "<"
        ],
        "conditions": [
            "normal level of alkaliphophatase"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "laboratory.`id`",
            "laboratory.`tp`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "total protein is lower than normal"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "laboratory.`id`",
            "laboratory.`tp`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "diagnosed with SJS",
            "normal level of total protein"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient",
            "examination"
        ],
        "columns": [
            "laboratory.`date`",
            "laboratory.`alb`",
            "patient.`id`",
            "examination.`examination date`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "WHERE"
        ],
        "conditions": [
            "albumin is the highest in the normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`id`",
            "laboratory.`tp`",
            "laboratory.`alb`"
        ],
        "sql_keywords": [
            "=",
            "AND",
            "JOIN"
        ],
        "conditions": [
            "male patients",
            "normal level of albumin",
            "normal level of total protein"
        ]
    },
    {
        "tables": [
            "examination",
            "patient",
            "laboratory"
        ],
        "columns": [
            "examination.`acl igg`",
            "examination.`acl igm`",
            "examination.`acl iga`",
            "examination.`id`",
            "patient.`id`",
            "patient.`sex`",
            "laboratory.`ua`",
            "laboratory.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "MAX",
            "AND"
        ],
        "conditions": [
            "female patient",
            "highest uric acid level",
            "normal range"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "laboratory.`cre`",
            "laboratory.`id`",
            "examination.`ana`",
            "examination.`id`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "normal creatinine level"
        ]
    },
    {
        "tables": [
            "examination",
            "laboratory",
            "patient"
        ],
        "columns": [
            "examination.`acl iga`",
            "examination.`id`",
            "laboratory.`cre`",
            "laboratory.`id`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "creatinine level is normal",
            "anti Cardiolipin antibody concentration level is the highest"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "laboratory.`t-bil`",
            "laboratory.`id`",
            "examination.`ana pattern`",
            "examination.`id`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "total bilirubin over the normal range",
            "peripheral pattern observed in the sheet of ANA examination"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "laboratory.`t-bil`",
            "laboratory.`id`",
            "examination.`ana`",
            "examination.`id`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "total bilirubin is the highest in the normal range"
        ]
    },
    {
        "tables": [
            "laboratory",
            "examination",
            "patient"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`t-cho`",
            "examination.`id`",
            "examination.`kct`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "total cholesterol is higher than normal",
            "negative measure of degree of coagulation"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory",
            "examination"
        ],
        "columns": [
            "patient.`id`",
            "laboratory.`t-cho`",
            "laboratory.`id`",
            "examination.`ana pattern`",
            "examination.`id`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "total cholesterol is within the normal range",
            "P pattern observed in the sheet of ANA examination"
        ]
    },
    {
        "tables": [
            "laboratory",
            "examination",
            "patient"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`tg`",
            "examination.`id`",
            "examination.`symptoms`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "normal level of triglyceride",
            "other symptoms observed"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`tg`",
            "patient.`id`",
            "patient.`diagnosis`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "highest level of triglyceride within the normal range"
        ]
    },
    {
        "tables": [
            "examination",
            "laboratory",
            "patient"
        ],
        "columns": [
            "examination.`id`",
            "examination.`thrombosis`",
            "laboratory.`id`",
            "laboratory.`cpk`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "no thrombosis",
            "abnormal level of creatinine phosphokinase"
        ]
    },
    {
        "tables": [
            "examination",
            "laboratory",
            "patient"
        ],
        "columns": [
            "examination.`id`",
            "examination.`kct`",
            "examination.`rvvt`",
            "examination.`lac`",
            "laboratory.`id`",
            "laboratory.`cpk`",
            "patient.`id`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "normal range of creatinine phosphokinase",
            "positive measure of degree of coagulation"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`birthday`",
            "patient.`id`",
            "laboratory.`id`",
            "laboratory.`glu`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            ">"
        ],
        "conditions": [
            "oldest patient",
            "blood glucose is abnormal"
        ]
    },
    {
        "tables": [
            "patient",
            "examination",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "examination.`thrombosis`",
            "examination.`id`",
            "laboratory.`id`",
            "laboratory.`glu`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "normal blood glucose",
            "no thrombosis"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`admission`",
            "laboratory.`id`",
            "laboratory.`wbc`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "accepted to the hospital",
            "normal level of white blood cells"
        ]
    },
    {
        "tables": [
            "patient",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "patient.`diagnosis`",
            "laboratory.`id`",
            "laboratory.`wbc`"
        ],
        "sql_keywords": [
            "=",
            "AND",
            "BETWEEN"
        ],
        "conditions": [
            "diagnosed with SLE",
            "normal white blood cell level"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`rbc`",
            "patient.`id`",
            "patient.`admission`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "abnormal level of red blood cell",
            "followed at the outpatient clinic"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient",
            "examination"
        ],
        "columns": [
            "laboratory.`plt`",
            "laboratory.`id`",
            "patient.`id`",
            "patient.`diagnosis`",
            "examination.`id`",
            "examination.`symptoms`",
            "examination.`diagnosis`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "normal platelet level",
            "other symptoms observed"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient",
            "examination"
        ],
        "columns": [
            "laboratory.`id`",
            "laboratory.`plt`",
            "patient.`id`",
            "patient.`diagnosis`",
            "examination.`id`",
            "examination.`diagnosis`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "platelet level within the normal range",
            "diagnosed with MCTD"
        ]
    },
    {
        "tables": [
            "laboratory",
            "patient"
        ],
        "columns": [
            "laboratory.`pt`",
            "laboratory.`id`",
            "patient.`id`",
            "patient.`sex`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "male patients",
            "normal prothrombin time"
        ]
    },
    {
        "tables": [
            "patient",
            "examination",
            "laboratory"
        ],
        "columns": [
            "patient.`id`",
            "examination.`id`",
            "examination.`thrombosis`",
            "laboratory.`id`",
            "laboratory.`pt`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "severe thrombosis",
            "normal prothrombin time"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`last_name`",
            "member.`first_name`",
            "member.`link_to_major`",
            "major.`major_id`",
            "major.`major_name`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": []
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`link_to_major`",
            "major.`major_id`",
            "major.`major_name`",
            "major.`department`",
            "major.`college`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "students in the Student_Club",
            "from the College of Engineering"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`first_name`",
            "member.`last_name`",
            "member.`link_to_major`",
            "major.`department`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "come from the Art and Design Department"
        ]
    },
    {
        "tables": [
            "event",
            "attendance",
            "member"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`",
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "students of the Student_Club",
            "attended the event 'Women's Soccer'"
        ]
    },
    {
        "tables": [
            "event",
            "attendance",
            "member"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`",
            "member.`member_id`",
            "member.`phone`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "Student_Club",
            "attended the event 'Women's Soccer'"
        ]
    },
    {
        "tables": [
            "event",
            "attendance",
            "member"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`",
            "member.`member_id`",
            "member.`t_shirt_size`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "students from the Student_Club",
            "attended the event 'Women's Soccer'",
            "want a T-shirt",
            "T-shirt in medium size"
        ]
    },
    {
        "tables": [
            "event",
            "attendance"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`location`",
            "event.`type`",
            "event.`notes`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`"
        ],
        "sql_keywords": [
            "MAX",
            "COUNT",
            "GROUP BY"
        ],
        "conditions": [
            "highest attendance",
            "students from the Student_Club"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`email`",
            "member.`position`",
            "member.`link_to_major`",
            "major.`major_id`",
            "major.`major_name`",
            "major.`department`",
            "major.`college`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "vice president of the Student_Club"
        ]
    },
    {
        "tables": [
            "event",
            "member",
            "attendance"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "member.`last_name`",
            "member.`member_id`",
            "member.`first_name`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "event names",
            "events attended by Maya Mclean"
        ]
    },
    {
        "tables": [
            "event",
            "member",
            "attendance"
        ],
        "columns": [
            "event.`event_date`",
            "event.`event_id`",
            "event.`event_name`",
            "member.`last_name`",
            "member.`member_id`",
            "member.`first_name`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "YEAR",
            "="
        ],
        "conditions": [
            "events of the Student_Club",
            "Sacha Harrison",
            "2019"
        ]
    },
    {
        "tables": [
            "event",
            "attendance"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`",
            "attendance.`link_to_member`",
            "attendance.`link_to_event`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "events attended by more than 10 members of the Student_Club"
        ]
    },
    {
        "tables": [
            "event",
            "attendance"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`type`",
            "attendance.`link_to_event`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "COUNT"
        ],
        "conditions": [
            "attendance of over 20 students",
            "not fundraisers"
        ]
    },
    {
        "tables": [
            "event",
            "attendance"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "YEAR"
        ],
        "conditions": [
            "meetings in 2020"
        ]
    },
    {
        "tables": [
            "expense"
        ],
        "columns": [
            "expense.`expense_description`",
            "expense.`cost`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "most expensive item",
            "spent in support of club events"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`link_to_major`",
            "major.`major_id`",
            "major.`major_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "majored Environmental Engineering"
        ]
    },
    {
        "tables": [
            "member",
            "attendance",
            "event"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "attendance.`link_to_member`",
            "attendance.`link_to_event`",
            "event.`event_id`",
            "event.`event_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "attended the 'Laugh Out Loud' event"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`last_name`",
            "major.`major_name`",
            "major.`major_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "majored Law and Constitutional Studies"
        ]
    },
    {
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "member.`last_name`",
            "member.`first_name`",
            "member.`zip`",
            "zip_code.`county`",
            "zip_code.`zip_code`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "Sherri Ramsey grew up"
        ]
    },
    {
        "tables": [
            "major",
            "member"
        ],
        "columns": [
            "major.`college`",
            "major.`major_id`",
            "major.`major_name`",
            "member.`last_name`",
            "member.`link_to_major`",
            "member.`member_id`",
            "member.`first_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "college offers the major that Tyler Hewitt took"
        ]
    },
    {
        "tables": [
            "income",
            "member"
        ],
        "columns": [
            "income.`amount`",
            "income.`link_to_member`",
            "member.`member_id`",
            "member.`position`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "WHERE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "event",
            "budget",
            "expense"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`",
            "budget.`budget_id`",
            "budget.`category`",
            "budget.`spent`",
            "budget.`remaining`",
            "budget.`amount`",
            "budget.`event_status`",
            "budget.`link_to_event`",
            "expense.`expense_id`",
            "expense.`expense_description`",
            "expense.`expense_date`",
            "expense.`cost`",
            "expense.`approved`",
            "expense.`link_to_member`",
            "expense.`link_to_budget`"
        ],
        "sql_keywords": [
            "=",
            "SUM"
        ],
        "conditions": [
            "Student_Club members",
            "food",
            "September Meeting"
        ]
    },
    {
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`position`",
            "member.`zip`",
            "zip_code.`city`",
            "zip_code.`state`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "WHERE"
        ],
        "conditions": [
            "city",
            "state",
            "President of the Student_Club",
            "grow up"
        ]
    },
    {
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "member.`first_name`",
            "member.`last_name`",
            "member.`zip`",
            "zip_code.`state`",
            "zip_code.`zip_code`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "grew up in Illinois state"
        ]
    },
    {
        "tables": [
            "expense",
            "budget",
            "event"
        ],
        "columns": [
            "expense.`link_to_budget`",
            "expense.`cost`",
            "budget.`budget_id`",
            "budget.`category`",
            "budget.`link_to_event`",
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`"
        ],
        "sql_keywords": [
            "=",
            "SUM"
        ],
        "conditions": [
            "Student_Club members",
            "spent on advertisement",
            "September Meeting"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`last_name`",
            "member.`link_to_major`",
            "major.`department`",
            "major.`major_name`",
            "major.`major_id`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "Pierce took a major",
            "Guidi took a major"
        ]
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "budget.`amount`",
            "budget.`category`",
            "budget.`link_to_event`"
        ],
        "sql_keywords": [
            "SUM",
            "="
        ],
        "conditions": [
            "October Speaker event"
        ]
    },
    {
        "tables": [
            "event",
            "expense",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "expense.`expense_id`",
            "expense.`expense_description`",
            "expense.`expense_date`",
            "expense.`cost`",
            "expense.`approved`",
            "expense.`link_to_budget`",
            "budget.`budget_id`",
            "budget.`link_to_event`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "expense in October",
            "Meeting on October 8, 2019"
        ]
    },
    {
        "tables": [
            "member",
            "expense"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "expense.`link_to_member`",
            "expense.`expense_date`",
            "expense.`cost`"
        ],
        "sql_keywords": [
            "AVG",
            "SUM",
            "MONTH",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "events on September",
            "events on October"
        ]
    },
    {
        "tables": [
            "event",
            "budget",
            "expense"
        ],
        "columns": [
            "event.`event_date`",
            "event.`event_id`",
            "budget.`link_to_event`",
            "budget.`spent`",
            "expense.`cost`",
            "expense.`link_to_budget`"
        ],
        "sql_keywords": [
            "SUM",
            "WHERE",
            "YEAR",
            "SUBTRACT"
        ],
        "conditions": [
            "year 2019",
            "year 2020"
        ]
    },
    {
        "tables": [
            "event"
        ],
        "columns": [
            "event.`event_name`",
            "event.`location`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "location for \"Spring Budget Review\""
        ]
    },
    {
        "tables": [
            "expense"
        ],
        "columns": [
            "expense.`cost`",
            "expense.`expense_date`",
            "expense.`expense_description`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "cost for the 'Posters'",
            "on 2019/9/4"
        ]
    },
    {
        "tables": [
            "budget"
        ],
        "columns": [
            "budget.`budget_id`",
            "budget.`remaining`",
            "budget.`amount`",
            "budget.`category`"
        ],
        "sql_keywords": [
            "MAX",
            "WHERE"
        ],
        "conditions": [
            "biggest budget for the 'Food'",
            "remaining of it"
        ]
    },
    {
        "tables": [
            "income"
        ],
        "columns": [
            "income.`date_received`",
            "income.`source`",
            "income.`notes`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "fundraising on 2019/9/14"
        ]
    },
    {
        "tables": [
            "major"
        ],
        "columns": [
            "major.`college`",
            "major.`major_name`",
            "major.`department`",
            "major.`major_id`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "member"
        ],
        "columns": [
            "member.`first_name`",
            "member.`last_name`",
            "member.`phone`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "phone number of Carlo Jacobs"
        ]
    },
    {
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "member.`last_name`",
            "member.`zip`",
            "zip_code.`county`",
            "zip_code.`zip_code`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "hometown county for \"Adela O'Gallagher\""
        ]
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`",
            "budget.`budget_id`",
            "budget.`remaining`",
            "budget.`link_to_event`",
            "budget.`event_status`",
            "budget.`amount`",
            "budget.`category`",
            "budget.`spent`"
        ],
        "sql_keywords": [
            "=",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "budgets for 'November Meeting'",
            "exceeded the budget"
        ]
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "budget.`amount`",
            "budget.`link_to_event`"
        ],
        "sql_keywords": [
            "SUM",
            "JOIN",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "event",
            "budget",
            "expense"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`",
            "budget.`budget_id`",
            "budget.`link_to_event`",
            "budget.`event_status`",
            "expense.`expense_id`",
            "expense.`expense_date`",
            "expense.`link_to_budget`",
            "expense.`expense_description`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "="
        ],
        "conditions": [
            "event bought Post Cards, Posters",
            "date 2019/8/20"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`first_name`",
            "member.`last_name`",
            "member.`link_to_major`",
            "major.`major_id`",
            "major.`major_name`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": []
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`email`",
            "member.`position`",
            "member.`last_name`",
            "member.`phone`",
            "member.`link_to_major`",
            "member.`member_id`",
            "member.`zip`",
            "member.`first_name`",
            "member.`t_shirt_size`",
            "major.`department`",
            "major.`college`",
            "major.`major_id`",
            "major.`major_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "=",
            "AND"
        ],
        "conditions": [
            "club members from 'Business' major",
            "wear medium size t-shirt"
        ]
    },
    {
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`zip`",
            "zip_code.`zip_code`",
            "zip_code.`type`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": []
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`email`",
            "member.`position`",
            "member.`t_shirt_size`",
            "member.`phone`",
            "member.`zip`",
            "member.`link_to_major`",
            "major.`major_id`",
            "major.`major_name`",
            "major.`department`",
            "major.`college`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "WHERE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "member.`last_name`",
            "member.`zip`",
            "zip_code.`state`",
            "zip_code.`zip_code`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "hometown state for Sacha Harrison"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`position`",
            "member.`link_to_major`",
            "major.`department`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "President of the club"
        ]
    },
    {
        "tables": [
            "income",
            "member"
        ],
        "columns": [
            "income.`date_received`",
            "income.`source`",
            "income.`link_to_member`",
            "member.`last_name`",
            "member.`member_id`",
            "member.`first_name`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "date",
            "Connor Hilton",
            "paid dues"
        ]
    },
    {
        "tables": [
            "income",
            "member"
        ],
        "columns": [
            "income.`date_received`",
            "income.`source`",
            "income.`link_to_member`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`member_id`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": []
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`",
            "budget.`budget_id`",
            "budget.`remaining`",
            "budget.`link_to_event`",
            "budget.`event_status`",
            "budget.`amount`",
            "budget.`category`",
            "budget.`spent`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "SUM",
            "DIVIDE"
        ],
        "conditions": [
            "budget in Advertisement for 'Yearly Kickoff' meeting more than 'October Meeting'"
        ]
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`",
            "budget.`budget_id`",
            "budget.`remaining`",
            "budget.`link_to_event`",
            "budget.`event_status`",
            "budget.`amount`",
            "budget.`category`",
            "budget.`spent`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "WHERE",
            "JOIN"
        ],
        "conditions": [
            "percentage of budget for Parking to total budget for the 'November Speaker'"
        ]
    },
    {
        "tables": [
            "expense"
        ],
        "columns": [
            "expense.`cost`",
            "expense.`expense_description`"
        ],
        "sql_keywords": [
            "SUM",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "zip_code"
        ],
        "columns": [
            "zip_code.`city`",
            "zip_code.`state`",
            "zip_code.`county`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "major"
        ],
        "columns": [
            "major.`college`",
            "major.`department`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "member.`last_name`",
            "member.`first_name`",
            "member.`zip`",
            "zip_code.`city`",
            "zip_code.`county`",
            "zip_code.`state`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "budget",
            "expense"
        ],
        "columns": [
            "budget.`budget_id`",
            "budget.`remaining`",
            "expense.`expense_description`",
            "expense.`cost`",
            "expense.`expense_date`",
            "expense.`approved`",
            "expense.`link_to_budget`"
        ],
        "sql_keywords": [
            "JOIN",
            "MIN",
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "lowest remaining"
        ]
    },
    {
        "tables": [
            "event",
            "attendance",
            "member"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`",
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`email`",
            "member.`position`",
            "member.`t_shirt_size`",
            "member.`phone`",
            "member.`zip`",
            "member.`link_to_major`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "attended the event 'October Meeting'"
        ]
    },
    {
        "tables": [
            "major",
            "member"
        ],
        "columns": [
            "major.`college`",
            "major.`major_id`",
            "member.`member_id`",
            "member.`link_to_major`"
        ],
        "sql_keywords": [
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`phone`",
            "member.`link_to_major`",
            "major.`major_id`",
            "major.`major_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "phone number \"809-555-3360\""
        ]
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`",
            "budget.`budget_id`",
            "budget.`remaining`",
            "budget.`link_to_event`",
            "budget.`event_status`",
            "budget.`amount`",
            "budget.`category`",
            "budget.`spent`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN"
        ],
        "conditions": [
            "highest budget amount"
        ]
    },
    {
        "tables": [
            "expense",
            "member"
        ],
        "columns": [
            "expense.`cost`",
            "expense.`expense_id`",
            "expense.`approved`",
            "expense.`expense_date`",
            "expense.`link_to_budget`",
            "expense.`expense_description`",
            "expense.`link_to_member`",
            "member.`email`",
            "member.`position`",
            "member.`last_name`",
            "member.`phone`",
            "member.`link_to_major`",
            "member.`member_id`",
            "member.`zip`",
            "member.`first_name`",
            "member.`t_shirt_size`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": []
    },
    {
        "tables": [
            "event",
            "attendance",
            "member"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`",
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN"
        ],
        "conditions": [
            "attended the 'Women's Soccer' event"
        ]
    },
    {
        "tables": [
            "income",
            "member"
        ],
        "columns": [
            "income.`date_received`",
            "income.`link_to_member`",
            "member.`last_name`",
            "member.`member_id`",
            "member.`first_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "member",
            "Casey Mason",
            "received the income"
        ]
    },
    {
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`zip`",
            "zip_code.`zip_code`",
            "zip_code.`state`"
        ],
        "sql_keywords": [
            "EXACT MATCHING"
        ],
        "conditions": [
            "hometowns are from Maryland state"
        ]
    },
    {
        "tables": [
            "member",
            "attendance",
            "event"
        ],
        "columns": [
            "member.`member_id`",
            "member.`phone`",
            "attendance.`link_to_member`",
            "attendance.`link_to_event`",
            "event.`event_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "phone number \"954-555-6240\""
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`first_name`",
            "member.`last_name`",
            "member.`link_to_major`",
            "major.`department`",
            "major.`major_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "DISTINCT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`status`",
            "budget.`link_to_event`",
            "budget.`amount`",
            "budget.`spent`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "MAX",
            "DIVIDE"
        ],
        "conditions": [
            "closed events",
            "highest spend-to-budget ratio"
        ]
    },
    {
        "tables": [
            "member"
        ],
        "columns": [
            "member.`position`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "position of president"
        ]
    },
    {
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "budget.`budget_id`",
            "budget.`remaining`",
            "budget.`link_to_event`",
            "budget.`event_status`",
            "budget.`amount`",
            "budget.`category`",
            "budget.`spent`",
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`"
        ],
        "sql_keywords": [
            "MAX"
        ],
        "conditions": []
    },
    {
        "tables": [
            "event"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`"
        ],
        "sql_keywords": [
            "COUNT",
            "="
        ],
        "conditions": [
            "meeting events",
            "held in 2020"
        ]
    },
    {
        "tables": [
            "budget"
        ],
        "columns": [
            "budget.`category`",
            "budget.`spent`"
        ],
        "sql_keywords": [
            "SUM",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "member",
            "attendance"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "attended more than 7 events"
        ]
    },
    {
        "tables": [
            "member",
            "major",
            "event",
            "attendance"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "major.`major_name`",
            "event.`event_name`",
            "attendance.`link_to_member`",
            "attendance.`link_to_event`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "="
        ],
        "conditions": [
            "majored in interior design",
            "attended the Community Theater event"
        ]
    },
    {
        "tables": [
            "zip_code",
            "member"
        ],
        "columns": [
            "zip_code.`zip_code`",
            "zip_code.`city`",
            "zip_code.`state`",
            "member.`last_name`",
            "member.`zip`",
            "member.`first_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "students from Georgetown",
            "South Carolina"
        ]
    },
    {
        "tables": [
            "income",
            "member"
        ],
        "columns": [
            "income.`amount`",
            "income.`link_to_member`",
            "member.`last_name`",
            "member.`member_id`",
            "member.`first_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "income generated by Grant Gilmour"
        ]
    },
    {
        "tables": [
            "income",
            "member"
        ],
        "columns": [
            "income.`date_received`",
            "income.`notes`",
            "income.`income_id`",
            "income.`source`",
            "income.`amount`",
            "income.`link_to_member`",
            "member.`email`",
            "member.`last_name`",
            "member.`position`",
            "member.`phone`",
            "member.`link_to_major`",
            "member.`member_id`",
            "member.`zip`",
            "member.`first_name`",
            "member.`t_shirt_size`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "income more than $40"
        ]
    },
    {
        "tables": [
            "event",
            "budget",
            "expense"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "budget.`budget_id`",
            "budget.`link_to_event`",
            "expense.`link_to_budget`",
            "expense.`cost`"
        ],
        "sql_keywords": [
            "SUM",
            "JOIN",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "budget",
            "event",
            "member"
        ],
        "columns": [
            "budget.`budget_id`",
            "budget.`link_to_event`",
            "event.`event_id`",
            "event.`event_name`",
            "member.`last_name`",
            "member.`member_id`",
            "member.`first_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "student entrusted to manage budget",
            "Yearly Kickoff"
        ]
    },
    {
        "tables": [
            "income",
            "member"
        ],
        "columns": [
            "income.`date_received`",
            "income.`notes`",
            "income.`income_id`",
            "income.`source`",
            "income.`amount`",
            "income.`link_to_member`",
            "member.`email`",
            "member.`last_name`",
            "member.`position`",
            "member.`phone`",
            "member.`link_to_major`",
            "member.`member_id`",
            "member.`zip`",
            "member.`first_name`",
            "member.`t_shirt_size`"
        ],
        "sql_keywords": [
            "MAX",
            "JOIN",
            "ON"
        ],
        "conditions": [
            "generate the highest income",
            "full name",
            "income source"
        ]
    },
    {
        "tables": [
            "event",
            "budget",
            "expense"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`",
            "budget.`budget_id`",
            "budget.`category`",
            "budget.`spent`",
            "budget.`remaining`",
            "budget.`amount`",
            "budget.`event_status`",
            "budget.`link_to_event`",
            "expense.`expense_id`",
            "expense.`expense_description`",
            "expense.`expense_date`",
            "expense.`cost`",
            "expense.`approved`",
            "expense.`link_to_member`",
            "expense.`link_to_budget`"
        ],
        "sql_keywords": [
            "MIN",
            "JOIN",
            "ON"
        ],
        "conditions": [
            "lowest cost"
        ]
    },
    {
        "tables": [
            "expense",
            "event"
        ],
        "columns": [
            "expense.`cost`",
            "expense.`link_to_budget`",
            "event.`event_id`",
            "event.`event_name`"
        ],
        "sql_keywords": [
            "SUM",
            "WHERE",
            "DIVIDE"
        ],
        "conditions": [
            "total cost for all event",
            "cost for Yearly Kickoff event"
        ]
    },
    {
        "tables": [
            "major",
            "member"
        ],
        "columns": [
            "major.`major_name`",
            "major.`major_id`",
            "member.`member_id`",
            "member.`link_to_major`"
        ],
        "sql_keywords": [
            "SUM",
            "="
        ],
        "conditions": [
            "students majored in finance",
            "students majored in physics"
        ]
    },
    {
        "tables": [
            "income"
        ],
        "columns": [
            "income.`date_received`",
            "income.`source`",
            "income.`amount`"
        ],
        "sql_keywords": [
            "MAX",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "top source of funds",
            "received in September 2019",
            "based on their amount"
        ]
    },
    {
        "tables": [
            "member"
        ],
        "columns": [
            "member.`first_name`",
            "member.`last_name`",
            "member.`email`",
            "member.`position`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "full name",
            "email address",
            "Student_Club's Secretary"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`email`",
            "member.`position`",
            "member.`t_shirt_size`",
            "member.`phone`",
            "member.`zip`",
            "member.`link_to_major`",
            "major.`major_id`",
            "major.`major_name`",
            "major.`department`",
            "major.`college`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "major in 'Physics Teaching'"
        ]
    },
    {
        "tables": [
            "event",
            "attendance",
            "member"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`",
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "event 'Community Theater'",
            "year 2019"
        ]
    },
    {
        "tables": [
            "member",
            "attendance",
            "event",
            "major"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`link_to_major`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`",
            "event.`event_id`",
            "event.`event_name`",
            "major.`major_id`",
            "major.`major_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "COUNT",
            "DISTINCT"
        ],
        "conditions": [
            "number of events attended by Luisa Guidi",
            "her major"
        ]
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`",
            "budget.`link_to_event`",
            "budget.`event_status`",
            "budget.`category`",
            "budget.`spent`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "DIVIDE",
            "WHERE",
            "AND"
        ],
        "conditions": []
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "budget.`spent`",
            "budget.`category`",
            "budget.`link_to_event`"
        ],
        "sql_keywords": [
            "JOIN",
            "MAX",
            "WHERE"
        ],
        "conditions": [
            "highest amount spent on advertisement"
        ]
    },
    {
        "tables": [
            "member",
            "event",
            "attendance"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "event.`event_id`",
            "event.`event_name`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`"
        ],
        "sql_keywords": [
            "EXISTS",
            "JOIN",
            "="
        ],
        "conditions": [
            "Maya Mclean attended the 'Women's Soccer' event"
        ]
    },
    {
        "tables": [
            "event"
        ],
        "columns": [
            "event.`event_date`",
            "event.`type`",
            "event.`event_id`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "BETWEEN",
            "="
        ],
        "conditions": [
            "events hold by the Student_Club in 2019",
            "events related to 'Community Service'"
        ]
    },
    {
        "tables": [
            "event",
            "expense",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "expense.`cost`",
            "expense.`expense_description`",
            "expense.`link_to_budget`",
            "budget.`budget_id`",
            "budget.`link_to_event`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": []
    },
    {
        "tables": [
            "member"
        ],
        "columns": [
            "member.`t_shirt_size`"
        ],
        "sql_keywords": [
            "COUNT",
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "most popular size of t-shirt",
            "ordered by the club members"
        ]
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`status`",
            "budget.`budget_id`",
            "budget.`remaining`",
            "budget.`link_to_event`"
        ],
        "sql_keywords": [
            "=",
            "MIN"
        ],
        "conditions": [
            "cost has exceeded the budget the most"
        ]
    },
    {
        "tables": [
            "event",
            "budget",
            "expense"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "budget.`budget_id`",
            "budget.`link_to_event`",
            "expense.`link_to_budget`",
            "expense.`expense_description`",
            "expense.`cost`",
            "expense.`approved`"
        ],
        "sql_keywords": [
            "JOIN",
            "SUM",
            "GROUP BY"
        ],
        "conditions": [
            "type of expenses",
            "total value approved",
            "October Meeting event"
        ]
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "budget.`amount`",
            "budget.`category`",
            "budget.`link_to_event`"
        ],
        "sql_keywords": [
            "SUM",
            "JOIN",
            "ORDER BY"
        ],
        "conditions": [
            "amount budgeted for 'April Speaker' event",
            "budgeted categories for 'April Speaker' event",
            "ascending order based on their amount budgeted"
        ]
    },
    {
        "tables": [
            "budget"
        ],
        "columns": [
            "budget.`category`",
            "budget.`amount`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "highest budgeted amount"
        ]
    },
    {
        "tables": [
            "budget"
        ],
        "columns": [
            "budget.`category`",
            "budget.`budget_id`",
            "budget.`amount`"
        ],
        "sql_keywords": [
            "MAX",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "top three",
            "most budgeted amount"
        ]
    },
    {
        "tables": [
            "expense"
        ],
        "columns": [
            "expense.`cost`",
            "expense.`expense_description`"
        ],
        "sql_keywords": [
            "SUM",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "expense"
        ],
        "columns": [
            "expense.`cost`",
            "expense.`expense_date`"
        ],
        "sql_keywords": [
            "SUM",
            "="
        ],
        "conditions": [
            "date 8/20/2019"
        ]
    },
    {
        "tables": [
            "member",
            "expense"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "expense.`cost`",
            "expense.`link_to_member`"
        ],
        "sql_keywords": [
            "JOIN",
            "SUM",
            "GROUP BY"
        ],
        "conditions": [
            "member id \"rec4BLdZHS2Blfp4v\""
        ]
    },
    {
        "tables": [
            "expense",
            "member"
        ],
        "columns": [
            "expense.`expense_description`",
            "expense.`link_to_member`",
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "expense",
            "member"
        ],
        "columns": [
            "expense.`cost`",
            "expense.`expense_date`",
            "expense.`expense_description`",
            "expense.`link_to_member`",
            "member.`last_name`",
            "member.`member_id`",
            "member.`first_name`",
            "member.`t_shirt_size`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "LIKE"
        ],
        "conditions": [
            "X-Large in size of tee shirt"
        ]
    },
    {
        "tables": [
            "member",
            "expense",
            "zip_code"
        ],
        "columns": [
            "member.`member_id`",
            "member.`zip`",
            "expense.`link_to_member`",
            "expense.`cost`",
            "zip_code.`zip_code`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "<"
        ],
        "conditions": [
            "incurred less than 50USD"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`last_name`",
            "member.`first_name`",
            "member.`link_to_major`",
            "major.`major_name`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": []
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`position`",
            "member.`link_to_major`",
            "major.`major_id`",
            "major.`major_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "joined major of Business"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`email`",
            "member.`position`",
            "member.`t_shirt_size`",
            "member.`phone`",
            "member.`zip`",
            "member.`link_to_major`",
            "major.`major_id`",
            "major.`major_name`",
            "major.`department`",
            "major.`college`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "members of Business",
            "Medium size of tee shirt"
        ]
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`",
            "budget.`budget_id`",
            "budget.`remaining`",
            "budget.`link_to_event`",
            "budget.`event_status`",
            "budget.`amount`",
            "budget.`category`",
            "budget.`spent`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "remaining budget more than 30 USD"
        ]
    },
    {
        "tables": [
            "event"
        ],
        "columns": [
            "event.`type`",
            "event.`location`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "events held at MU 215"
        ]
    },
    {
        "tables": [
            "event"
        ],
        "columns": [
            "event.`event_date`",
            "event.`type`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "event taken place in 2020-03-24T12:00:00"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`email`",
            "member.`position`",
            "member.`t_shirt_size`",
            "member.`phone`",
            "member.`zip`",
            "member.`link_to_major`",
            "major.`major_id`",
            "major.`major_name`",
            "major.`department`",
            "major.`college`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "WHERE"
        ],
        "conditions": [
            "Vice President has joined"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`position`",
            "member.`link_to_major`",
            "member.`member_id`",
            "major.`major_id`",
            "major.`major_name`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "DISTINCT"
        ],
        "conditions": [
            "members who are major Business"
        ]
    },
    {
        "tables": [
            "event"
        ],
        "columns": [
            "event.`type`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "events held at MU 215"
        ]
    },
    {
        "tables": [
            "income"
        ],
        "columns": [
            "income.`date_received`",
            "income.`notes`",
            "income.`income_id`",
            "income.`source`",
            "income.`amount`",
            "income.`link_to_member`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "income with an amount of 50"
        ]
    },
    {
        "tables": [
            "member"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`email`",
            "member.`position`",
            "member.`t_shirt_size`",
            "member.`phone`",
            "member.`zip`",
            "member.`link_to_major`"
        ],
        "sql_keywords": [
            "=",
            "COUNT"
        ],
        "conditions": [
            "extra large t-shirt size"
        ]
    },
    {
        "tables": [
            "major"
        ],
        "columns": [
            "major.`college`",
            "major.`major_name`",
            "major.`department`",
            "major.`major_id`"
        ],
        "sql_keywords": [
            "=",
            "COUNT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`last_name`",
            "major.`department`",
            "major.`college`",
            "major.`major_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "SELECT"
        ],
        "conditions": [
            "major in environmental engineering",
            "include department name",
            "include college name"
        ]
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`",
            "budget.`budget_id`",
            "budget.`remaining`",
            "budget.`link_to_event`",
            "budget.`event_status`",
            "budget.`amount`",
            "budget.`category`",
            "budget.`spent`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "events located at MU 215",
            "guest speaker type",
            "0 budget spent"
        ]
    },
    {
        "tables": [
            "member",
            "major",
            "zip_code"
        ],
        "columns": [
            "member.`first_name`",
            "member.`last_name`",
            "member.`position`",
            "member.`link_to_major`",
            "major.`department`",
            "major.`major_name`",
            "zip_code.`city`",
            "zip_code.`state`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "INTERSECT"
        ],
        "conditions": [
            "members enrolled under electrical and computer engineering department"
        ]
    },
    {
        "tables": [
            "event",
            "attendance",
            "member"
        ],
        "columns": [
            "event.`event_name`",
            "event.`type`",
            "event.`location`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`",
            "member.`member_id`",
            "member.`position`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "attended by the vice president of the Student_Club",
            "located at 900 E. Washington St."
        ]
    },
    {
        "tables": [
            "expense",
            "member"
        ],
        "columns": [
            "expense.`expense_date`",
            "expense.`expense_description`",
            "expense.`link_to_member`",
            "member.`last_name`",
            "member.`position`",
            "member.`member_id`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "last name",
            "position",
            "student",
            "bought pizza",
            "09/10/2019"
        ]
    },
    {
        "tables": [
            "member",
            "attendance",
            "event"
        ],
        "columns": [
            "member.`member_id`",
            "member.`last_name`",
            "member.`position`",
            "attendance.`link_to_event`",
            "attendance.`link_to_member`",
            "event.`event_id`",
            "event.`event_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "WHERE"
        ],
        "conditions": [
            "last name of the members of the club",
            "attended the women's soccer event"
        ]
    },
    {
        "tables": [
            "member",
            "income"
        ],
        "columns": [
            "member.`member_id`",
            "member.`t_shirt_size`",
            "member.`position`",
            "income.`amount`",
            "income.`link_to_member`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "COUNT",
            "SUM"
        ],
        "conditions": [
            "t-shirt size of medium",
            "amount 50 received by the Student_Club"
        ]
    },
    {
        "tables": [
            "zip_code"
        ],
        "columns": [
            "zip_code.`state`",
            "zip_code.`type`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "countries have zip codes",
            "zip codes with post office boxes"
        ]
    },
    {
        "tables": [
            "zip_code"
        ],
        "columns": [
            "zip_code.`zip_code`",
            "zip_code.`type`",
            "zip_code.`city`",
            "zip_code.`county`",
            "zip_code.`state`",
            "zip_code.`short_state`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "zip codes with post office boxes",
            "country of San Juan Municipio",
            "state is Puerto Rico"
        ]
    },
    {
        "tables": [
            "event"
        ],
        "columns": [
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`status`"
        ],
        "sql_keywords": [
            "=",
            "AND",
            "BETWEEN"
        ],
        "conditions": [
            "closed event",
            "game",
            "closed from 3/15/2019 to 3/20/2020"
        ]
    },
    {
        "tables": [
            "member",
            "expense",
            "event",
            "attendance"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "expense.`link_to_member`",
            "expense.`expense_id`",
            "expense.`expense_description`",
            "expense.`expense_date`",
            "expense.`cost`",
            "expense.`approved`",
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`location`",
            "event.`type`",
            "event.`notes`",
            "attendance.`link_to_member`",
            "attendance.`link_to_event`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "paid more than 50 dollar"
        ]
    },
    {
        "tables": [
            "member",
            "expense",
            "attendance",
            "event"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "expense.`link_to_member`",
            "expense.`approved`",
            "expense.`expense_date`",
            "attendance.`link_to_member`",
            "attendance.`link_to_event`",
            "event.`event_id`",
            "event.`event_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "approved from 1/10/2019 to 11/19/2019",
            "attended the event"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`first_name`",
            "member.`link_to_major`",
            "major.`college`",
            "major.`major_id`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "first name is Katy",
            "link to the major 'rec1N0upiVLy5esTO'"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`phone`",
            "member.`link_to_major`",
            "major.`major_id`",
            "major.`major_name`",
            "major.`college`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "majored in business",
            "College of Agriculture and Applied Sciences"
        ]
    },
    {
        "tables": [
            "expense",
            "member"
        ],
        "columns": [
            "expense.`expense_id`",
            "expense.`expense_date`",
            "expense.`cost`",
            "expense.`link_to_member`",
            "member.`email`",
            "member.`member_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "BETWEEN",
            ">"
        ],
        "conditions": [
            "paid more than 20 dollars",
            "from 9/10/2019 to 11/19/2019"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`email`",
            "member.`position`",
            "member.`t_shirt_size`",
            "member.`phone`",
            "member.`zip`",
            "member.`link_to_major`",
            "major.`major_id`",
            "major.`major_name`",
            "major.`department`",
            "major.`college`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "COUNT"
        ],
        "conditions": [
            "education major in the College of Education & Human Services"
        ]
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`",
            "budget.`budget_id`",
            "budget.`remaining`",
            "budget.`link_to_event`",
            "budget.`event_status`",
            "budget.`amount`",
            "budget.`category`",
            "budget.`spent`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "SUM",
            "COUNT",
            "GROUP BY"
        ],
        "conditions": [
            "events that went over budget"
        ]
    },
    {
        "tables": [
            "event"
        ],
        "columns": [
            "event.`event_id`",
            "event.`location`",
            "event.`status`"
        ],
        "sql_keywords": [
            "=",
            "BETWEEN"
        ],
        "conditions": [
            "event ID",
            "location",
            "status",
            "events conducted from November 2019 to March 2020"
        ]
    },
    {
        "tables": [
            "expense"
        ],
        "columns": [
            "expense.`cost`",
            "expense.`expense_id`",
            "expense.`expense_description`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "expenses spend more than fifty dollars on average"
        ]
    },
    {
        "tables": [
            "member"
        ],
        "columns": [
            "member.`first_name`",
            "member.`last_name`",
            "member.`t_shirt_size`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "t-shirt size is extra large"
        ]
    },
    {
        "tables": [
            "zip_code"
        ],
        "columns": [
            "zip_code.`type`",
            "zip_code.`zip_code`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_name`",
            "event.`location`",
            "budget.`remaining`",
            "budget.`link_to_event`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "underspend its budget"
        ]
    },
    {
        "tables": [
            "event",
            "expense",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "expense.`cost`",
            "expense.`expense_description`",
            "budget.`link_to_event`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            ">",
            "<"
        ],
        "conditions": [
            "expenses for pizza",
            "more than fifty dollars",
            "less than a hundred dollars"
        ]
    },
    {
        "tables": [
            "expense",
            "member",
            "major"
        ],
        "columns": [
            "expense.`link_to_member`",
            "expense.`cost`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`link_to_major`",
            "major.`major_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            ">"
        ],
        "conditions": [
            "spend more than a hundred dollars on an expense"
        ]
    },
    {
        "tables": [
            "event",
            "income",
            "member",
            "zip_code"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`location`",
            "income.`income_id`",
            "income.`date_received`",
            "income.`amount`",
            "income.`link_to_member`",
            "member.`member_id`",
            "member.`zip`",
            "zip_code.`zip_code`",
            "zip_code.`city`",
            "zip_code.`county`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "more than forty incomes",
            "list the city",
            "list the country"
        ]
    },
    {
        "tables": [
            "expense",
            "member",
            "event"
        ],
        "columns": [
            "expense.`link_to_member`",
            "expense.`cost`",
            "expense.`link_to_budget`",
            "expense.`expense_date`",
            "expense.`expense_id`",
            "expense.`approved`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`member_id`",
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`location`",
            "event.`type`",
            "event.`notes`",
            "event.`status`"
        ],
        "sql_keywords": [
            "MAX",
            "COUNT",
            "JOIN",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "incurred expenses in more than one event",
            "paid the most amount"
        ]
    },
    {
        "tables": [
            "expense",
            "member"
        ],
        "columns": [
            "expense.`cost`",
            "expense.`link_to_member`",
            "member.`position`",
            "member.`member_id`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "SUM",
            "COUNT",
            "GROUP BY"
        ],
        "conditions": [
            "position other than a member"
        ]
    },
    {
        "tables": [
            "event",
            "budget",
            "expense"
        ],
        "columns": [
            "event.`event_name`",
            "event.`event_id`",
            "budget.`budget_id`",
            "budget.`link_to_event`",
            "budget.`category`",
            "budget.`spent`",
            "budget.`remaining`",
            "budget.`amount`",
            "budget.`event_status`",
            "expense.`link_to_budget`",
            "expense.`expense_description`",
            "expense.`expense_date`",
            "expense.`cost`",
            "expense.`approved`",
            "expense.`link_to_member`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "HAVING",
            "SUM",
            "COUNT",
            "AVG"
        ],
        "conditions": [
            "less than average parking cost"
        ]
    },
    {
        "tables": [
            "event",
            "expense",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "event.`event_date`",
            "event.`type`",
            "event.`notes`",
            "event.`location`",
            "event.`status`",
            "expense.`expense_id`",
            "expense.`expense_description`",
            "expense.`expense_date`",
            "expense.`cost`",
            "expense.`approved`",
            "expense.`link_to_member`",
            "expense.`link_to_budget`",
            "budget.`budget_id`",
            "budget.`category`",
            "budget.`spent`",
            "budget.`remaining`",
            "budget.`amount`",
            "budget.`event_status`",
            "budget.`link_to_event`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "GROUP BY",
            "JOIN"
        ],
        "conditions": []
    },
    {
        "tables": [
            "expense",
            "budget"
        ],
        "columns": [
            "expense.`expense_id`",
            "expense.`expense_date`",
            "expense.`link_to_budget`",
            "expense.`expense_description`",
            "expense.`link_to_member`",
            "expense.`approved`",
            "expense.`cost`",
            "budget.`budget_id`",
            "budget.`remaining`",
            "budget.`link_to_event`",
            "budget.`event_status`",
            "budget.`amount`",
            "budget.`category`",
            "budget.`spent`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "MAX",
            "GROUP BY"
        ],
        "conditions": [
            "budget allowed the most money for water",
            "budget allowed the most money for chips",
            "budget allowed the most money for cookies"
        ]
    },
    {
        "tables": [
            "expense",
            "member"
        ],
        "columns": [
            "expense.`cost`",
            "expense.`link_to_member`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`member_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "top five members",
            "spend the most money",
            "descending order of spending"
        ]
    },
    {
        "tables": [
            "member",
            "expense"
        ],
        "columns": [
            "member.`member_id`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`phone`",
            "expense.`cost`",
            "expense.`link_to_member`"
        ],
        "sql_keywords": [
            "JOIN",
            "AVG",
            ">"
        ],
        "conditions": [
            "spend more than average on each expense"
        ]
    },
    {
        "tables": [
            "zip_code",
            "member"
        ],
        "columns": [
            "zip_code.`state`",
            "zip_code.`zip_code`",
            "member.`position`",
            "member.`zip`"
        ],
        "sql_keywords": [
            "SUM",
            "COUNT",
            "DIVIDE",
            "SUBTRACT"
        ],
        "conditions": [
            "members in New Jersey",
            "members in Vermont"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`last_name`",
            "member.`link_to_major`",
            "major.`major_name`",
            "major.`department`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "major of Garrett Gerke",
            "department it belongs to"
        ]
    },
    {
        "tables": [
            "expense",
            "member"
        ],
        "columns": [
            "expense.`cost`",
            "expense.`expense_description`",
            "expense.`link_to_member`",
            "member.`last_name`",
            "member.`member_id`",
            "member.`first_name`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "spent money for water",
            "spent money for veggie tray",
            "spent money for supplies",
            "include the cost of it"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`last_name`",
            "member.`phone`",
            "major.`major_name`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "Elementary Education major"
        ]
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "budget.`category`",
            "budget.`amount`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "category for 'January Speaker' event",
            "amount budgeted for that category"
        ]
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "budget.`link_to_event`",
            "budget.`category`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "event names which were budgeted for the food"
        ]
    },
    {
        "tables": [
            "income",
            "member"
        ],
        "columns": [
            "income.`date_received`",
            "income.`amount`",
            "income.`link_to_member`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`member_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "received funds on the date of 9/9/2019",
            "include the amount received"
        ]
    },
    {
        "tables": [
            "budget",
            "expense"
        ],
        "columns": [
            "budget.`category`",
            "budget.`budget_id`",
            "expense.`link_to_budget`",
            "expense.`expense_description`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": [
            "expense 'Posters'"
        ]
    },
    {
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.`first_name`",
            "member.`last_name`",
            "member.`position`",
            "member.`link_to_major`",
            "major.`college`",
            "major.`major_id`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "position of 'Secretary'",
            "list which college the club member belongs to"
        ]
    },
    {
        "tables": [
            "event",
            "budget"
        ],
        "columns": [
            "event.`event_id`",
            "event.`event_name`",
            "budget.`link_to_event`",
            "budget.`amount`",
            "budget.`category`",
            "budget.`spent`"
        ],
        "sql_keywords": [
            "SUM",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "total amount spent on speaker gifts",
            "list the name of the event they were spent on"
        ]
    },
    {
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "member.`last_name`",
            "member.`first_name`",
            "member.`zip`",
            "zip_code.`city`",
            "zip_code.`zip_code`"
        ],
        "sql_keywords": [
            "JOIN",
            "="
        ],
        "conditions": []
    },
    {
        "tables": [
            "zip_code",
            "member"
        ],
        "columns": [
            "zip_code.`city`",
            "zip_code.`state`",
            "zip_code.`zip_code`",
            "member.`first_name`",
            "member.`last_name`",
            "member.`position`",
            "member.`zip`"
        ],
        "sql_keywords": [
            "JOIN",
            "=",
            "AND"
        ],
        "conditions": [
            "hometown of Lincolnton, North Carolina",
            "zip code of 28092"
        ]
    },
    {
        "tables": [
            "gasstations"
        ],
        "columns": [
            "gasstations.`gasstationid`",
            "gasstations.`segment`",
            "gasstations.`country`"
        ],
        "sql_keywords": [
            "=",
            "COUNT"
        ],
        "conditions": [
            "gas stations in CZE",
            "Premium gas"
        ]
    },
    {
        "tables": [
            "customers"
        ],
        "columns": [
            "customers.`currency`"
        ],
        "sql_keywords": [
            "COUNT",
            "="
        ],
        "conditions": [
            "pay in EUR",
            "pay in CZK"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "EXACT MATCHING",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "year 2012",
            "least consumption",
            "LAM"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "AVG",
            "BETWEEN",
            "AND",
            "GROUP BY"
        ],
        "conditions": [
            "average monthly consumption",
            "customers in SME",
            "year 2013"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`currency`",
            "yearmonth.`customerid`",
            "yearmonth.`date`",
            "yearmonth.`consumption`"
        ],
        "sql_keywords": [
            "=",
            "BETWEEN"
        ],
        "conditions": [
            "paying in CZK",
            "consumed the most gas",
            "in 2011"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "AND"
        ],
        "conditions": [
            "consumption of less than 30,000",
            "year 2012"
        ]
    },
    {
        "tables": [
            "yearmonth",
            "customers"
        ],
        "columns": [
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`",
            "customers.`customerid`",
            "customers.`currency`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "SUM",
            "CASE"
        ],
        "conditions": [
            "CZK-paying customers",
            "EUR-paying customers",
            "2012"
        ]
    },
    {
        "tables": [
            "yearmonth",
            "customers"
        ],
        "columns": [
            "yearmonth.`date`",
            "yearmonth.`consumption`",
            "yearmonth.`customerid`",
            "customers.`customerid`",
            "customers.`currency`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "gas use",
            "paid in EUR"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`segment`",
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "GROUP BY",
            "ORDER BY",
            "ASC"
        ],
        "conditions": [
            "least consumption"
        ]
    },
    {
        "tables": [
            "customers",
            "transactions_1k",
            "gasstations",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`currency`",
            "transactions_1k.`date`",
            "transactions_1k.`customerid`",
            "transactions_1k.`amount`",
            "transactions_1k.`gasstationid`",
            "gasstations.`gasstationid`",
            "gasstations.`country`",
            "yearmonth.`date`",
            "yearmonth.`customerid`",
            "yearmonth.`consumption`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "consumption of gas",
            "paid in CZK"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth",
            "gasstations"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`",
            "gasstations.`segment`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "gas consumption peak month",
            "SME customers",
            "2013"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "GROUP BY",
            "HAVING",
            "MIN",
            "SUM",
            "BETWEEN"
        ],
        "conditions": [
            "annual average consumption",
            "least amount of consumption",
            "paid in CZK",
            "for 2013",
            "between SME and LAM",
            "between LAM and KAM",
            "between KAM and SME"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`segment`",
            "customers.`customerid`",
            "customers.`currency`",
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "biggest percentage increases in consumption paid in EUR between 2012 and 2013",
            "lowest percentage increases in consumption paid in EUR between 2012 and 2013"
        ]
    },
    {
        "tables": [
            "yearmonth",
            "customers"
        ],
        "columns": [
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`",
            "customers.`customerid`"
        ],
        "sql_keywords": [
            "SUM",
            "WHERE"
        ],
        "conditions": [
            "customer 6",
            "between August and November 2013"
        ]
    },
    {
        "tables": [
            "gasstations"
        ],
        "columns": [
            "gasstations.`gasstationid`",
            "gasstations.`segment`",
            "gasstations.`chainid`",
            "gasstations.`country`"
        ],
        "sql_keywords": [
            "INTERSECT"
        ],
        "conditions": [
            "discount gas stations in the Czech Republic",
            "discount gas stations in Slovakia"
        ]
    },
    {
        "tables": [
            "yearmonth",
            "customers"
        ],
        "columns": [
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`",
            "customers.`customerid`"
        ],
        "sql_keywords": [
            "=",
            "DISTINCT"
        ],
        "conditions": [
            "customer 7 consuming in April 2013",
            "customer 5 consuming in April 2013"
        ]
    },
    {
        "tables": [
            "customers",
            "transactions_1k"
        ],
        "columns": [
            "customers.`segment`",
            "customers.`customerid`",
            "customers.`currency`",
            "transactions_1k.`customerid`",
            "transactions_1k.`amount`",
            "transactions_1k.`price`",
            "transactions_1k.`transactionid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "SUM",
            "GROUP BY"
        ],
        "conditions": [
            "more SMEs pay in Czech koruna than in euros"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "customers.`currency`",
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "=",
            "AND",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "used the Euro as their currency",
            "had the highest consumption in October 2013"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": []
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "SUM",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "KAM customers",
            "May 2013"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "yearmonth.`consumption`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "WHERE",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "consumed more than 46.73"
        ]
    },
    {
        "tables": [
            "gasstations"
        ],
        "columns": [
            "gasstations.`gasstationid`",
            "gasstations.`segment`",
            "gasstations.`country`"
        ],
        "sql_keywords": [
            "=",
            "GROUP BY",
            "COUNT"
        ],
        "conditions": [
            "country",
            "value for money gas stations",
            "total number of value for money gas stations"
        ]
    },
    {
        "tables": [
            "customers"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "customers.`currency`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "KAM customers",
            "pay in euros"
        ]
    },
    {
        "tables": [
            "yearmonth",
            "customers"
        ],
        "columns": [
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`",
            "customers.`customerid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "consumed more than 528.3"
        ]
    },
    {
        "tables": [
            "gasstations"
        ],
        "columns": [
            "gasstations.`gasstationid`",
            "gasstations.`segment`",
            "gasstations.`country`"
        ],
        "sql_keywords": [
            "=",
            "COUNT"
        ],
        "conditions": [
            "Slovakian gas stations",
            "premium"
        ]
    },
    {
        "tables": [
            "yearmonth",
            "customers"
        ],
        "columns": [
            "yearmonth.`customerid`",
            "yearmonth.`date`",
            "yearmonth.`consumption`",
            "customers.`customerid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "September 2013"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`segment`",
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "GROUP BY",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "consumed the least",
            "September 2013"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "customers.`currency`",
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "="
        ],
        "conditions": [
            "SME customer",
            "consumed the least",
            "June 2012"
        ]
    },
    {
        "tables": [
            "yearmonth"
        ],
        "columns": [
            "yearmonth.`consumption`",
            "yearmonth.`date`"
        ],
        "sql_keywords": [
            "MAX",
            "="
        ],
        "conditions": [
            "year 2012"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`currency`",
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "SUM",
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "use euro as their currency"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "products",
            "yearmonth"
        ],
        "columns": [
            "transactions_1k.`productid`",
            "transactions_1k.`date`",
            "products.`description`",
            "products.`productid`",
            "yearmonth.`date`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "consumed in September, 2013"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "gasstations",
            "yearmonth"
        ],
        "columns": [
            "transactions_1k.`date`",
            "transactions_1k.`gasstationid`",
            "transactions_1k.`transactionid`",
            "gasstations.`gasstationid`",
            "gasstations.`country`",
            "yearmonth.`date`",
            "yearmonth.`customerid`",
            "yearmonth.`consumption`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "DISTINCT"
        ],
        "conditions": [
            "transactions taken place in June, 2013"
        ]
    },
    {
        "tables": [
            "customers",
            "gasstations",
            "transactions_1k"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "customers.`currency`",
            "gasstations.`gasstationid`",
            "gasstations.`segment`",
            "gasstations.`country`",
            "gasstations.`chainid`",
            "transactions_1k.`transactionid`",
            "transactions_1k.`customerid`",
            "transactions_1k.`amount`",
            "transactions_1k.`date`",
            "transactions_1k.`gasstationid`",
            "transactions_1k.`price`",
            "transactions_1k.`productid`",
            "transactions_1k.`cardid`",
            "transactions_1k.`time`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "="
        ],
        "conditions": [
            "transactions in euro"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "products",
            "customers"
        ],
        "columns": [
            "transactions_1k.`productid`",
            "transactions_1k.`customerid`",
            "products.`description`",
            "products.`productid`",
            "customers.`customerid`",
            "customers.`currency`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE"
        ],
        "conditions": [
            "product description",
            "transactions",
            "euro"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "yearmonth"
        ],
        "columns": [
            "transactions_1k.`date`",
            "transactions_1k.`amount`",
            "transactions_1k.`price`",
            "yearmonth.`date`"
        ],
        "sql_keywords": [
            "AVG",
            "SUM",
            "WHERE"
        ],
        "conditions": [
            "transactions taken place in January, 2012"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`currency`",
            "yearmonth.`customerid`",
            "yearmonth.`consumption`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "paid in euro",
            "monthly consumption of over 1000"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "gasstations",
            "products"
        ],
        "columns": [
            "transactions_1k.`transactionid`",
            "transactions_1k.`gasstationid`",
            "transactions_1k.`productid`",
            "gasstations.`gasstationid`",
            "gasstations.`country`",
            "products.`productid`",
            "products.`description`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "transactions taken place in the gas stations",
            "in the Czech Republic"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "gasstations"
        ],
        "columns": [
            "transactions_1k.`time`",
            "transactions_1k.`gasstationid`",
            "gasstations.`chainid`",
            "gasstations.`gasstationid`"
        ],
        "sql_keywords": [
            "DISTINCT"
        ],
        "conditions": [
            "transactions taken place in the gas stations",
            "chain no. 11"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "gasstations"
        ],
        "columns": [
            "transactions_1k.`transactionid`",
            "transactions_1k.`price`",
            "transactions_1k.`gasstationid`",
            "gasstations.`gasstationid`",
            "gasstations.`country`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            ">",
            "COUNT"
        ],
        "conditions": [
            "transactions taken place in the gas station in the Czech Republic",
            "price of over 1000"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "gasstations"
        ],
        "columns": [
            "transactions_1k.`date`",
            "transactions_1k.`transactionid`",
            "transactions_1k.`customerid`",
            "transactions_1k.`amount`",
            "transactions_1k.`gasstationid`",
            "transactions_1k.`price`",
            "transactions_1k.`productid`",
            "transactions_1k.`cardid`",
            "transactions_1k.`time`",
            "gasstations.`gasstationid`",
            "gasstations.`segment`",
            "gasstations.`country`",
            "gasstations.`chainid`"
        ],
        "sql_keywords": [
            "=",
            ">"
        ],
        "conditions": [
            "transactions made in the gas stations in the Czech Republic",
            "taken place after 2012/1/1"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "gasstations"
        ],
        "columns": [
            "transactions_1k.`transactionid`",
            "transactions_1k.`date`",
            "transactions_1k.`time`",
            "transactions_1k.`customerid`",
            "transactions_1k.`cardid`",
            "transactions_1k.`gasstationid`",
            "transactions_1k.`productid`",
            "transactions_1k.`amount`",
            "transactions_1k.`price`",
            "gasstations.`gasstationid`",
            "gasstations.`chainid`",
            "gasstations.`country`",
            "gasstations.`segment`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AVG"
        ],
        "conditions": [
            "transactions taken place in gas stations",
            "in the Czech Republic"
        ]
    },
    {
        "tables": [
            "customers",
            "transactions_1k"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`currency`",
            "transactions_1k.`customerid`",
            "transactions_1k.`price`"
        ],
        "sql_keywords": [
            "AVG",
            "JOIN",
            "WHERE"
        ],
        "conditions": [
            "paid in the euro"
        ]
    },
    {
        "tables": [
            "customers",
            "transactions_1k"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "customers.`currency`",
            "transactions_1k.`date`",
            "transactions_1k.`amount`",
            "transactions_1k.`transactionid`",
            "transactions_1k.`customerid`",
            "transactions_1k.`price`",
            "transactions_1k.`gasstationid`",
            "transactions_1k.`productid`",
            "transactions_1k.`cardid`",
            "transactions_1k.`time`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "paid the most",
            "in 2012/8/25"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "gasstations"
        ],
        "columns": [
            "transactions_1k.`date`",
            "transactions_1k.`time`",
            "transactions_1k.`customerid`",
            "transactions_1k.`gasstationid`",
            "gasstations.`gasstationid`",
            "gasstations.`country`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "country's gas station",
            "first paid customer",
            "2012/8/25"
        ]
    },
    {
        "tables": [
            "customers",
            "transactions_1k"
        ],
        "columns": [
            "customers.`currency`",
            "transactions_1k.`date`",
            "transactions_1k.`time`",
            "transactions_1k.`customerid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "customer paid",
            "at 16:25:00",
            "in 2012/8/24"
        ]
    },
    {
        "tables": [
            "customers",
            "transactions_1k"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "transactions_1k.`date`",
            "transactions_1k.`time`",
            "transactions_1k.`customerid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "customer segment at 2012/8/23 21:20:00"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "customers"
        ],
        "columns": [
            "transactions_1k.`date`",
            "transactions_1k.`time`",
            "transactions_1k.`transactionid`",
            "transactions_1k.`customerid`",
            "customers.`currency`"
        ],
        "sql_keywords": [
            "=",
            "AND"
        ],
        "conditions": [
            "transactions paid in CZK",
            "morning of 2012/8/26"
        ]
    },
    {
        "tables": [
            "customers",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`segment`",
            "yearmonth.`customerid`",
            "yearmonth.`date`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "earliest customer"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "gasstations"
        ],
        "columns": [
            "transactions_1k.`date`",
            "transactions_1k.`time`",
            "transactions_1k.`gasstationid`",
            "gasstations.`gasstationid`",
            "gasstations.`country`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "deal happened at 2012/8/24 12:42:00"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "products"
        ],
        "columns": [
            "transactions_1k.`productid`",
            "transactions_1k.`date`",
            "transactions_1k.`time`",
            "transactions_1k.`transactionid`",
            "products.`productid`"
        ],
        "sql_keywords": [
            "="
        ],
        "conditions": [
            "transaction happened at 2012/8/23 21:20:00"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "yearmonth"
        ],
        "columns": [
            "transactions_1k.`date`",
            "transactions_1k.`customerid`",
            "transactions_1k.`amount`",
            "transactions_1k.`price`",
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`"
        ],
        "sql_keywords": [
            "=",
            "AND",
            "JOIN"
        ],
        "conditions": [
            "customer paid 124.05 in 2012/8/24",
            "spend during the January of 2012",
            "date and expenses exactly"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "gasstations"
        ],
        "columns": [
            "transactions_1k.`date`",
            "transactions_1k.`time`",
            "transactions_1k.`transactionid`",
            "transactions_1k.`customerid`",
            "transactions_1k.`amount`",
            "transactions_1k.`gasstationid`",
            "transactions_1k.`price`",
            "transactions_1k.`productid`",
            "transactions_1k.`cardid`",
            "gasstations.`gasstationid`",
            "gasstations.`segment`",
            "gasstations.`country`",
            "gasstations.`chainid`"
        ],
        "sql_keywords": [
            "BETWEEN",
            "="
        ],
        "conditions": [
            "transactions happened during 8:00-9:00",
            "transactions happened in 2012/8/26",
            "transactions happened in CZE"
        ]
    },
    {
        "tables": [
            "yearmonth",
            "customers"
        ],
        "columns": [
            "yearmonth.`consumption`",
            "yearmonth.`date`",
            "yearmonth.`customerid`",
            "customers.`customerid`",
            "customers.`currency`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "spent 214582.17",
            "June of 2013"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "gasstations"
        ],
        "columns": [
            "transactions_1k.`cardid`",
            "transactions_1k.`gasstationid`",
            "gasstations.`gasstationid`",
            "gasstations.`country`"
        ],
        "sql_keywords": [
            "JOIN",
            "ON",
            "WHERE",
            "="
        ],
        "conditions": [
            "card owner of No.667467"
        ]
    },
    {
        "tables": [
            "customers",
            "transactions_1k",
            "gasstations"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`currency`",
            "transactions_1k.`date`",
            "transactions_1k.`amount`",
            "transactions_1k.`customerid`",
            "transactions_1k.`gasstationid`",
            "gasstations.`gasstationid`",
            "gasstations.`country`"
        ],
        "sql_keywords": [
            "=",
            "JOIN"
        ],
        "conditions": [
            "spent 548.4",
            "in 2012/8/24"
        ]
    },
    {
        "tables": [
            "customers",
            "transactions_1k"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`currency`",
            "transactions_1k.`customerid`",
            "transactions_1k.`date`"
        ],
        "sql_keywords": [
            "DISTINCT",
            "JOIN",
            "GROUP BY",
            "COUNT"
        ],
        "conditions": [
            "used EUR",
            "2012/8/25"
        ]
    },
    {
        "tables": [
            "customers",
            "transactions_1k",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "transactions_1k.`date`",
            "transactions_1k.`customerid`",
            "transactions_1k.`amount`",
            "transactions_1k.`price`",
            "yearmonth.`date`",
            "yearmonth.`customerid`",
            "yearmonth.`consumption`"
        ],
        "sql_keywords": [
            "=",
            "INTERSECT"
        ],
        "conditions": [
            "paid 634.8 in 2012/8/25",
            "consumption decrease rate from Year 2012 to 2013"
        ]
    },
    {
        "tables": [
            "gasstations",
            "transactions_1k"
        ],
        "columns": [
            "gasstations.`gasstationid`",
            "gasstations.`country`",
            "gasstations.`chainid`",
            "gasstations.`segment`",
            "transactions_1k.`amount`",
            "transactions_1k.`gasstationid`",
            "transactions_1k.`price`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC"
        ],
        "conditions": [
            "highest amount of revenue"
        ]
    },
    {
        "tables": [
            "gasstations"
        ],
        "columns": [
            "gasstations.`gasstationid`",
            "gasstations.`segment`",
            "gasstations.`country`"
        ],
        "sql_keywords": [
            "INTERSECT",
            "="
        ],
        "conditions": [
            "Country = \"SVK\""
        ]
    },
    {
        "tables": [
            "customers",
            "transactions_1k",
            "yearmonth"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`currency`",
            "transactions_1k.`date`",
            "transactions_1k.`amount`",
            "transactions_1k.`transactionid`",
            "transactions_1k.`customerid`",
            "transactions_1k.`price`",
            "transactions_1k.`gasstationid`",
            "transactions_1k.`productid`",
            "transactions_1k.`cardid`",
            "transactions_1k.`time`",
            "yearmonth.`date`",
            "yearmonth.`customerid`",
            "yearmonth.`consumption`"
        ],
        "sql_keywords": [
            "=",
            "SUM"
        ],
        "conditions": [
            "customer '38508'",
            "gas stations",
            "January 2012"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "products"
        ],
        "columns": [
            "transactions_1k.`productid`",
            "transactions_1k.`amount`",
            "products.`productid`",
            "products.`description`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": []
    },
    {
        "tables": [
            "customers",
            "transactions_1k"
        ],
        "columns": [
            "customers.`customerid`",
            "customers.`currency`",
            "transactions_1k.`customerid`",
            "transactions_1k.`price`",
            "transactions_1k.`amount`"
        ],
        "sql_keywords": [
            "JOIN",
            "GROUP BY",
            "ORDER BY",
            "DESC",
            "LIMIT"
        ],
        "conditions": [
            "top spending customer",
            "average price per single item purchased",
            "currency used"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "gasstations"
        ],
        "columns": [
            "transactions_1k.`transactionid`",
            "transactions_1k.`customerid`",
            "transactions_1k.`amount`",
            "transactions_1k.`price`",
            "transactions_1k.`productid`",
            "transactions_1k.`date`",
            "transactions_1k.`gasstationid`",
            "transactions_1k.`cardid`",
            "transactions_1k.`time`",
            "gasstations.`gasstationid`",
            "gasstations.`segment`",
            "gasstations.`country`",
            "gasstations.`chainid`"
        ],
        "sql_keywords": [
            "=",
            "ORDER BY",
            "LIMIT"
        ],
        "conditions": [
            "gas station that sold the most expensive product id No.2 for one unit"
        ]
    },
    {
        "tables": [
            "transactions_1k",
            "yearmonth",
            "customers"
        ],
        "columns": [
            "transactions_1k.`transactionid`",
            "transactions_1k.`date`",
            "transactions_1k.`amount`",
            "transactions_1k.`customerid`",
            "transactions_1k.`price`",
            "transactions_1k.`productid`",
            "yearmonth.`date`",
            "yearmonth.`customerid`",
            "yearmonth.`consumption`",
            "customers.`customerid`",
            "customers.`segment`",
            "customers.`currency`"
        ],
        "sql_keywords": [
            "JOIN",
            "WHERE",
            "AND",
            "GROUP BY",
            "HAVING"
        ],
        "conditions": [
            "paid more than 29.00 per unit of product id No.5",
            "consumption status in the August of 2012"
        ]
    }
]