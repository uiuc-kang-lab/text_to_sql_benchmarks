SELECT MAX(CAST("Free Meal Count (K-12)" AS FLOAT) / CAST("Enrollment (K-12)" AS FLOAT)) AS highest_eligible_free_rate FROM frpm WHERE "County Name" = 'Alameda'; 
SELECT (CAST(f.`Free Meal Count (Ages 5-17)` AS FLOAT) / f.`Enrollment (Ages 5-17)`) AS eligible_free_rate FROM frpm AS f JOIN schools AS s ON f.CDSCode = s.CDSCode WHERE s.SOCType = 'Continuation High Schools' AND f.`Enrollment (Ages 5-17)` IS NOT NULL AND f.`Enrollment (Ages 5-17)` != 0 ORDER BY eligible_free_rate ASC LIMIT 3; 
SELECT s.Zip FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND s.County = 'Fresno' AND s.District = 'Fresno County Office of Education';
SELECT schools.MailStreet FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY frpm."FRPM Count (K-12)" DESC LIMIT 1; 
SELECT s.Phone FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.[Charter School (Y/N)] = '1' AND s.OpenDate > '2000-01-01' AND s.FundingType = 'Directly funded'; 
SELECT COUNT(*) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE AvgScrMath > 400 AND Virtual = 'F'; 
SELECT sname FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE NumTstTakr > 500 AND Magnet = 1; 
SELECT s.Phone FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode WHERE ss.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores); 
SELECT satscores.NumTstTakr FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode ORDER BY frpm."FRPM Count (K-12)" DESC LIMIT 1; 
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE AvgScrMath > 560 AND FundingType = 'Directly funded'; 
SELECT f.`FRPM Count (Ages 5-17)` FROM satscores s JOIN frpm f ON s.cds = f.CDSCode WHERE s.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL); 
SELECT CDSCode FROM frpm WHERE (CAST("Enrollment (K-12)" AS FLOAT) + CAST("Enrollment (Ages 5-17)" AS FLOAT)) > 500; 
SELECT MAX("Free Meal Count (Ages 5-17)" * 1.0 / "Enrollment (Ages 5-17)") AS highest_eligible_free_rate FROM frpm INNER JOIN satscores ON frpm.CDSCode = satscores.cds WHERE NumGE1500 * 1.0 / NumTstTakr > 0.3; 
SELECT Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY (NumGE1500 * 1.0 / NumTstTakr) DESC LIMIT 3; 
SELECT schools.NCESSchool FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY frpm.`Enrollment (Ages 5-17)` DESC LIMIT 5; 
SELECT dname FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.StatusType = 'Active' ORDER BY AvgScrRead DESC LIMIT 1;
SELECT COUNT(*) FROM satscores WHERE cname = 'Alameda' AND NumTstTakr < 100; 
SELECT sname, CharterNum FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE AvgScrWrite > 499 AND CharterNum IS NOT NULL ORDER BY AvgScrWrite DESC; 
SELECT COUNT(*) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Fresno' AND schools.FundingType = 'Directly funded' AND satscores.NumTstTakr <= 250; 
SELECT s.Phone FROM satscores AS ss JOIN schools AS s ON ss.cds = s.CDSCode ORDER BY ss.AvgScrMath DESC LIMIT 1; 
SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12'; 
SELECT COUNT(*) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Los Angeles' AND frpm.`Free Meal Count (K-12)` > 500 AND frpm.`FRPM Count (K-12)` < 700; 
SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1;
SELECT s.School, s.Street FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE (CAST(f."Enrollment (K-12)" AS FLOAT) - CAST(f."Enrollment (Ages 5-17)" AS FLOAT)) > 30; 
SELECT s.School FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE (CAST(f.[Free Meal Count (K-12)] AS FLOAT) / f.[Enrollment (K-12)]) > 0.1 AND ss.NumGE1500 > 0; 
SELECT sname, FundingType FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE cname = 'Riverside' GROUP BY sname HAVING CAST(AVG(AvgScrMath) AS FLOAT) > 400; 
SELECT s.School, s.Street, s.City, s.State, s.Zip FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Monterey' AND s.SOCType = 'High Schools (Public)' AND f.`FRPM Count (Ages 5-17)` > 800; 
SELECT s.School, sat.AvgScrWrite, s.Phone FROM satscores sat JOIN schools s ON sat.cds = s.CDSCode WHERE s.OpenDate > '1991-12-31' OR s.ClosedDate < '2000-01-01'; 
SELECT School, DOCType FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE FundingType = 'Locally funded' AND (CAST(frpm."Enrollment (K-12)" AS FLOAT) - CAST(frpm."Enrollment (Ages 5-17)" AS FLOAT)) > (SELECT AVG(CAST(frpm."Enrollment (K-12)" AS FLOAT) - CAST(frpm."Enrollment (Ages 5-17)" AS FLOAT)) FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE FundingType = 'Locally funded'); 
SELECT OpenDate FROM schools WHERE GSoffered = 'K-12' AND CDSCode = (SELECT CDSCode FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 1) LIMIT 1; 
SELECT City FROM schools ORDER BY (SELECT enroll12 FROM satscores WHERE satscores.cds = schools.CDSCode) ASC LIMIT 5; 
SELECT CAST(`Free Meal Count (K-12)` AS FLOAT) / CAST(`Enrollment (K-12)` AS FLOAT) AS eligible_free_rate FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 2 OFFSET 9; 
SELECT frpm."School Name", CAST(frpm."FRPM Count (K-12)" AS FLOAT) / CAST(frpm."Enrollment (K-12)" AS FLOAT) AS Eligible_Free_Rate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.SOC = '66' ORDER BY frpm."FRPM Count (K-12)" DESC LIMIT 5; 
SELECT s.School, s.Website FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000; 
SELECT CAST("Free Meal Count (Ages 5-17)" AS FLOAT) / CAST("Enrollment (Ages 5-17)" AS FLOAT) AS free_rate FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Kacey' AND schools.AdmLName1 = 'Gibson'; 
SELECT s.AdmEmail1 FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = '1' ORDER BY f.`Enrollment (K-12)` LIMIT 1; 
SELECT AdmFName1 || ' ' || AdmLName1 AS Admin1_FullName, AdmFName2 || ' ' || AdmLName2 AS Admin2_FullName, AdmFName3 || ' ' || AdmLName3 AS Admin3_FullName FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores); 
SELECT Street, City, Zip, State FROM schools JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY (CAST(NumGE1500 AS FLOAT) / NumTstTakr) ASC LIMIT 1; 
SELECT schools.Website FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Los Angeles' AND satscores.NumTstTakr BETWEEN 2000 AND 3000; 
SELECT AVG(satscores.NumTstTakr) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Fresno' AND strftime('%Y', schools.OpenDate) = '1980'; 
SELECT s.Phone FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode WHERE ss.dname = 'Fresno Unified' ORDER BY ss.AvgScrRead ASC LIMIT 1; 
SELECT sname FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE Virtual = 'F' AND (SELECT COUNT(*) FROM satscores AS sub WHERE sub.cname = satscores.cname AND sub.AvgScrRead > satscores.AvgScrRead) < 5 ORDER BY cname, AvgScrRead DESC; 
SELECT schools.EdOpsName FROM satscores JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.AvgScrMath DESC LIMIT 1; 
SELECT AvgScrMath, cname FROM satscores WHERE AvgScrMath IS NOT NULL AND AvgScrRead IS NOT NULL AND AvgScrWrite IS NOT NULL ORDER BY (CAST(AvgScrMath AS FLOAT) + CAST(AvgScrRead AS FLOAT) + CAST(AvgScrWrite AS FLOAT)) ASC LIMIT 1; 
SELECT satscores.AvgScrWrite, schools.City FROM satscores JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.NumGE1500 DESC LIMIT 1; 
SELECT schools.School, satscores.AvgScrWrite FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.AdmFName1 = 'Ricci' AND schools.AdmLName1 = 'Ulrich'; 
SELECT School FROM schools WHERE DOC = 31 ORDER BY (SELECT enroll12 FROM satscores WHERE satscores.cds = schools.CDSCode) DESC LIMIT 1; 
SELECT CAST(COUNT(*) AS FLOAT) / 12 AS monthly_average FROM schools WHERE County = 'Alameda' AND DOC = 52 AND strftime('%Y', OpenDate) = '1980'; 
SELECT CAST((SELECT COUNT(*) FROM schools WHERE County = 'Orange' AND DOC = 54) AS FLOAT) / CAST((SELECT COUNT(*) FROM schools WHERE DOC = 52) AS FLOAT); 
SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' AND School IS NOT NULL AND ClosedDate IS NOT NULL AND County = (SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(CDSCode) DESC LIMIT 1) ORDER BY School; 
SELECT sname, MailStreet FROM satscores JOIN schools ON satscores.cds = schools.CDSCode ORDER BY AvgScrMath DESC LIMIT 1 OFFSET 6; 
SELECT schools.MailStreet, schools.School FROM satscores JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.AvgScrRead ASC LIMIT 1; 
SELECT COUNT(*) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE (CAST(AvgScrRead AS FLOAT) + CAST(AvgScrMath AS FLOAT) + CAST(AvgScrWrite AS FLOAT)) >= 1500 AND MailCity = 'Lakeport'; 
SELECT SUM(satscores.NumTstTakr) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Fresno'; 
SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'; 
SELECT (SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'Colusa') * 1.0 / (SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND County = 'Humboldt') AS ratio; 
SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND City = 'San Joaquin' AND StatusType = 'Active'; 
SELECT schools.Phone, schools.Ext FROM satscores JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.AvgScrWrite DESC LIMIT 1 OFFSET 332; 
SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704'; 
SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez');
SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin'; 
SELECT COUNT(*) FROM schools WHERE Charter = 1 AND DOC = 52 AND City = 'Hickman'; 
SELECT COUNT(*) FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.Charter = 0 AND s.County = 'Los Angeles' AND (CAST(f."Free Meal Count (K-12)" AS FLOAT) * 100.0 / CAST(f."Enrollment (K-12)" AS FLOAT)) < 0.18; 
SELECT School, City, AdmFName1 || ' ' || AdmLName1 AS Admin1, AdmFName2 || ' ' || AdmLName2 AS Admin2, AdmFName3 || ' ' || AdmLName3 AS Admin3 FROM schools WHERE Charter = 1 AND CharterNum = '00D2'; 
SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'; 
SELECT (CAST(COUNT(CASE WHEN FundingType = 'Locally funded' THEN 1 END) AS FLOAT) / COUNT(*) * 100) AS ratio_percentage FROM schools WHERE County = 'Santa Clara'; 
SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly funded' AND County = 'Stanislaus' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31'; 
SELECT COUNT(*) FROM schools WHERE DOCType = 'Community College District' AND ClosedDate LIKE '1989%' AND City = 'San Francisco'; 
SELECT County FROM schools WHERE SOC = 11 AND ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT NCESDist FROM schools WHERE SOC = 31; 
SELECT SUM(CASE WHEN StatusType = 'Active' THEN 1 ELSE 0 END) AS ActiveSchools, SUM(CASE WHEN StatusType = 'Closed' THEN 1 ELSE 0 END) AS ClosedSchools FROM schools WHERE SOCType = 'District Community Day Schools' AND County = 'Alpine';
SELECT frpm."District Code" FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.Magnet = 0 AND schools.City = 'Fresno'; 
SELECT "Enrollment (Ages 5-17)" FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.City = 'Fremont' AND frpm."Academic Year" = '2014-2015' AND schools.EdOpsCode = 'SSS';
SELECT f.`FRPM Count (Ages 5-17)` FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.EdOpsName = 'Youth Authority School' AND s.MailStreet = 'PO Box 1040'; 
SELECT frpm."Low Grade" FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.NCESDist = '0613360' AND schools.EdOpsCode = 'SPECON'; 
SELECT s.School, s.EILName FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`NSLP Provision Status` = 'Breakfast Provision 2' AND f.`County Code` = '37'; 
SELECT s.City FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.EILCode = 'HS' AND s.County = 'Merced' AND f.[NSLP Provision Status] = '2' AND f.[Low Grade] = '9' AND f.[High Grade] = '12'; 
SELECT s.School, (CAST(f."FRPM Count (Ages 5-17)" AS FLOAT) / CAST(f."Enrollment (Ages 5-17)" AS FLOAT) * 100) AS "Percent (%) Eligible FRPM (Ages 5-17)" FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.County = 'Los Angeles' AND s.GSserved = 'K-9'; 
SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT County, COUNT(*) AS num_schools FROM schools WHERE Virtual = 'F' AND County IN ('San Diego', 'Santa Barbara') GROUP BY County ORDER BY num_schools DESC LIMIT 1; 
SELECT School, Latitude, SOCType FROM schools ORDER BY Latitude DESC LIMIT 1; 
SELECT s.City, s.School, f."Low Grade" FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.State = 'CA' ORDER BY s.Latitude LIMIT 1; 
SELECT GSoffered FROM schools ORDER BY CAST(ABS(Longitude) AS FLOAT) DESC LIMIT 1; 
SELECT COUNT(DISTINCT CASE WHEN f.`NSLP Provision Status` = 'Multiple Provision Types' THEN s.CDSCode END) AS num_schools_with_multiple_provision_types, COUNT(DISTINCT s.City) AS num_cities_with_k8_span, s.City, COUNT(s.CDSCode) AS num_schools_per_city FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.Magnet = 1 AND s.GSserved = 'K-8' GROUP BY s.City; 
SELECT AdmFName1, District FROM schools WHERE AdmFName1 IS NOT NULL GROUP BY AdmFName1, District ORDER BY COUNT(*) DESC LIMIT 2; 
SELECT frpm.`Percent (%) Eligible Free (K-12)`, frpm.`District Code` FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Alusine'; 
SELECT s.AdmLName1, s.District, s.County, s.School FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f."Charter School Number" = '0040'; 
SELECT AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND City = 'San Bernardino' AND District = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = 62 OR DOC = 54); 
SELECT sa.sname, sc.AdmEmail1 FROM satscores sa JOIN schools sc ON sa.cds = sc.CDSCode WHERE sa.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE sname IS NOT NULL); 
SELECT COUNT(DISTINCT account.account_id) FROM account JOIN disp ON account.account_id = disp.account_id JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND district.A3 = 'east Bohemia'; 
SELECT COUNT(DISTINCT account.account_id) FROM account JOIN district ON account.district_id = district.district_id JOIN loan ON account.account_id = loan.account_id WHERE district.A3 = 'Prague'; 
SELECT CASE WHEN CAST(AVG(A12) AS FLOAT) > CAST(AVG(A13) AS FLOAT) THEN '1995' ELSE '1996' END AS year_with_higher_unemployment FROM district; 
SELECT COUNT(DISTINCT d.district_id) FROM district d JOIN client c ON d.district_id = c.district_id WHERE c.gender = 'F' AND d.A11 > 6000 AND d.A11 < 10000; 
SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A3 = 'north Bohemia' AND d.A11 > 8000; 
SELECT account.account_id, (SELECT CAST(MAX(district.A11) AS FLOAT) - CAST(MIN(district.A11) AS FLOAT) FROM district) AS salary_gap FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F') AND district.A11 = (SELECT MIN(district.A11) FROM client JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F'); 
SELECT DISTINCT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.birth_date = (SELECT MAX(c1.birth_date) FROM client c1) UNION SELECT DISTINCT a.account_id FROM account a JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN district di ON c.district_id = di.district_id WHERE di.A11 = (SELECT MAX(di1.A11) FROM district di1); 
SELECT COUNT(*) FROM disp JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'; 
SELECT DISTINCT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'DISPONENT' AND account.frequency = 'POPLATEK PO OBRATU'; 
SELECT account.account_id FROM account JOIN loan ON account.account_id = loan.account_id WHERE strftime('%Y', loan.date) = '1997' AND account.frequency = 'POPLATEK TYDNE' AND loan.amount = (SELECT MIN(loan.amount) FROM loan JOIN account ON account.account_id = loan.account_id WHERE strftime('%Y', loan.date) = '1997' AND account.frequency = 'POPLATEK TYDNE'); 
SELECT acc.account_id FROM account acc JOIN loan ln ON acc.account_id = ln.account_id WHERE ln.duration > 12 AND ln.amount = (SELECT MAX(ln2.amount) FROM loan ln2 JOIN account acc2 ON ln2.account_id = acc2.account_id WHERE ln2.duration > 12 AND strftime('%Y', acc2.date) = '1993') AND strftime('%Y', acc.date) = '1993'; 
SELECT COUNT(*) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.A2 = 'Sokolov'; 
SELECT account_id FROM trans WHERE date = (SELECT MIN(date) FROM trans WHERE date LIKE '1995%'); 
SELECT DISTINCT account.account_id FROM account JOIN trans ON account.account_id = trans.account_id WHERE account.date < '1997-01-01' AND trans.amount > 3000; 
SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued = '1994-03-03'; 
SELECT a.date FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.amount = 840 AND t.date = '1998-10-14'; 
SELECT account.district_id FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.date = '1994-08-25'; 
SELECT MAX(trans.amount) FROM trans JOIN disp ON trans.account_id = disp.account_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued = '1996-10-21';
SELECT client.gender FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON client.district_id = district.district_id WHERE district.A11 = (SELECT MAX(district.A11) FROM district) ORDER BY client.birth_date LIMIT 1; 
SELECT t.amount FROM trans t JOIN loan l ON t.account_id = l.account_id JOIN disp d ON l.account_id = d.account_id JOIN account a ON d.account_id = a.account_id WHERE l.amount = (SELECT MAX(amount) FROM loan) AND t.date > a.date ORDER BY t.date ASC LIMIT 1; 
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN account a ON c.district_id = a.district_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' AND d.A2 = 'Jesenik';
SELECT disp.disp_id FROM disp JOIN trans ON disp.account_id = trans.account_id WHERE trans.amount = 5100 AND trans.date = '1998-09-02'; 
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Litomerice' AND strftime('%Y', account.date) = '1996'; 
SELECT district.A2 FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = '1976-01-29'; 
SELECT c.birth_date FROM loan l JOIN disp d ON l.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE l.amount = 98832 AND l.date = '1996-01-03'; 
SELECT account.account_id FROM account JOIN district ON account.district_id = district.district_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE district.A3 = 'Prague' ORDER BY account.date LIMIT 1;
SELECT (COUNT(CASE WHEN gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS male_percentage FROM client WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'south Bohemia' ORDER BY A4 DESC LIMIT 1); 
SELECT (CAST(t2.balance AS FLOAT) - CAST(t1.balance AS FLOAT)) / CAST(t1.balance AS FLOAT) * 100 AS increase_rate FROM loan l JOIN disp d ON l.account_id = d.account_id JOIN trans t1 ON d.account_id = t1.account_id JOIN trans t2 ON d.account_id = t2.account_id WHERE l.date = '1993-07-05' AND t1.date = '1993-03-22' AND t2.date = '1998-12-27' ORDER BY l.date LIMIT 1; 
SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS FLOAT) * 100.0 / CAST(SUM(amount) AS FLOAT)) AS percentage_paid FROM loan; 
SELECT (CAST(COUNT(DISTINCT CASE WHEN loan.amount < 100000 AND loan.status = 'C' THEN loan.account_id END) AS FLOAT) * 100.0 / CAST(COUNT(DISTINCT loan.account_id) AS FLOAT)) AS percentage_of_accounts FROM loan; 
SELECT a.account_id, d.A2 AS district_name, d.A3 AS region FROM account a JOIN disp dp ON a.account_id = dp.account_id JOIN district d ON a.district_id = d.district_id WHERE a.date LIKE '1993%' AND a.frequency = 'POPLATEK PO OBRATU'; 
SELECT account.account_id, account.frequency FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'east Bohemia' AND account.date BETWEEN '1995-01-01' AND '2000-12-31' AND disp.type = 'OWNER'; 
SELECT account.account_id, account.date FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Prachatice'; 
SELECT district.A2, district.A3 FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = '4990'; 
SELECT l.account_id, d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.amount > 300000; 
SELECT loan.loan_id, district.A2 AS district, district.A11 AS average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.duration = 60; 
SELECT district.A3 AS state, district.A2 AS district_name, (CAST(district.A13 AS FLOAT) - CAST(district.A12 AS FLOAT)) / CAST(district.A12 AS FLOAT) * 100 AS unemployment_rate_increment FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.status = 'D'; 
SELECT 100.0 * CAST(COUNT(CASE WHEN district.A2 = 'Decin' THEN 1 END) AS FLOAT) / CAST(COUNT(*) AS FLOAT) AS percentage FROM account JOIN district ON account.district_id = district.district_id WHERE strftime('%Y', account.date) = '1993'; 
SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'; 
SELECT d.A2 FROM client c JOIN disp dp ON c.client_id = dp.client_id JOIN account a ON dp.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE c.gender = 'F' GROUP BY d.A2 ORDER BY COUNT(*) DESC LIMIT 9; 
SELECT d.A2, t.amount FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' ORDER BY t.amount DESC LIMIT 10; 
SELECT COUNT(DISTINCT account.account_id) FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON account.district_id = district.district_id LEFT JOIN card ON disp.disp_id = card.disp_id WHERE district.A3 = 'south Bohemia' AND card.card_id IS NULL; 
SELECT district.A3 FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.status IN ('C', 'D') GROUP BY district.A3 ORDER BY COUNT(loan.loan_id) DESC LIMIT 1; 
SELECT AVG(CAST(l.amount AS FLOAT)) FROM loan l JOIN disp d ON l.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.gender = 'M'; 
SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1; 
SELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district ORDER BY A16 DESC LIMIT 1); 
SELECT COUNT(DISTINCT account.account_id) FROM account JOIN disp ON account.account_id = disp.account_id JOIN trans ON account.account_id = trans.account_id WHERE trans.operation = 'VYBER KARTOU' AND account.frequency = 'POPLATEK MESICNE' AND trans.balance < 0; 
SELECT COUNT(*) FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.date BETWEEN '1995-01-01' AND '1997-12-31' AND l.amount >= 250000 AND a.frequency = 'POPLATEK MESICNE'; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.status IN ('C', 'D') AND a.district_id = 1; 
SELECT COUNT(*) FROM client WHERE gender = 'M' AND district_id = (SELECT district_id FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1); 
SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER'; 
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Pisek'; 
SELECT DISTINCT district.A2 FROM district JOIN account ON district.district_id = account.district_id JOIN trans ON account.account_id = trans.account_id WHERE trans.amount > 10000 AND strftime('%Y', trans.date) = '1997'; 
SELECT DISTINCT account.account_id FROM account JOIN "order" ON account.account_id = "order".account_id JOIN district ON account.district_id = district.district_id WHERE "order".k_symbol = 'SIPO' AND district.A2 = 'Pisek'; 
SELECT account.account_id FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold'; 
SELECT AVG(CAST(amount AS FLOAT)) FROM trans WHERE type = 'VYDAJ' AND operation = 'VYBER KARTOU' AND strftime('%Y', date) = '2021' GROUP BY strftime('%m', date); 
SELECT DISTINCT d.client_id FROM trans t JOIN disp d ON t.account_id = d.account_id JOIN card c ON d.disp_id = c.disp_id WHERE t.operation = 'VYBER KARTOU' AND t.amount < CAST((SELECT AVG(amount) FROM trans WHERE strftime('%Y', date) = '1998') AS FLOAT) AND strftime('%Y', t.date) = '1998'; 
SELECT DISTINCT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id JOIN loan ON disp.account_id = loan.account_id WHERE client.gender = 'F'; 
SELECT COUNT(DISTINCT account.account_id) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' AND district.A3 = 'south Bohemia'; 
SELECT account.account_id FROM account JOIN disp ON account.account_id = disp.account_id JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Tabor' AND disp.type = 'OWNER'; 
SELECT DISTINCT disp.type FROM disp JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE disp.type != 'OWNER' AND district.A11 > 8000 AND district.A11 <= 9000; 
SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id JOIN disp dp ON a.account_id = dp.account_id JOIN order o ON a.account_id = o.account_id WHERE d.A3 = 'north Bohemia' AND o.bank_to = 'AB'; 
SELECT DISTINCT district.A2 FROM district JOIN account ON district.district_id = account.district_id JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ'; 
SELECT AVG(CAST(district.A15 AS FLOAT)) FROM district JOIN account ON district.district_id = account.district_id WHERE district.A15 > 4000 AND strftime('%Y', account.date) >= '1997'; 
SELECT COUNT(*) FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN account ON disp.account_id = account.account_id WHERE card.type = 'classic' AND disp.type = 'OWNER'; 
SELECT COUNT(*) FROM client JOIN district ON client.district_id = district.district_id WHERE district.A2 = 'Hl.m. Praha' AND client.gender = 'M'; 
SELECT (CAST(COUNT(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 END) AS FLOAT) * 100.0 / CAST(COUNT(*) AS FLOAT)) AS percent_gold FROM card; 
SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN loan ON disp.account_id = loan.account_id WHERE disp.type = 'OWNER' ORDER BY loan.amount DESC LIMIT 1; 
SELECT district.A15 FROM account JOIN district ON account.district_id = district.district_id WHERE account.account_id = 532; 
SELECT account.district_id FROM account JOIN "order" ON account.account_id = "order".account_id WHERE "order".order_id = 33333;
SELECT t.* FROM trans t JOIN disp d ON t.account_id = d.account_id WHERE d.client_id = 3356 AND t.operation = 'VYBER';
SELECT COUNT(DISTINCT account.account_id) FROM account JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND loan.amount < 200000;
SELECT card.type FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE disp.client_id = 13539;
SELECT district.A3 FROM client JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541;
SELECT d.A2 FROM district d JOIN account a ON d.district_id = a.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.status = 'A' GROUP BY d.A2 ORDER BY COUNT(a.account_id) DESC LIMIT 1;
SELECT client.client_id FROM "order" JOIN account ON "order".account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE "order".order_id = 32423;
SELECT trans.* FROM trans JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5;
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Jesenik';
SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'junior' AND card.issued >= '1997-01-01';
SELECT (COUNT(DISTINCT c.client_id) * 100.0 / CAST((SELECT COUNT(DISTINCT c2.client_id) FROM client c2 JOIN disp d2 ON c2.client_id = d2.client_id JOIN account a2 ON d2.account_id = a2.account_id JOIN district dist2 ON a2.district_id = dist2.district_id WHERE dist2.A11 > 10000) AS FLOAT)) AS female_percentage FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN district dist ON a.district_id = dist.district_id WHERE c.gender = 'F' AND dist.A11 > 10000;
SELECT (CAST(SUM(CASE WHEN strftime('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) - SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END) AS FLOAT) / CAST(SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END) AS FLOAT) * 100.0) AS growth_rate FROM loan JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M';
SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';
SELECT CAST((SELECT SUM(A16) FROM district WHERE A3 = 'north Bohemia') AS FLOAT) - CAST((SELECT SUM(A16) FROM district WHERE A3 = 'east Bohemia') AS FLOAT) AS crime_difference;
SELECT type, COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type IN ('OWNER', 'DISPONENT') GROUP BY type;
SELECT frequency, k_symbol FROM account JOIN "order" ON account.account_id = "order".account_id WHERE account.account_id = 3 AND "order".amount = 3539;
SELECT birth_date FROM client WHERE client_id = (SELECT client_id FROM disp WHERE account_id = 130);
SELECT COUNT(DISTINCT account.account_id) FROM account JOIN disp ON account.account_id = disp.account_id WHERE disp.type = 'OWNER' AND account.frequency = 'POPLATEK PO OBRATU';
SELECT l.amount, l.status FROM loan l JOIN disp d ON l.account_id = d.account_id WHERE d.client_id = 992;
SELECT t.balance, c.gender FROM trans t JOIN disp d ON t.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE t.trans_id = 851 AND c.client_id = 4;
SELECT card.type FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE disp.client_id = 9;
SELECT SUM(trans.amount) FROM trans JOIN disp ON trans.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 617 AND trans.type = 'VYDAJ' AND strftime('%Y', trans.date) = '1998';
SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.A3 = 'east Bohemia';
SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN loan ON disp.account_id = loan.account_id WHERE client.gender = 'F' ORDER BY loan.amount DESC LIMIT 3;
SELECT COUNT(*) FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN trans ON disp.account_id = trans.account_id WHERE client.gender = 'M' AND client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND trans.k_symbol = 'SIPO' AND trans.amount > 4000;
SELECT COUNT(*) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Beroun' AND account.date > '1996-12-31';
SELECT COUNT(DISTINCT client.client_id) FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior';
SELECT (COUNT(DISTINCT c.client_id) * 100.0 / (SELECT COUNT(DISTINCT c2.client_id) FROM client c2 JOIN disp d2 ON c2.client_id = d2.client_id JOIN account a2 ON d2.account_id = a2.account_id JOIN district di2 ON a2.district_id = di2.district_id WHERE di2.A3 = 'Prague')) AS female_percentage FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN district di ON a.district_id = di.district_id WHERE c.gender = 'F' AND di.A3 = 'Prague';
SELECT (CAST(COUNT(DISTINCT c.client_id) AS FLOAT) * 100.0 / CAST((SELECT COUNT(DISTINCT c2.client_id) FROM client c2 JOIN disp d2 ON c2.client_id = d2.client_id JOIN account a2 ON d2.account_id = a2.account_id WHERE a2.frequency = 'POPLATEK TYDNE') AS FLOAT)) AS percentage_of_male_clients FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE c.gender = 'M' AND a.frequency = 'POPLATEK TYDNE';
SELECT COUNT(*) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER';
SELECT a.account_id FROM account a JOIN loan l ON a.account_id = l.account_id WHERE l.duration > 24 AND a.date < '1997-01-01' AND l.amount = (SELECT MIN(amount) FROM loan WHERE duration > 24);
SELECT account.account_id FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date = (SELECT MIN(client.birth_date) FROM client WHERE gender = 'F') AND district.district_id = (SELECT district_id FROM district WHERE A11 = (SELECT MIN(A11) FROM district));
SELECT COUNT(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date LIKE '1920%' AND district.A3 = 'east Bohemia';
SELECT COUNT(DISTINCT l.account_id) FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.duration = 24 AND a.frequency = 'POPLATEK TYDNE' AND l.status = 'C';
SELECT AVG(CAST(l.amount AS FLOAT)) FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.status IN ('C', 'D') AND a.frequency = 'POPLATEK PO OBRATU';
SELECT DISTINCT c.client_id, d.A2 AS district_name FROM client c JOIN disp di ON c.client_id = di.client_id JOIN account a ON di.account_id = a.account_id JOIN district d ON c.district_id = d.district_id WHERE di.type = 'OWNER';
SELECT c.client_id, (CAST(strftime('%Y', 'now') AS FLOAT) - CAST(strftime('%Y', c.birth_date) AS FLOAT)) AS age FROM client c JOIN disp d ON c.client_id = d.client_id JOIN card ca ON d.disp_id = ca.disp_id WHERE ca.type = 'gold' AND d.type = 'OWNER';
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1;
SELECT COUNT(DISTINCT a.molecule_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-' AND a.element = 'cl';
SELECT AVG(CAST(o_atoms.count AS FLOAT)) FROM (SELECT COUNT(a.atom_id) AS count FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON a.molecule_id = m.molecule_id WHERE b.bond_type = '-' AND a.element = 'o' GROUP BY m.molecule_id) o_atoms;
SELECT CAST(SUM(CASE WHEN b.bond_type = '-' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(a.atom_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+';
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'na' AND m.label = '-';
SELECT DISTINCT molecule.molecule_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond_type = '#' AND label = '+';
SELECT (CAST(SUM(a.element = 'c') AS FLOAT) / CAST(COUNT(a.atom_id) AS FLOAT)) * 100 AS carbon_percentage FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '=';
SELECT COUNT(*) FROM bond WHERE bond_type = '#';
SELECT COUNT(*) FROM atom WHERE element != 'br';
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';
SELECT DISTINCT molecule_id FROM atom WHERE element = 'c';
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR004_8_9';
SELECT DISTINCT a.element FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_type = '=';
SELECT molecule.label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' GROUP BY molecule.label ORDER BY COUNT(molecule.label) DESC LIMIT 1;
SELECT DISTINCT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id OR connected.atom_id2 = atom.atom_id WHERE atom.element = 'cl';
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '-';
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m ON a1.molecule_id = m.molecule_id WHERE m.label = '-'
SELECT element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element ORDER BY COUNT(element) LIMIT 1;
SELECT bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE (atom_id = 'TR004_8' AND atom_id2 = 'TR004_20') OR (atom_id = 'TR004_20' AND atom_id2 = 'TR004_8');
SELECT DISTINCT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn');
SELECT COUNT(DISTINCT a.atom_id) FROM atom a WHERE (a.element = 'i' OR a.element = 's') AND a.molecule_id IN (SELECT b.molecule_id FROM bond b GROUP BY b.molecule_id HAVING COUNT(DISTINCT b.bond_type) = 1 AND MIN(b.bond_type) = '-');
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';
SELECT DISTINCT a2.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.molecule_id = 'TR181';
SELECT (COUNT(DISTINCT m.molecule_id) - COUNT(DISTINCT CASE WHEN a.element = 'f' THEN m.molecule_id END)) * 100.0 / COUNT(DISTINCT m.molecule_id) AS percentage FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+';
SELECT (CAST(SUM(CASE WHEN m.label = '+' AND b.bond_type = '#' THEN 1 ELSE 0 END) AS FLOAT) * 100.0 / CAST(COUNT(b.bond_id) AS FLOAT)) AS percent FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id;
SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3;
SELECT atom.atom_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.molecule_id = 'TR001' AND connected.bond_id = 'TR001_2_6';
SELECT CAST(SUM(label = '+') AS FLOAT) - CAST(SUM(label = '-') AS FLOAT) AS difference FROM molecule;
SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR000_2_5';
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';
SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '=' ORDER BY m.molecule_id LIMIT 5;
SELECT ROUND((CAST(SUM(bond_type = '=') AS FLOAT) * 100.0 / CAST(COUNT(bond_id) AS FLOAT)), 5) as percent FROM bond WHERE molecule_id = 'TR008';
SELECT ROUND(100.0 * CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS FLOAT) / CAST(COUNT(molecule_id) AS FLOAT), 3) AS percent FROM molecule;
SELECT ROUND(100.0 * SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) / COUNT(atom_id), 4) AS percent FROM atom WHERE molecule_id = 'TR206';
SELECT bond_type FROM bond WHERE molecule_id = 'TR000';
SELECT DISTINCT a.element, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR060';
SELECT b.bond_type, m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.molecule_id = 'TR010' GROUP BY b.bond_type ORDER BY COUNT(b.bond_type) DESC LIMIT 1;
SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE m.label = '-' AND b.bond_type = '-' ORDER BY m.molecule_id LIMIT 3;
SELECT DISTINCT bond_type FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_type LIMIT 2;
SELECT COUNT(*) FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR009' AND (connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12');
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND a.element = 'br';
SELECT b.bond_type, c.atom_id, c.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_id = 'TR001_6_9';
SELECT m.molecule_id, m.label FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR001_10';
SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#';
SELECT COUNT(bond_id) FROM connected WHERE atom_id LIKE 'TR%_19';
SELECT element FROM atom WHERE molecule_id = 'TR004';
SELECT COUNT(*) FROM molecule WHERE label = '-';
SELECT DISTINCT m.molecule_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE SUBSTR(a.atom_id, 7, 2) BETWEEN '21' AND '25' AND m.label = '+';
SELECT DISTINCT b.bond_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE (a1.element = 'p' AND a2.element = 'n') OR (a1.element = 'n' AND a2.element = 'p');
SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '=' GROUP BY m.molecule_id ORDER BY COUNT(b.bond_id) DESC LIMIT 1;
SELECT AVG(bond_count) FROM (SELECT COUNT(b.bond_id) AS bond_count FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'i' GROUP BY a.atom_id);
SELECT bond.bond_type, bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE CAST(SUBSTR(connected.atom_id, 7, 2) AS FLOAT) = 45;
SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected) AND atom_id NOT IN (SELECT atom_id2 FROM connected);
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR041' AND b.bond_type = '#';
SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR144_8_19';
SELECT molecule_id FROM bond WHERE bond_type = '=' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY molecule_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY element ORDER BY COUNT(*) LIMIT 1;
SELECT a2.atom_id FROM atom a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.element = 'pb';
SELECT DISTINCT a.element FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_type = '#' UNION SELECT DISTINCT a2.element FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '#';
SELECT 100.0 * CAST(COUNT(connected.bond_id) AS FLOAT) / CAST((SELECT COUNT(*) FROM connected) AS FLOAT) AS percentage FROM connected JOIN atom AS a1 ON connected.atom_id = a1.atom_id JOIN atom AS a2 ON connected.atom_id2 = a2.atom_id GROUP BY a1.element, a2.element ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ROUND(SUM(m.label = '+') * 100.0 / COUNT(b.bond_id), 5) AS percentage FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-';
SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h');
SELECT c.atom_id2 FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE a.element = 's';
SELECT DISTINCT b.bond_type FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'sn';
SELECT COUNT(DISTINCT a.element) FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '-';
SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND a.element IN ('p', 'br');
SELECT bond_id FROM bond WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');
SELECT DISTINCT b.molecule_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-' AND m.label = '-';
SELECT 100.0 * CAST(SUM(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS FLOAT) / CAST(COUNT(atom.atom_id) AS FLOAT) as percent FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';
SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');
SELECT molecule_id FROM molecule WHERE label = '-';
SELECT COUNT(*) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030';
SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050';
SELECT a1.element, a2.element FROM connected c JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id = 'TR001_10_11';
SELECT COUNT(DISTINCT c.bond_id) FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'i';
SELECT MAX(label) FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'ca');
SELECT 1 FROM connected JOIN atom AS a1 ON connected.atom_id = a1.atom_id JOIN atom AS a2 ON connected.atom_id2 = a2.atom_id WHERE connected.bond_id = 'TR001_1_8' AND ((a1.element = 'cl' OR a2.element = 'cl') AND (a1.element = 'c' OR a2.element = 'c')) GROUP BY connected.bond_id HAVING COUNT(DISTINCT CASE WHEN a1.element IN ('cl', 'c') THEN a1.element ELSE a2.element END) = 2;
SELECT DISTINCT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON m.molecule_id = a.molecule_id WHERE b.bond_type = '#' AND m.label = '-' AND a.element = 'c' LIMIT 2;
SELECT (SUM(element = 'cl') * 100.0 / COUNT(*)) AS percentage FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';
SELECT element FROM atom WHERE molecule_id = 'TR001';
SELECT molecule_id FROM bond WHERE bond_type = '=';
SELECT c.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type = '#';
SELECT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id WHERE c.bond_id = 'TR000_1_2';
SELECT COUNT(DISTINCT b.molecule_id) FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-' AND m.label = '-';
SELECT molecule.label FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_10_11';
SELECT bond.bond_id, molecule.label FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';
SELECT element, COUNT(*) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND SUBSTR(atom.atom_id, 7, 1) = '4' GROUP BY element;
SELECT (SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) * 1.0 / COUNT(element)) AS ratio, label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.molecule_id = 'TR006' GROUP BY label;
SELECT DISTINCT m.label FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca';
SELECT DISTINCT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'c';
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id IN (c.atom_id, c.atom_id2) WHERE c.bond_id = 'TR001_10_11';
SELECT 100.0 * CAST(COUNT(DISTINCT CASE WHEN bond_type = '#' THEN molecule_id END) AS FLOAT) / CAST(COUNT(DISTINCT molecule_id) AS FLOAT) AS percent_triple_bond FROM bond;
SELECT (CAST(SUM(bond_type = ' = ') AS FLOAT) * 100.0 / CAST(COUNT(bond_id) AS FLOAT)) AS percent FROM bond WHERE molecule_id = 'TR047';
SELECT label FROM molecule WHERE molecule_id = (SELECT molecule_id FROM atom WHERE atom_id = 'TR001_1') AND label = '+';
SELECT label FROM molecule WHERE molecule_id = 'TR151' AND label = '+';
SELECT DISTINCT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR151' AND a.element IN ('cl', 'br', 'f', 'i', 'sn', 'pb', 'te');
SELECT COUNT(*) FROM molecule WHERE label = '+';
SELECT atom_id FROM atom WHERE element = 'c' AND CAST(substr(molecule_id, 3, 2) AS INTEGER) >= 10 AND CAST(substr(molecule_id, 3, 2) AS INTEGER) <= 50;
SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');
SELECT b.bond_id FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '=' AND m.label = '+';
SELECT COUNT(a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'h' AND m.label = '+';
SELECT b.molecule_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_id = 'TR000_1_2' AND c.atom_id = 'TR000_1';
SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'c' AND m.label = '-' LIMIT 1;
SELECT (CAST(COUNT(DISTINCT CASE WHEN m.label = '+' AND a.element = 'h' THEN m.molecule_id END) AS FLOAT) * 100.0 / CAST(COUNT(DISTINCT m.molecule_id) AS FLOAT)) AS percentage FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id;
SELECT label FROM molecule WHERE molecule_id = 'TR124';
SELECT atom_id, element FROM atom WHERE molecule_id = 'TR186';
SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19';
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR001_2_4';
SELECT COUNT(b.bond_id) AS double_bond_count, m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '=' AND m.molecule_id = 'TR006';
SELECT molecule.molecule_id, atom.element FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';
SELECT bond.bond_id, connected.atom_id, connected.atom_id2 FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_type = '-';
SELECT DISTINCT m.molecule_id, a.element FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON m.molecule_id = a.molecule_id WHERE b.bond_type = '#' ORDER BY m.molecule_id, a.element;
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_id = 'TR000_2_3';
SELECT COUNT(DISTINCT bond.bond_id) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'cl';
SELECT atom.atom_id, COUNT(DISTINCT bond.bond_type) FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id LEFT JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.molecule_id = 'TR346' GROUP BY atom.atom_id;
SELECT COUNT(DISTINCT b.molecule_id) AS total_molecules_with_double_bond, COUNT(DISTINCT CASE WHEN m.label = '+' THEN b.molecule_id END) AS carcinogenic_molecules_with_double_bond FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '=';
SELECT COUNT(DISTINCT a.molecule_id) FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE a.element != 's' AND b.bond_type != '=';
SELECT m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_2_4';
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR001';
SELECT COUNT(*) FROM bond WHERE bond_type = '-';
SELECT DISTINCT molecule.molecule_id FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl' AND molecule.label = '+';
SELECT DISTINCT molecule.molecule_id FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';
SELECT (CAST(SUM(m.label = '+' AND a.element = 'cl') AS FLOAT) * 100.0 / CAST(COUNT(DISTINCT m.molecule_id) AS FLOAT)) AS percentage FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+';
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';
SELECT COUNT(DISTINCT a.element) FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE c.bond_id = 'TR001_3_4';
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE c.atom_id = 'TR000_1' AND c.atom_id2 = 'TR000_2';
SELECT molecule_id FROM atom WHERE atom_id IN ('TR000_2', 'TR000_4');
SELECT element FROM atom WHERE atom_id = 'TR000_1';
SELECT label FROM molecule WHERE molecule_id = 'TR000';
SELECT (COUNT(DISTINCT connected.atom_id) * 100.0 / CAST((SELECT COUNT(DISTINCT atom_id) FROM atom) AS FLOAT)) AS percentage FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-';
SELECT COUNT(DISTINCT a.molecule_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'n' AND m.label = '+';
SELECT DISTINCT molecule.molecule_id FROM molecule JOIN atom ON molecule.molecule_id = atom.molecule_id JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 's' AND bond.bond_type = '=';
SELECT molecule_id FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY molecule_id HAVING COUNT(atom_id) > 5;
SELECT DISTINCT a.element FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE b.bond_type = '=' AND m.molecule_id = 'TR024';
SELECT molecule_id FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY molecule_id ORDER BY COUNT(atom_id) DESC LIMIT 1;
SELECT (CAST(SUM(m.label = '+') AS FLOAT) * 100.0 / CAST(COUNT(DISTINCT m.molecule_id) AS FLOAT)) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'h' AND b.bond_type = '#';
SELECT COUNT(*) FROM molecule WHERE label = '+';
SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '-' AND molecule_id BETWEEN 'TR004' AND 'TR010';
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c';
SELECT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR004_7' AND m.label = '-';
SELECT COUNT(DISTINCT b.molecule_id) FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE (a1.element = 'o' OR a2.element = 'o') AND b.bond_type = '=';
SELECT COUNT(DISTINCT b.molecule_id) FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#' AND m.label = '-';
SELECT a.element, b.bond_type FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE a.molecule_id = 'TR002';
SELECT a.atom_id FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE a.element = 'c' AND b.bond_type = '=' AND a.molecule_id = 'TR012';
SELECT a.atom_id FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' AND a.element = 'o';
SELECT name FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT * FROM cards WHERE borderColor = 'borderless' AND cardKingdomFoilId IS NULL AND cardKingdomId IS NOT NULL;
SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards);
SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100;
SELECT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.format = 'gladiator' AND l.status = 'Banned';
SELECT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';
SELECT c.id, c.artist FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE (c.power = '*' OR c.power IS NULL) AND l.format = 'commander' AND l.status = 'Legal';
SELECT c.id, r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Stephen Daniele' AND c.hasContentWarning = 1;
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s';
SELECT c.name, c.artist, c.isPromo FROM cards c JOIN rulings r ON c.uuid = r.uuid GROUP BY c.uuid ORDER BY COUNT(r.uuid) DESC LIMIT 1;
SELECT DISTINCT language FROM foreign_data WHERE name = 'Annul' AND uuid IN (SELECT uuid FROM cards WHERE name = 'Annul' AND number LIKE '%29');
SELECT c.name FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE f.language = 'Japanese';
SELECT (CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS FLOAT) * 100.0 / CAST(COUNT(*) AS FLOAT)) AS percentage FROM foreign_data;
SELECT sets.name, sets.totalSetSize FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian';
SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd';
SELECT keywords FROM cards WHERE name = 'Angel of Mercy';
SELECT COUNT(*) FROM cards WHERE power = '∞';
SELECT promoTypes FROM cards WHERE name = 'Duress';
SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';
SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen';
SELECT st.language FROM cards c JOIN sets s ON c.setCode = s.code JOIN set_translations st ON s.code = st.setCode WHERE c.name = 'Angel of Mercy';
SELECT COUNT(*) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isTextless = 0;
SELECT rulings.text FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.name = 'Condemn';
SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isStarter = 1;
SELECT status FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Cloudchaser Eagle');
SELECT type FROM cards WHERE name = 'Benalish Knight';
SELECT format FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Benalish Knight');
SELECT DISTINCT c.artist FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.language = 'Phyrexian';
SELECT (COUNT(CASE WHEN borderColor = 'borderless' THEN id END) * 100.0 / CAST(COUNT(id) AS FLOAT)) AS percentage_borderless FROM cards;
SELECT COUNT(*) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1;
SELECT COUNT(*) FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.borderColor = 'borderless' AND f.language = 'Russian';
SELECT (SELECT COUNT(*) FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE fd.language = 'French' AND c.isStorySpotlight = 1) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1) AS percentage;
SELECT COUNT(*) FROM cards WHERE toughness = '99';
SELECT name FROM cards WHERE artist = 'Aaron Boyd';
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo' AND availability NOT LIKE '%,%';
SELECT id FROM cards WHERE convertedManaCost = 0;
SELECT layout FROM cards WHERE 'Flying' IN (keywords);
SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND (subtypes IS NULL OR subtypes != 'Angel');
SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT id FROM cards WHERE duelDeck = 'a';
SELECT edhrecRank FROM cards WHERE frameVersion = '2015';
SELECT DISTINCT c.artist FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE f.language = 'Chinese Simplified';
SELECT c.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.availability = 'paper' AND fd.language = 'Japanese';
SELECT COUNT(*) FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'Banned' AND c.borderColor = 'white';
SELECT c.uuid, f.language FROM cards c JOIN legalities l ON c.uuid = l.uuid JOIN foreign_data f ON c.uuid = f.uuid WHERE l.format = 'legacy';
SELECT r.text FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Beacon of Immortality';
SELECT COUNT(DISTINCT c.id) AS future_frame_cards_count, l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = 'future' AND LOWER(l.status) = 'legal' GROUP BY l.status;
SELECT name, colors FROM cards WHERE setCode = 'OGW';
SELECT cards.name, set_translations.language FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE cards.setCode = '10E' AND cards.convertedManaCost = 5;
SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf';
SELECT cards.colors, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;
SELECT c.name FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.originalType = 'Artifact' AND c.colors = 'B';
SELECT DISTINCT c.name FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'uncommon' ORDER BY r.date ASC LIMIT 3;
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NULL;
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability LIKE '%mtgo%' AND hand = -1;
SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;
SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = 2003 AND borderColor = 'black' AND availability = 'mtgo,paper';
SELECT SUM(convertedManaCost) FROM cards WHERE artist = 'Rob Alexander';
SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability LIKE '%arena%'
SELECT DISTINCT setCode FROM set_translations WHERE language = 'Spanish';
SELECT 100.0 * CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS FLOAT) / CAST(COUNT(id) AS FLOAT) AS percentage FROM cards WHERE frameEffects = 'legendary';
SELECT (CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(id)) * 100 AS percentage, id FROM cards WHERE isStorySpotlight = 1 AND isTextless = 0;
SELECT name, (COUNT(*) FILTER (WHERE language = 'Spanish') * 100.0 / COUNT(*)) AS percentage FROM foreign_data GROUP BY name;
SELECT language FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE baseSetSize = 309);
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brazil)';
SELECT DISTINCT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.types LIKE '%Creature%' AND l.status = 'Legal';
SELECT DISTINCT fd.type FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE fd.language = 'German' AND fd.type IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%';
SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE legalities.format = 'premodern' AND rulings.text = 'This is a triggered mana ability.' AND cards.side IS NULL;
SELECT id FROM cards WHERE artist = 'Erica Yang' AND 'pauper' IN (SELECT format FROM legalities WHERE cards.uuid = legalities.uuid) AND availability = 'paper';
SELECT c.artist FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE fd.flavorText LIKE "%Das perfekte Gegenmittel zu einer dichten Formation%";
SELECT f.name FROM foreign_data f JOIN cards c ON f.uuid = c.uuid WHERE f.language = 'French' AND c.type LIKE '%Creature%' AND c.layout = 'normal' AND c.borderColor = 'black' AND c.artist = 'Matthew D. Wilson';
SELECT COUNT(*) FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'rare' AND r.date = '2007-02-01';
SELECT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.baseSetSize = 180 AND s.block = 'Ravnica';
SELECT (COUNT(CASE WHEN hasContentWarning = 0 THEN 1 END) * 100.0 / CAST(COUNT(cards.id) AS FLOAT)) AS percentage FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'commander' AND legalities.status = 'Legal';
SELECT (CAST(100.0 * COUNT(CASE WHEN foreign_data.language = 'French' THEN 1 END) AS FLOAT) / CAST(COUNT(*) AS FLOAT)) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE (cards.power IS NULL OR cards.power = '*');
SELECT CAST(COUNT(CASE WHEN s.type = 'expansion' THEN 1 END) * 100.0 AS FLOAT) / COUNT(*) AS percentage FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Japanese';
SELECT availability FROM cards WHERE artist = 'Daren Bader';
SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000 AND colors IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;
SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3;
SELECT language FROM foreign_data WHERE multiverseid = 149934;
SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3;
SELECT (CAST(COUNT(*) FILTER (WHERE isTextless = 1 AND layout = 'normal') AS FLOAT) * 100.0 / CAST(COUNT(*) AS FLOAT)) AS proportion FROM cards;
SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%';
SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name LIMIT 3;
SELECT language FROM set_translations WHERE setCode = 'ARC' AND setCode IN (SELECT code FROM sets WHERE mcmName = 'Archenemy')
SELECT sets.name, set_translations.translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 5;
SELECT set_translations.language, sets.type FROM sets LEFT JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 206;
SELECT sets.name, sets.id FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name LIMIT 2;
SELECT sets.id FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.isForeignOnly = 0 AND sets.isFoilOnly = 1 AND set_translations.language = 'Japanese';
SELECT name FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Russian') AND baseSetSize = (SELECT MAX(baseSetSize) FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Russian')) LIMIT 1;
SELECT (CAST(COUNT(*) FILTER (WHERE st.language = 'Chinese Simplified' AND s.isOnlineOnly = 1) AS FLOAT) * 100.0 / CAST(COUNT(*) AS FLOAT)) AS percentage FROM sets s JOIN set_translations st ON s.code = st.setCode;
SELECT COUNT(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Japanese' AND (sets.mtgoCode IS NULL OR sets.mtgoCode = '');
SELECT id FROM cards WHERE borderColor = 'black';
SELECT id FROM cards WHERE frameEffects = 'extendedart';
SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;
SELECT language FROM set_translations WHERE id = 174;
SELECT name FROM sets WHERE code = 'ALL';
SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar';
SELECT code FROM sets WHERE releaseDate = '2007-07-13';
SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage');
SELECT code FROM sets WHERE type = 'expansion';
SELECT foreign_data.name, foreign_data.type FROM foreign_data JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros';
SELECT foreign_data.language, foreign_data.flavorText, foreign_data.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie';
SELECT (CAST(COUNT(CASE WHEN cards.convertedManaCost = 16 THEN 1 END) AS FLOAT) * 100.0 / CAST(COUNT(cards.convertedManaCost) AS FLOAT)) AS percentage FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Abyssal Horror';
SELECT code FROM sets WHERE type = 'expansion';
SELECT foreign_data.name, foreign_data.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan';
SELECT foreign_data.language, foreign_data.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius';
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand = '3';
SELECT name FROM cards WHERE isTextless = 0;
SELECT manaCost FROM cards WHERE name = "Ancestor's Chosen";
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL);
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;
SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';
SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle';
SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%';
SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1;
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;
SELECT st.translation FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Italian';
SELECT COUNT(*) FROM set_translations WHERE setCode IN (SELECT setCode FROM cards WHERE name = 'Angel of Mercy');
SELECT c.name FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition';
SELECT COUNT(*) FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Korean';
SELECT COUNT(*) FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition' AND c.artist = 'Adam Rex';
SELECT baseSetSize FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT translation FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Eighth Edition') AND language = 'Chinese Simplified';
SELECT COUNT(*) > 0 AS appeared_on_mtgo FROM sets WHERE code IN (SELECT setCode FROM cards WHERE name = 'Angel of Mercy') AND mtgoCode IS NOT NULL;
SELECT s.releaseDate FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Ancestor''s Chosen';
SELECT sets.type FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition';
SELECT COUNT(DISTINCT sets.id) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL;
SELECT s.isForeignOnly FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Adarkar Valkyrie';
SELECT COUNT(*) FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL AND sets.baseSetSize < 10;
SELECT COUNT(*) FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND borderColor = 'black';
SELECT name FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') ORDER BY convertedManaCost DESC LIMIT 1;
SELECT DISTINCT artist FROM cards WHERE artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy') AND setCode = (SELECT code FROM sets WHERE name = 'Coldsnap');
SELECT name FROM cards WHERE number = 4 AND setCode = (SELECT code FROM sets WHERE name = 'Coldsnap');
SELECT COUNT(*) FROM cards T1 JOIN sets T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL);
SELECT fd.flavorText FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE fd.language = 'Italian' AND c.name = 'Ancestor''s Chosen';
SELECT fd.language FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.flavorText IS NOT NULL;
SELECT fd.type FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE fd.language = 'German' AND c.name = 'Ancestor''s Chosen';
SELECT f.text FROM foreign_data f JOIN cards c ON f.uuid = c.uuid JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND f.language = 'Italian';
SELECT fd.name FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND fd.language = 'Italian' AND c.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards c2 JOIN sets s2 ON c2.setCode = s2.code WHERE s2.name = 'Coldsnap');
SELECT r.date FROM rulings r JOIN cards c ON r.uuid = c.uuid WHERE c.name = 'Reminisce';
SELECT (SUM(c.convertedManaCost = 7) * 100.0 / COUNT(*)) AS percentage FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap';
SELECT (CAST(COUNT(*) FILTER (WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL) AS FLOAT) * 100.0 / CAST(COUNT(*) AS FLOAT)) AS percentage_incredibly_powerful FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap');
SELECT code FROM sets WHERE releaseDate = '2017-07-14';
SELECT keyruneCode FROM sets WHERE code = 'PKHC';
SELECT mcmId FROM sets WHERE code = 'SS2';
SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09';
SELECT type FROM sets WHERE name = 'From the Vault: Lore';
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';
SELECT c.name, r.text, c.hasContentWarning FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.artist = 'Jim Pavelec';
SELECT s.releaseDate FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Evacuation';
SELECT s.baseSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Rinascita di Alara';
SELECT sets.type FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Huitième édition';
SELECT st.translation FROM set_translations st JOIN cards c ON st.setCode = c.setCode JOIN foreign_data fd ON fd.uuid = c.uuid WHERE fd.name = 'Tendo Ice Bridge' AND fd.language = 'French' AND st.language = 'French';
SELECT COUNT(*) FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Tenth Edition') AND translation IS NOT NULL;
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code JOIN cards c ON c.setCode = s.code WHERE st.language = 'Japanese' AND c.name = 'Fellwar Stone';
SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Journey into Nyx Hero''s Path' ORDER BY c.convertedManaCost DESC LIMIT 1;
SELECT s.releaseDate FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.translation = 'Ola de frío';
SELECT s.type FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Samite Pilgrim';
SELECT COUNT(*) FROM cards JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedManaCost = 3;
SELECT translation FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Mirrodin') AND language = 'Chinese Simplified';
SELECT (SUM(CASE WHEN s.isNonFoilOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.language = 'Japanese';
SELECT (CAST(SUM(c.isOnlineOnly = 1) AS FLOAT) * 100.0 / CAST(SUM(st.language = 'Portuguese (Brazil)') AS FLOAT)) AS percentage FROM cards c JOIN set_translations st ON c.setCode = st.setCode WHERE st.language = 'Portuguese (Brazil)';
SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;
SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1;
SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1;
SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a';
SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1;
SELECT DISTINCT c.name FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.format = 'duel' ORDER BY c.convertedManaCost DESC LIMIT 10;
SELECT c.originalReleaseDate, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'Legal' AND c.originalReleaseDate IS NOT NULL ORDER BY c.originalReleaseDate LIMIT 1;
SELECT COUNT(DISTINCT c.id) FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.artist = 'Volkan Baǵa' AND fd.language = 'French';
SELECT COUNT(*) FROM cards c WHERE c.rarity = 'rare' AND c.types LIKE '%Enchantment%' AND c.name = 'Abundance' AND NOT EXISTS (SELECT 1 FROM legalities l WHERE l.uuid = c.uuid AND l.status != 'Legal');
SELECT l.format, c.name FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE l.status = 'Banned' AND l.format = (SELECT format FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1);
SELECT st.language FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.name = 'Battlebond';
SELECT format FROM legalities WHERE uuid IN (SELECT uuid FROM cards WHERE artist = (SELECT artist FROM cards GROUP BY artist ORDER BY COUNT(*) ASC LIMIT 1));
SELECT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.frameVersion = '1997' AND c.artist = 'D. Alexander Gregory' AND c.hasContentWarning = 1 AND l.format = 'legacy';
SELECT cards.name, legalities.format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.edhrecRank = 1 AND legalities.status = 'Banned';
SELECT CAST(AVG(set_count) AS FLOAT) AS annual_average_sets, common_language FROM (SELECT COUNT(id) AS set_count FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY strftime('%Y', releaseDate)) AS annual_counts, (SELECT language AS common_language FROM set_translations GROUP BY language ORDER BY COUNT(language) DESC LIMIT 1);
SELECT DISTINCT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena';
SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted');
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';
SELECT rulings.text FROM rulings JOIN cards ON rulings.uuid = cards.uuid WHERE cards.artist = 'Kev Walker' ORDER BY rulings.date DESC;
SELECT c.name, l.format FROM cards c JOIN legalities l ON c.uuid = l.uuid JOIN sets s ON c.setCode = s.code WHERE s.name = 'Hour of Devastation' AND l.status = 'Legal';
SELECT name FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Korean') AND code NOT IN (SELECT setCode FROM set_translations WHERE language = 'Japanese');
SELECT DISTINCT frameVersion FROM cards WHERE artist = 'Allen Williams' UNION SELECT DISTINCT name FROM cards WHERE artist = 'Allen Williams' UNION SELECT DISTINCT cards.name FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned';
SELECT DisplayName, MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') GROUP BY DisplayName ORDER BY Reputation DESC LIMIT 1;
SELECT DisplayName FROM users WHERE strftime('%Y', CreationDate) = '2011';
SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01';
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1;
SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1;
SELECT COUNT(*) FROM users WHERE Views > 10 AND strftime('%Y', CreationDate) > '2013';
SELECT COUNT(*) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = "Eliciting priors from experts";
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ORDER BY p.ViewCount DESC LIMIT 1;
SELECT users.DisplayName FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE posts.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);
SELECT CAST(SUM(posts.CommentCount) AS FLOAT) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';
SELECT MAX(AnswerCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');
SELECT u.DisplayName FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = "Examples for teaching: Correlation does not mean causation";
SELECT COUNT(*) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie' AND posts.ParentId IS NULL;
SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ClosedDate IS NOT NULL;
SELECT COUNT(*) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.Age > 65 AND posts.Score >= 20;
SELECT u.Location FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts';
SELECT posts.Body FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'bayesian';
SELECT posts.Body FROM tags JOIN posts ON tags.ExcerptPostId = posts.Id ORDER BY tags.Count DESC LIMIT 1;
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie';
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND strftime('%Y', Date) = '2011';
SELECT u.DisplayName FROM users u JOIN (SELECT UserId, COUNT(Id) AS badge_count FROM badges GROUP BY UserId ORDER BY badge_count DESC LIMIT 1) b ON u.Id = b.UserId;
SELECT AVG(Score) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie';
SELECT AVG(CAST(badge_count AS FLOAT)) FROM (SELECT COUNT(badges.Id) AS badge_count FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Views > 200 GROUP BY users.Id);
SELECT (CAST(COUNT(DISTINCT p.Id) FILTER (WHERE u.Age > 65) AS FLOAT) / COUNT(DISTINCT p.Id)) * 100 AS percentage FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 5;
SELECT COUNT(*) FROM votes WHERE UserId = 58 AND DATE(CreationDate) = '2010-07-19';
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;
SELECT COUNT(Id) FROM badges WHERE Name = 'Revival';
SELECT p.Title FROM posts p JOIN comments c ON p.Id = c.PostId ORDER BY c.Score DESC LIMIT 1;
SELECT CommentCount FROM posts WHERE ViewCount = 1910;
SELECT posts.FavoriteCount FROM comments JOIN posts ON comments.PostId = posts.Id WHERE comments.UserId = '3025' AND comments.CreationDate = '2014-04-23 20:29:39.0';
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ParentId = 107829 AND p.CommentCount = 1;
SELECT CASE WHEN p.ClosedDate IS NOT NULL THEN 'Yes' ELSE 'No' END AS WellFinished FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.UserId = '23853' AND c.CreationDate = '2013-07-12 09:08:18.0';
SELECT u.Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = '65041';
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini');
SELECT u.DisplayName FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.Id = '6347';
SELECT COUNT(votes.Id) FROM votes JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%';
SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'DatEpicCoderGuyWhoPrograms';
SELECT CAST((SELECT COUNT(posts.Id) FROM posts WHERE OwnerUserId = '24') AS FLOAT) / CAST((SELECT COUNT(votes.Id) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE OwnerUserId = '24')) AS FLOAT);
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
SELECT Text FROM comments WHERE Score = 17;
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';
SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'SilentGhost';
SELECT UserDisplayName FROM comments WHERE Text = 'thank you user93!'
SELECT c.Text FROM comments c JOIN users u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion';
SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Understanding what Dassault iSight is doing?';
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'How does gentle boosting differ from AdaBoost?';
SELECT DISTINCT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Necromancer' LIMIT 10;
SELECT LastEditorDisplayName FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data';
SELECT Title FROM posts WHERE LastEditorUserId = (SELECT Id FROM users WHERE DisplayName = 'Vebjorn Ljosa');
SELECT SUM(CAST(posts.Score AS FLOAT)) AS total_score, users.WebsiteUrl FROM posts JOIN users ON posts.LastEditorUserId = users.Id WHERE users.DisplayName = 'Yevgeny';
SELECT comments.Text FROM comments JOIN postHistory ON comments.UserId = postHistory.UserId JOIN posts ON postHistory.PostId = posts.Id WHERE posts.Title = 'Why square the difference instead of taking the absolute value in standard deviation?';
SELECT SUM(CAST(v.BountyAmount AS FLOAT)) FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data%';
SELECT u.DisplayName FROM votes v JOIN posts p ON v.PostId = p.Id JOIN users u ON v.UserId = u.Id WHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%';
SELECT p.Title, c.Text, AVG(CAST(p.ViewCount AS FLOAT)) FROM posts p LEFT JOIN comments c ON p.Id = c.PostId WHERE p.Tags LIKE '%<humor>%' GROUP BY p.Id;
SELECT COUNT(*) FROM comments WHERE UserId = 13;
SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1;
SELECT Id FROM users ORDER BY Views LIMIT 1;
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011';
SELECT COUNT(*) FROM (SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Name) > 5);
SELECT COUNT(DISTINCT u.Id) FROM users u JOIN badges b1 ON u.Id = b1.UserId JOIN badges b2 ON u.Id = b2.UserId WHERE u.Location = 'New York' AND b1.Name = 'Teacher' AND b2.Name = 'Supporter';
SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 1;
SELECT u.Id FROM users u WHERE u.Views >= 1000 AND u.Id IN (SELECT ph.UserId FROM postHistory ph GROUP BY ph.PostId HAVING COUNT(ph.Id) = 1);
SELECT badges.UserId, badges.Name FROM badges JOIN (SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId ORDER BY CommentCount DESC LIMIT 1) AS top_commenter ON badges.UserId = top_commenter.UserId;
SELECT COUNT(DISTINCT b.UserId) FROM badges b JOIN users u ON b.UserId = u.Id WHERE LOWER(u.Location) = 'india' AND b.Name = 'Teacher';
SELECT (COUNT(CASE WHEN strftime('%Y', Date) = '2010' THEN 1 END) * 100.0 / COUNT(Name)) - (COUNT(CASE WHEN strftime('%Y', Date) = '2011' THEN 1 END) * 100.0 / COUNT(Name)) AS percentage_difference FROM badges WHERE Name = 'Student';
SELECT (SELECT GROUP_CONCAT(DISTINCT PostHistoryTypeId) FROM postHistory WHERE PostId = 3720) AS PostHistoryTypeIDs, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS UniqueUserCount;
SELECT p.*, (SELECT ViewCount FROM posts WHERE Id = 61217) AS Popularity FROM postLinks pl JOIN posts p ON pl.RelatedPostId = p.Id WHERE pl.PostId = 61217;
SELECT p.Score, pl.LinkTypeId FROM posts p LEFT JOIN postLinks pl ON p.Id = pl.PostId WHERE p.Id = 395;
SELECT Id, OwnerUserId FROM posts WHERE Score > 60;
SELECT SUM(FavoriteCount) FROM posts WHERE OwnerUserId = 686 AND strftime('%Y', CreaionDate) = '2011';
SELECT CAST(SUM(UpVotes) AS FLOAT) / COUNT(Id) AS AverageUpVotes, CAST(SUM(Age) AS FLOAT) / COUNT(Id) AS AverageUserAge FROM users WHERE Id IN (SELECT OwnerUserId FROM posts GROUP BY OwnerUserId HAVING COUNT(OwnerUserId) > 10);
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer';
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0';
SELECT COUNT(*) FROM comments WHERE Score > 60;
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0';
SELECT COUNT(Id) FROM posts WHERE Score = 10;
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users);
SELECT u.Reputation FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Date = '2010-07-19 19:39:08.0';
SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Pierre';
SELECT badges.Date FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Location = 'Rochester, NY';
SELECT (COUNT(DISTINCT UserId) * 100.0 / CAST((SELECT COUNT(Id) FROM users) AS FLOAT)) AS percentage FROM badges WHERE Name = 'Teacher';
SELECT (CAST(COUNT(CASE WHEN u.Age BETWEEN 13 AND 18 THEN 1 END) AS FLOAT) * 100.0 / CAST(COUNT(*) AS FLOAT)) AS percentage_of_teenagers FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Organizer';
SELECT c.Score FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.CreaionDate = '2010-07-19 19:19:56.0';
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:37:33.0';
SELECT DISTINCT u.Age FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria';
SELECT COUNT(DISTINCT b.UserId) FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65;
SELECT u.Views FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0';
SELECT badges.Name FROM badges JOIN users ON badges.UserId = users.Id WHERE users.Reputation = (SELECT MIN(Reputation) FROM users);
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie';
SELECT COUNT(DISTINCT badges.UserId) FROM badges JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Supporter' AND users.Age > 65;
SELECT DisplayName FROM users WHERE Id = 30;
SELECT COUNT(*) FROM users WHERE Location LIKE '%New York%' OR Location LIKE '%NYC%' OR Location LIKE '%New-York%';
SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2010';
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65;
SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);
SELECT (SELECT COUNT(Id) FROM votes WHERE strftime('%Y', CreationDate) = '2010') * 1.0 / (SELECT COUNT(Id) FROM votes WHERE strftime('%Y', CreationDate) = '2011') AS vote_ratio;
SELECT DISTINCT TRIM('<>' FROM SUBSTR(p.Tags, INSTR(p.Tags, '<') + 1, INSTR(p.Tags, '>') - INSTR(p.Tags, '<') - 1)) AS TagName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'John Salvatier';
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo');
SELECT COUNT(*) FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'Harlan';
SELECT Id FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'slashnick') ORDER BY AnswerCount DESC LIMIT 1;
SELECT users.DisplayName, CAST(SUM(posts.ViewCount) AS FLOAT) AS TotalViews FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY users.DisplayName ORDER BY TotalViews DESC LIMIT 1;
SELECT COUNT(DISTINCT p.Id) FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN votes v ON p.Id = v.PostId WHERE u.DisplayName = 'Matt Parker' GROUP BY p.Id HAVING COUNT(v.Id) > 4;
SELECT COUNT(*) FROM comments c JOIN posts p ON c.PostId = p.Id JOIN users u ON p.OwnerUserId = u.Id WHERE c.Score < 60 AND u.DisplayName = 'Neil McGuigan';
WITH RECURSIVE split_tags(post_id, tag, rest) AS (SELECT p.Id, TRIM(SUBSTR(p.Tags, 2, INSTR(p.Tags, '>', 1) - 2)), SUBSTR(p.Tags, INSTR(p.Tags, '>', 1) + 1) FROM posts p WHERE p.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Mark Meckes') AND p.CommentCount = 0 AND p.Tags IS NOT NULL UNION ALL SELECT post_id, TRIM(SUBSTR(rest, 2, INSTR(rest, '>', 1) - 2)), SUBSTR(rest, INSTR(rest, '>', 1) + 1) FROM split_tags WHERE LENGTH(rest) > 0) SELECT DISTINCT tag FROM split_tags WHERE LENGTH(tag) > 0;
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Organizer';
SELECT (100.0 * CAST(SUM(CASE WHEN ',' || posts.Tags || ',' LIKE '%<r>%' THEN 1 ELSE 0 END) AS FLOAT) / CAST(COUNT(posts.Id) AS FLOAT)) AS percentage FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Community';
SELECT CAST((SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Mornington') AS FLOAT) - CAST((SELECT SUM(ViewCount) FROM posts WHERE OwnerDisplayName = 'Amos') AS FLOAT) AS ViewCountDifference;
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014';
SELECT COUNT(*) FROM posts WHERE CreaionDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';
SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users);
SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';
SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60;
SELECT posts.Title, comments.UserDisplayName FROM comments JOIN posts ON comments.PostId = posts.Id WHERE comments.Score > 60;
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'North Pole' AND strftime('%Y', b.Date) = '2011';
SELECT u.DisplayName, u.WebsiteUrl FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.FavoriteCount > 150 AND u.WebsiteUrl IS NOT NULL;
SELECT COUNT(postHistory.Id) AS post_history_count, posts.LastEditDate FROM posts JOIN postHistory ON posts.Id = postHistory.PostId WHERE posts.Title = "What is the best introductory Bayesian statistics textbook?" GROUP BY posts.Id;
SELECT users.LastAccessDate, users.Location FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'outliers';
SELECT p2.Title FROM posts p1 JOIN postLinks pl ON p1.Id = pl.PostId JOIN posts p2 ON pl.RelatedPostId = p2.Id WHERE p1.Title = 'How to tell if something happened in a data set which monitors a value over time';
SELECT p.Id AS PostId, b.Name AS BadgeName FROM posts p JOIN users u ON p.OwnerUserId = u.Id AND u.DisplayName = 'Samuel' AND strftime('%Y', p.CreaionDate) = '2013' LEFT JOIN badges b ON b.UserId = u.Id AND strftime('%Y', b.Date) = '2013';
SELECT OwnerDisplayName FROM posts ORDER BY ViewCount DESC LIMIT 1;
SELECT u.DisplayName, u.Location FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'hypothesis-testing';
SELECT related_posts.Title, postLinks.LinkTypeId FROM posts AS main_post JOIN postLinks ON main_post.Id = postLinks.PostId JOIN posts AS related_posts ON postLinks.RelatedPostId = related_posts.Id WHERE main_post.Title = 'What are principal component scores?';
SELECT p2.OwnerDisplayName FROM posts p1 JOIN posts p2 ON p1.ParentId = p2.Id WHERE p1.ParentId IS NOT NULL AND p2.OwnerDisplayName IS NOT NULL ORDER BY p1.Score DESC LIMIT 1;
SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 8 AND v.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8);
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5;
SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;
SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);
SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT COUNT(DISTINCT p.Id) FROM posts p JOIN votes v ON p.Id = v.PostId WHERE strftime('%Y', p.CreaionDate) = '2011' AND v.BountyAmount = 50;
SELECT Id FROM users WHERE Age IS NOT NULL ORDER BY Age ASC LIMIT 1;
SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%';
SELECT CAST(COUNT(pl.Id) AS FLOAT) / 12.0 AS average_monthly_links FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE strftime('%Y', pl.CreationDate) = '2010' AND p.AnswerCount <= 2;
SELECT p.Id FROM posts p JOIN votes v ON p.Id = v.PostId WHERE v.UserId = 1465 ORDER BY p.FavoriteCount DESC LIMIT 1;
SELECT posts.Title FROM postLinks INNER JOIN posts ON postLinks.PostId = posts.Id ORDER BY postLinks.CreationDate LIMIT 1;
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.Id ORDER BY COUNT(b.Name) DESC LIMIT 1;
SELECT MIN(votes.CreationDate) FROM votes JOIN users ON votes.UserId = users.Id WHERE users.DisplayName = 'chl';
SELECT MIN(posts.CreaionDate) FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE users.Age = (SELECT MIN(Age) FROM users);
SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Autobiographer' ORDER BY b.Date LIMIT 1;
SELECT COUNT(*) FROM (SELECT DISTINCT u.Id FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' GROUP BY u.Id HAVING SUM(p.FavoriteCount) >= 4) AS subquery;
SELECT AVG(post_count) FROM (SELECT COUNT(DISTINCT v.PostId) AS post_count FROM votes v WHERE v.UserId IN (SELECT u.Id FROM users u WHERE u.Age = (SELECT MAX(Age) FROM users)) GROUP BY v.UserId);
SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;
SELECT COUNT(*) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Jay Stevens' AND strftime('%Y', posts.CreaionDate) = '2010';
SELECT Id, Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky') ORDER BY ViewCount DESC LIMIT 1;
SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts);
SELECT AVG(CAST(Score AS FLOAT)) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Stephen Turner');
SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount > 20000 AND strftime('%Y', p.CreaionDate) = '2011';
SELECT Id, OwnerDisplayName FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE strftime('%Y', CreaionDate) = '2010') AND strftime('%Y', CreaionDate) = '2010';
SELECT CAST((SELECT COUNT(*) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE strftime('%Y', p.CreaionDate) = '2011' AND u.Reputation > 1000) AS FLOAT) * 100.0 / COUNT(*) AS percentage FROM posts;
SELECT (100.0 * CAST(COUNT(Id) FILTER (WHERE Age BETWEEN 13 AND 18) AS FLOAT) / CAST(COUNT(Id) AS FLOAT)) AS percentage FROM users;
SELECT p.ViewCount, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Computer Game Datasets';
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT CAST(AVG(ViewCount) AS FLOAT) FROM posts);
SELECT CommentCount FROM posts WHERE Score = (SELECT MAX(Score) FROM posts);
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;
SELECT p.LastEditorDisplayName, u.Location FROM posts p LEFT JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Id = 183 ORDER BY p.LastEditDate DESC LIMIT 1;
SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC LIMIT 1;
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;
SELECT CAST(julianday(MIN(badges.Date)) AS FLOAT) - CAST(julianday(users.CreationDate) AS FLOAT) AS days_to_badge FROM users JOIN badges ON users.Id = badges.UserId WHERE users.DisplayName = 'Zolomon';
SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId = u.Id) AS post_count, (SELECT COUNT(*) FROM comments WHERE UserId = u.Id) AS comment_count FROM users u WHERE u.CreationDate = (SELECT MAX(CreationDate) FROM users);
SELECT c.Text, c.UserDisplayName FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title = 'Analysing wind data with R' ORDER BY c.CreationDate DESC LIMIT 10;
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol';
SELECT COUNT(*) FROM posts p JOIN tags t ON p.Tags LIKE '%' || '<' || t.TagName || '>' || '%' WHERE t.TagName = 'careers';
SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon';
SELECT (SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')) AS CommentCount, (SELECT COUNT(*) FROM posts WHERE ParentId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')) AS AnswerCount;
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';
SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30;
SELECT (100.0 * CAST(COUNT(CASE WHEN posts.Score > 50 THEN 1 END) AS FLOAT) / CAST(COUNT(posts.Id) AS FLOAT)) AS percentage FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.Reputation = (SELECT MAX(Reputation) FROM users);
SELECT COUNT(*) FROM posts WHERE Score < 20;
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';
SELECT u.Reputation, u.UpVotes FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'fine, you win :)';
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.Title LIKE '%linear regression%';
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id WHERE p.ViewCount BETWEEN 100 AND 150 ORDER BY c.Score DESC LIMIT 1;
SELECT u.CreationDate, u.Age FROM users u JOIN comments c ON u.Id = c.UserId WHERE u.WebsiteUrl LIKE '%http://%' AND c.Text IS NOT NULL
SELECT COUNT(DISTINCT c.PostId) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.ViewCount < 5;
SELECT COUNT(*) FROM comments WHERE Score = 0 AND PostId IN (SELECT Id FROM posts WHERE CommentCount = 1);
SELECT COUNT(DISTINCT users.Id) FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Score = 0 AND users.Age = 40;
SELECT posts.Id, comments.Text FROM posts JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Group differences on a five point Likert item';
SELECT u.UpVotes FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = "R is also lazy evaluated.";
SELECT comments.Text FROM comments JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'Harvey Motulsky';
SELECT DISTINCT u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0;
SELECT (CAST(COUNT(DISTINCT c.UserId) AS FLOAT) * 100.0 / CAST((SELECT COUNT(DISTINCT UserId) FROM comments WHERE Score BETWEEN 5 AND 10) AS FLOAT)) AS percentage FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 5 AND 10 AND u.UpVotes = 0;
SELECT sp.power_name FROM superhero sh JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sh.superhero_name = '3-D Man';
SELECT COUNT(DISTINCT hp.hero_id) FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength';
SELECT COUNT(*) FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength')) AND height_cm > 200;
SELECT s.full_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.full_name HAVING COUNT(hp.power_id) > 15;
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';
SELECT colour.colour FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse';
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';
SELECT superhero.superhero_name FROM superhero JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Blue' AND hair_colour.colour = 'Blond';
SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT s.superhero_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' ORDER BY s.height_cm DESC;
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';
SELECT colour.colour, COUNT(superhero.id) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour ORDER BY COUNT(superhero.id) DESC;
SELECT AVG(CAST(height_cm AS FLOAT)) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT s.superhero_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE p.publisher_name = 'Marvel Comics' AND sp.power_name = 'Super Strength';
SELECT COUNT(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics';
SELECT publisher.publisher_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value LIMIT 1;
SELECT COUNT(*) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II';
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value LIMIT 1;
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch';
SELECT COUNT(*) FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE gender.gender = 'Female' AND attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = 100;
SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero_name ORDER BY COUNT(hero_power.power_id) DESC LIMIT 1;
SELECT COUNT(*) FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire';
SELECT (SUM(alignment.alignment = 'Neutral') * 100.0 / COUNT(superhero.id)) AS neutral_alignment_percentage, COUNT(CASE WHEN alignment.alignment = 'Neutral' AND publisher.publisher_name = 'Marvel Comics' THEN superhero.id END) AS marvel_neutral_alignment_count FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id JOIN publisher ON superhero.publisher_id = publisher.id;
SELECT ABS(CAST(SUM(publisher_name = 'Marvel Comics') AS FLOAT) - CAST(SUM(publisher_name = 'DC Comics') AS FLOAT)) AS difference FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher_name IN ('DC Comics', 'Marvel Comics');
SELECT id FROM publisher WHERE publisher_name = 'Star Trek';
SELECT AVG(attribute_value) FROM hero_attribute;
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;
SELECT colour FROM colour WHERE id = (SELECT eye_colour_id FROM superhero WHERE id = 75);
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Deathlok';
SELECT AVG(CAST(weight_kg AS FLOAT)) FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female';
SELECT DISTINCT sp.power_name FROM superhero sh JOIN gender g ON sh.gender_id = g.id JOIN hero_power hp ON sh.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE g.gender = 'Male' LIMIT 5;
SELECT superhero_name FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';
SELECT s.superhero_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.height_cm BETWEEN 170 AND 190 AND c.colour = 'No Colour';
SELECT sp.power_name FROM superpower sp JOIN hero_power hp ON sp.id = hp.power_id WHERE hp.hero_id = 56;
SELECT sh.full_name FROM superhero sh JOIN race r ON sh.race_id = r.id WHERE r.race = 'Demi-God' LIMIT 5;
SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;
SELECT colour.colour FROM superhero JOIN race ON superhero.race_id = race.id JOIN colour ON superhero.hair_colour_id = colour.id WHERE superhero.height_cm = 185 AND race.race = 'Human';
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id ORDER BY superhero.weight_kg DESC LIMIT 1;
SELECT (CAST(SUM(CASE WHEN publisher_id = 13 THEN 1 ELSE 0 END) AS FLOAT) * 100.0 / CAST(COUNT(*) AS FLOAT)) AS marvel_percentage FROM superhero WHERE height_cm BETWEEN 150 AND 180;
SELECT s.superhero_name FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male' AND s.weight_kg > (SELECT CAST(AVG(weight_kg) AS FLOAT) * 0.79 FROM superhero);
SELECT power_name FROM superpower INNER JOIN hero_power ON superpower.id = hero_power.power_id GROUP BY power_name ORDER BY COUNT(power_name) DESC LIMIT 1;
SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Abomination';
SELECT sp.power_name FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE hp.hero_id = 1;
SELECT COUNT(DISTINCT hero_id) FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id WHERE power_name = 'Stealth';
SELECT s.full_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Strength' ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT AVG(CAST(skin_colour_id = 1 AS FLOAT)) FROM superhero;
SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';
SELECT s.superhero_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE p.publisher_name = 'Dark Horse Comics' AND a.attribute_name = 'Durability' ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien';
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight';
SELECT s.eye_colour_id AS eyes, s.hair_colour_id AS hair, s.skin_colour_id AS skin_colour FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';
SELECT s.superhero_name, p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.hair_colour_id = s.skin_colour_id AND s.hair_colour_id = s.eye_colour_id;
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';
SELECT (SUM(sc.colour = 'Blue') * 100.0 / COUNT(*)) AS percentage FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN colour sc ON s.skin_colour_id = sc.id WHERE g.gender = 'Female';
SELECT superhero_name, race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE full_name = 'Charles Chandler';
SELECT gender.gender FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.superhero_name = 'Agent 13';
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Adaptation';
SELECT COUNT(*) FROM hero_power JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Amazo';
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.full_name = 'Hunter Zolomon';
SELECT s.height_cm FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE c.colour = 'Amber';
SELECT s.superhero_name FROM superhero s JOIN colour c1 ON s.eye_colour_id = c1.id JOIN colour c2 ON s.hair_colour_id = c2.id WHERE c1.colour = 'Black' AND c2.colour = 'Black';
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold');
SELECT s.full_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.race = 'Vampire';
SELECT s.superhero_name FROM superhero s JOIN alignment a ON s.alignment_id = a.id WHERE a.alignment = 'Neutral';
SELECT COUNT(DISTINCT hero_id) FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength');
SELECT r.race, a.alignment FROM superhero s JOIN race r ON s.race_id = r.id JOIN alignment a ON s.alignment_id = a.id WHERE s.superhero_name = 'Cameron Hicks';
SELECT (CAST(COUNT(*) AS FLOAT) * 100.0 / CAST((SELECT COUNT(*) FROM superhero s INNER JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics') AS FLOAT)) AS percent_female_heroes FROM superhero s INNER JOIN gender g ON s.gender_id = g.id INNER JOIN publisher p ON s.publisher_id = p.id WHERE g.gender = 'Female' AND p.publisher_name = 'Marvel Comics';
SELECT AVG(CAST(weight_kg AS FLOAT)) FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';
SELECT CAST((SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') AS FLOAT) - CAST((SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') AS FLOAT) AS weight_difference;
SELECT superhero_name, AVG(height_cm) FROM superhero GROUP BY superhero_name;
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Abomination';
SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value DESC LIMIT 1;
SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;
SELECT attribute.attribute_name, hero_attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';
SELECT s.superhero_name FROM superhero s JOIN colour e ON s.eye_colour_id = e.id JOIN colour h ON s.hair_colour_id = h.id WHERE e.colour = 'Blue' AND h.colour = 'Brown';
SELECT DISTINCT p.publisher_name FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE s.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');
SELECT COUNT(*) FROM superhero WHERE publisher_id = 1;
SELECT (CAST(COUNT(*) AS FLOAT) * 100.0 / CAST((SELECT COUNT(*) FROM superhero) AS FLOAT)) AS percentage_of_blue_eyed_heroes FROM superhero WHERE eye_colour_id = 7;
SELECT (SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) * 1.0) / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) AS ratio FROM superhero;
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT id FROM superpower WHERE power_name = 'Cryokinesis';
SELECT superhero_name FROM superhero WHERE id = 294;
SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan';
SELECT sp.power_name FROM superhero AS sh JOIN hero_power AS hp ON sh.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.full_name = 'Helen Parr';
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE weight_kg = 108 AND height_cm = 188;
SELECT publisher_name FROM publisher JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.id = 38;
SELECT race.race FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN race ON superhero.race_id = race.id WHERE hero_attribute.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute);
SELECT a.alignment, sp.power_name FROM superhero s JOIN alignment a ON s.alignment_id = a.id JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.superhero_name = 'Atom IV';
SELECT superhero_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5;
SELECT AVG(ha.attribute_value) FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE s.alignment_id = 3;
SELECT colour.colour FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100;
SELECT COUNT(*) FROM superhero WHERE alignment_id = 1 AND gender_id = 2;
SELECT s.superhero_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_value BETWEEN 75 AND 80;
SELECT race.race FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN colour ON superhero.hair_colour_id = colour.id JOIN race ON superhero.race_id = race.id WHERE gender.gender = 'Male' AND colour.colour = 'blue';
SELECT (CAST(SUM(CASE WHEN gender.id = 2 THEN 1 ELSE 0 END) AS FLOAT) * 100.0 / CAST(COUNT(*) AS FLOAT)) AS female_percentage FROM superhero JOIN gender ON superhero.gender_id = gender.id WHERE superhero.alignment_id = 2;
SELECT CAST(SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) AS FLOAT) - CAST(SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) AS FLOAT) AS difference FROM superhero T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL;
SELECT ha.attribute_value FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = 'Hulk' AND a.attribute_name = 'Strength';
SELECT sp.power_name FROM superhero AS sh JOIN hero_power AS hp ON sh.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Ajax';
SELECT COUNT(*) FROM superhero WHERE skin_colour_id = (SELECT id FROM colour WHERE colour = 'Green') AND alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');
SELECT COUNT(*) FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics';
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Wind Control' ORDER BY s.superhero_name;
SELECT g.gender FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id JOIN gender g ON s.gender_id = g.id WHERE sp.power_name = 'Phoenix Force';
SELECT superhero_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher_name = 'DC Comics' ORDER BY weight_kg DESC LIMIT 1;
SELECT AVG(CAST(s.height_cm AS FLOAT)) FROM superhero s JOIN race r ON s.race_id = r.id JOIN publisher p ON s.publisher_id = p.id WHERE r.race <> 'Human' AND p.publisher_name = 'Dark Horse Comics';
SELECT COUNT(*) FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = 100;
SELECT CAST((SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'DC Comics') - (SELECT COUNT(*) FROM superhero s JOIN publisher p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics') AS FLOAT) AS difference;
SELECT attribute.attribute_name FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value ASC LIMIT 1;
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination';
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';
SELECT (SUM(gender.gender = 'Female') * 100.0 / COUNT(*)) AS female_percentage FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas';
SELECT (CAST(SUM(CASE WHEN a.alignment = 'Good' THEN 1 ELSE 0 END) AS FLOAT) * 100.0 / CAST(COUNT(*) AS FLOAT)) AS percentage FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN alignment a ON s.alignment_id = a.id WHERE p.publisher_name = 'Marvel Comics';
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';
SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1;
SELECT full_name FROM superhero WHERE superhero_name = 'Alien';
SELECT s.full_name FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.weight_kg < 100 AND c.colour = 'Brown';
SELECT ha.attribute_value FROM hero_attribute ha JOIN superhero s ON ha.hero_id = s.id WHERE s.superhero_name = 'Aquababy';
SELECT s.weight_kg, r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.id = 40;
SELECT AVG(CAST(height_cm AS FLOAT)) FROM superhero JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';
SELECT superhero.id FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence';
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf';
SELECT sp.power_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.height_cm > 0.8 * CAST((SELECT AVG(height_cm) FROM superhero) AS FLOAT);
SELECT d.driverRef FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 20 ORDER BY q.q1 DESC LIMIT 5;
SELECT d.surname FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 19 ORDER BY q.q2 LIMIT 1;
SELECT DISTINCT r.year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.location = 'Shanghai';
SELECT races.url FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Circuit de Barcelona-Catalunya';
SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Germany';
SELECT DISTINCT res.position FROM results res JOIN constructors c ON res.constructorId = c.constructorId WHERE c.name = 'Renault' AND res.position IS NOT NULL;
SELECT COUNT(*) FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2010 AND circuits.country NOT IN ('Malaysia', 'Bahrain', 'Singapore', 'Japan', 'China', 'UAE', 'Korea', 'India', 'Spain', 'Turkey', 'Monaco', 'France', 'UK', 'Germany', 'Hungary', 'Belgium', 'Italy', 'Portugal', 'Netherlands', 'Sweden', 'Switzerland', 'Russia', 'Azerbaijan');
SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Spain';
SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Australian Grand Prix';
SELECT url FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit');
SELECT r.time FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Sepang International Circuit';
SELECT circuits.lat, circuits.lng FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Abu Dhabi Grand Prix';
SELECT constructors.nationality FROM constructorResults JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructorResults.raceId = 24 AND constructorResults.points = 1;
SELECT q1 FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceId = 354;
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.q2 = '1:40.000' AND q.raceId = 355;
SELECT number FROM qualifying WHERE raceId = 903 AND q3 LIKE '1:54%';
SELECT COUNT(*) FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL;
SELECT s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;
SELECT COUNT(DISTINCT driverId) FROM results JOIN races ON results.raceId = races.raceId WHERE races.date = '2015-11-29' AND results.position IS NOT NULL AND results.time IS NOT NULL;
SELECT d.driverId FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob LIMIT 1;
SELECT d.url FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.raceId = 161 AND lt.time LIKE '1:27%';
SELECT d.nationality FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = 933 ORDER BY r.fastestLapSpeed DESC LIMIT 1;
SELECT circuits.lat, circuits.lng FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Malaysian Grand Prix';
SELECT constructors.url FROM constructorResults JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructorResults.raceId = 9 ORDER BY constructorResults.points DESC LIMIT 1;
SELECT q1 FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi' AND qualifying.raceId = 345;
SELECT d.nationality FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.q2 = '1:15.000' AND q.raceId = 347;
SELECT d.code FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 45 AND q.q3 LIKE '1:33%';
SELECT r.time FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.forename = 'Bruce' AND d.surname = 'McLaren' AND r.raceId = 743;
SELECT drivers.forename, drivers.surname FROM results JOIN races ON results.raceId = races.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE races.name = 'San Marino Grand Prix' AND races.year = 2006 AND results.position = 2;
SELECT s.url FROM seasons s JOIN races r ON s.year = r.year WHERE r.raceId = 901;
SELECT COUNT(DISTINCT driverId) FROM results JOIN races ON results.raceId = races.raceId WHERE races.date = '2015-11-29' AND results.positionText IN ('R', 'D', 'N', 'W', 'F', 'E') AND results.time IS NOT NULL;
SELECT d.driverId, d.forename, d.surname, d.dob FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = 872 AND r.time IS NOT NULL ORDER BY d.dob DESC LIMIT 1;
SELECT d.forename || ' ' || d.surname AS full_name FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId WHERE lt.raceId = 348 ORDER BY lt.time ASC LIMIT 1;
SELECT d.nationality FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results) LIMIT 1;
SELECT (CAST(r1.fastestLapSpeed AS FLOAT) - CAST(r2.fastestLapSpeed AS FLOAT)) / CAST(r1.fastestLapSpeed AS FLOAT) * 100 AS percent_faster FROM results r1 JOIN results r2 ON r1.driverId = r2.driverId JOIN drivers d ON r1.driverId = d.driverId WHERE d.forename = 'Paul' AND d.surname = 'di Resta' AND r1.raceId = 853 AND r2.raceId = 854;
SELECT (CAST(COUNT(results.time) AS FLOAT) * 100.0 / CAST(COUNT(results.driverId) AS FLOAT)) AS percentage FROM results JOIN races ON results.raceId = races.raceId WHERE races.date = '1983-07-16';
SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix';
SELECT COUNT(raceId) AS number_of_races_2005 FROM races WHERE year = 2005;
SELECT name FROM races WHERE strftime('%Y-%m', date) = (SELECT strftime('%Y-%m', MIN(date)) FROM races);
SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT MAX(round) FROM races WHERE year = 1999);
SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1;
SELECT name FROM races WHERE year = 2017 AND raceId NOT IN (SELECT raceId FROM races WHERE year = 2000);
SELECT c.country, c.name, c.location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.name = 'European Grand Prix' ORDER BY r.year LIMIT 1;
SELECT MAX(races.year) FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix';
SELECT COUNT(DISTINCT year) FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit' AND races.name = 'British Grand Prix';
SELECT drivers.forename, drivers.surname FROM results JOIN races ON results.raceId = races.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE races.year = 2010 AND races.name = 'Singapore Grand Prix' ORDER BY results.position;
SELECT d.forename, d.surname, ds.points FROM driverStandings ds JOIN drivers d ON ds.driverId = d.driverId WHERE ds.points = (SELECT MAX(points) FROM driverStandings);
SELECT d.forename || ' ' || d.surname AS driver_name, r.points FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.year = 2017 AND ra.name = 'Chinese Grand Prix' ORDER BY r.positionOrder LIMIT 3;
SELECT drivers.forename, drivers.surname, races.name FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE lapTimes.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes);
SELECT AVG(CAST(lapTimes.milliseconds AS FLOAT)) FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix' AND races.year = 2009;
SELECT 100.0 * CAST(COUNT(CASE WHEN r.position > 1 THEN r.raceId END) AS FLOAT) / CAST(COUNT(r.raceId) AS FLOAT) AS percentage FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE d.surname = 'Hamilton' AND ra.year >= 2010;
SELECT d.forename || ' ' || d.surname AS driver_name, d.nationality, MAX(ds.points) AS max_points FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE ds.wins = (SELECT MAX(ds2.wins) FROM driverStandings ds2) GROUP BY d.driverId ORDER BY max_points DESC LIMIT 1;
SELECT forename, surname, CAST((strftime('%Y', 'now') - strftime('%Y', dob)) AS FLOAT) AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;
SELECT c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitId HAVING COUNT(r.raceId) = 4;
SELECT circuits.name AS circuit_name, circuits.location, races.name AS race_name FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.country = 'USA' AND races.year = 2006;
SELECT races.name, circuits.name, circuits.location FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE strftime('%m', races.date) = '09' AND strftime('%Y', races.date) = '2005';
SELECT races.name FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.position < 20;
SELECT COUNT(*) FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND circuits.name = 'Sepang International Circuit' AND results.points = (SELECT MAX(points) FROM results WHERE results.raceId = races.raceId)
SELECT races.name, races.year FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY results.milliseconds ASC LIMIT 1;
SELECT AVG(results.points) FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND races.year = 2000;
SELECT races.name, results.points FROM results JOIN races ON results.raceId = races.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = (SELECT MIN(races.year) FROM results JOIN races ON results.raceId = races.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton') LIMIT 1;
SELECT races.name, circuits.country FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date;
SELECT races.name, races.year, circuits.location FROM races JOIN circuits ON races.circuitId = circuits.circuitId JOIN (SELECT raceId, SUM(laps) AS total_laps FROM results GROUP BY raceId) AS race_laps ON races.raceId = race_laps.raceId WHERE race_laps.total_laps = (SELECT MAX(total_laps) FROM (SELECT SUM(laps) AS total_laps FROM results GROUP BY raceId)) LIMIT 1;
SELECT (CAST(100.0 * COUNT(CASE WHEN circuits.country = 'Germany' THEN 1 END) AS FLOAT) / CAST(COUNT(*) AS FLOAT)) AS percentage FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'European Grand Prix';
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';
SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1;
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';
SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits);
SELECT COUNT(*) FROM drivers WHERE code IS NULL;
SELECT nationality FROM drivers ORDER BY dob LIMIT 1;
SELECT surname FROM drivers WHERE nationality = 'Italian';
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';
SELECT circuits.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';
SELECT DISTINCT races.year FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit';
SELECT url FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Silverstone Circuit');
SELECT r.time FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year BETWEEN 2010 AND 2019 AND c.name = 'Yas Marina Circuit';
SELECT COUNT(*) FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';
SELECT r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Circuit de Barcelona-Catalunya';
SELECT c.url FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.name = 'Spanish Grand Prix' AND r.year = 2009;
SELECT MIN(results.fastestLapTime) FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId ORDER BY r.fastestLapSpeed DESC LIMIT 1;
SELECT d.driverRef FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.name = 'Canadian Grand Prix' AND ra.year = 2007 AND r.positionOrder = 1;
SELECT races.name FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT races.name FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank LIMIT 1;
SELECT MAX(fastestLapSpeed) FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';
SELECT DISTINCT races.year FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT r.positionOrder FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND ra.name = 'Chinese Grand Prix' AND ra.year = 2008;
SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE r.grid = 4 AND ra.year = 1989 AND ra.name = 'Australian Grand Prix';
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND time IS NOT NULL;
SELECT lap FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY lapTimes.milliseconds LIMIT 1;
SELECT r.time FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE r.position = 2 AND ra.year = 2008 AND ra.name = 'Chinese Grand Prix';
SELECT d.forename, d.surname, d.url FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.positionText = '1';
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE d.nationality = 'British' AND ra.year = 2008 AND ra.name = 'Australian Grand Prix';
SELECT COUNT(DISTINCT d.driverId) FROM results r JOIN drivers d ON r.driverId = d.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Chinese Grand Prix' AND r.time IS NOT NULL AND (SELECT COUNT(raceId) FROM results WHERE driverId = d.driverId) > 0;
SELECT SUM(results.points) AS total_points FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT AVG((SUBSTR(fastestLapTime, 1, 2) * 60) + SUBSTR(fastestLapTime, 4, 2) + (SUBSTR(fastestLapTime, 7, 3) / 1000.0)) AS average_fastest_lap_time FROM results JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT CAST((SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND time IS NOT NULL) AS FLOAT) / CAST(COUNT(*) AS FLOAT) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix');
SELECT ((CAST((SUBSTR(r_last.time, 1, INSTR(r_last.time, ':') - 1) * 3600 + SUBSTR(r_last.time, INSTR(r_last.time, ':') + 1, 2) * 60 + SUBSTR(r_last.time, INSTR(r_last.time, ':') + 4)) AS FLOAT) - CAST((SUBSTR(r_champion.time, 1, INSTR(r_champion.time, ':') - 1) * 3600 + SUBSTR(r_champion.time, INSTR(r_champion.time, ':') + 1, 2) * 60 + SUBSTR(r_champion.time, INSTR(r_champion.time, ':') + 4)) AS FLOAT)) / CAST((SUBSTR(r_last.time, 1, INSTR(r_last.time, ':') - 1) * 3600 + SUBSTR(r_last.time, INSTR(r_last.time, ':') + 1, 2) * 60 + SUBSTR(r_last.time, INSTR(r_last.time, ':') + 4)) AS FLOAT)) * 100 AS percentage_faster FROM results r_champion JOIN races ra ON r_champion.raceId = ra.raceId JOIN results r_last ON r_last.raceId = ra.raceId WHERE ra.name = 'Australian Grand Prix' AND ra.year = 2008 AND r_champion.positionOrder = 1 AND r_last.positionOrder = (SELECT MAX(positionOrder) FROM results WHERE raceId = ra.raceId) AND r_champion.time IS NOT NULL AND r_last.time IS NOT NULL;
SELECT COUNT(*) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia';
SELECT lat, lng FROM circuits WHERE country = 'USA';
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND CAST(SUBSTR(dob, 1, 4) AS INTEGER) > 1980;
SELECT MAX(points) FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId WHERE nationality = 'British';
SELECT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId GROUP BY c.constructorId ORDER BY SUM(CAST(cs.points AS FLOAT)) DESC LIMIT 1;
SELECT constructors.name FROM constructorResults JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructorResults.raceId = 291 AND constructorResults.points = 0;
SELECT COUNT(DISTINCT cr.constructorId) FROM constructorResults cr JOIN constructors c ON cr.constructorId = c.constructorId WHERE c.nationality = 'Japanese' AND cr.points = 0 GROUP BY cr.constructorId HAVING COUNT(DISTINCT cr.raceId) = 2;
SELECT DISTINCT constructors.name FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.position = 1;
SELECT COUNT(DISTINCT constructors.constructorId) FROM constructors JOIN results ON constructors.constructorId = results.constructorId JOIN lapTimes ON results.raceId = lapTimes.raceId AND results.driverId = lapTimes.driverId WHERE constructors.nationality = 'French' AND lapTimes.lap > 50;
SELECT (CAST(COUNT(r.driverId) AS FLOAT) * 100.0 / CAST((SELECT COUNT(results.driverId) FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.nationality = 'Japanese' AND races.year BETWEEN 2007 AND 2009) AS FLOAT)) AS completion_percentage FROM results r INNER JOIN races ra ON r.raceId = ra.raceId INNER JOIN drivers d ON r.driverId = d.driverId WHERE d.nationality = 'Japanese' AND ra.year BETWEEN 2007 AND 2009 AND r.time IS NOT NULL;
SELECT r.year, AVG(CAST(SUBSTR(r.time, 1, 2) AS INTEGER) * 3600 + CAST(SUBSTR(r.time, 4, 2) AS INTEGER) * 60 + CAST(SUBSTR(r.time, 7, 6) AS REAL)) AS average_time_seconds FROM results res JOIN races r ON res.raceId = r.raceId WHERE res.position = 1 AND r.year < 1975 AND res.time IS NOT NULL GROUP BY r.year;
SELECT d.forename, d.surname FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE strftime('%Y', d.dob) > '1975' AND ds.position = 2;
SELECT COUNT(DISTINCT d.driverId) FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE d.nationality = 'Italian' AND r.time IS NULL;
SELECT d.forename, d.surname FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId ORDER BY lt.milliseconds LIMIT 1;
SELECT lapTimes.lap FROM lapTimes JOIN driverStandings ON lapTimes.raceId = driverStandings.raceId AND lapTimes.driverId = driverStandings.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE races.year = 2009 AND driverStandings.position = 1 ORDER BY lapTimes.milliseconds LIMIT 1;
SELECT AVG(CAST(fastestLapSpeed AS FLOAT)) FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';
SELECT r.name, r.year FROM races r JOIN results res ON r.raceId = res.raceId WHERE res.milliseconds IS NOT NULL ORDER BY res.milliseconds ASC LIMIT 1;
SELECT (CAST(COUNT(DISTINCT d.driverId) AS FLOAT) * 100.0 / CAST((SELECT COUNT(DISTINCT driverId) FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.year BETWEEN 2000 AND 2005) AS FLOAT)) AS percentage FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year BETWEEN 2000 AND 2005 AND strftime('%Y', d.dob) < '1985' AND r.laps > 50;
SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'French' AND lapTimes.milliseconds < 120000;
SELECT code FROM drivers WHERE nationality = 'American';
SELECT raceId FROM races WHERE year = 2009;
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18;
SELECT COUNT(*) FROM (SELECT code, nationality FROM drivers ORDER BY dob DESC LIMIT 3) AS top3 WHERE nationality = 'Dutch';
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND strftime('%Y', dob) = '1980';
SELECT d.forename, d.surname, MIN(l.time) AS earliest_lap_time FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.nationality = 'German' AND strftime('%Y', d.dob) BETWEEN '1980' AND '1990' GROUP BY d.driverId ORDER BY earliest_lap_time LIMIT 3;
SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob LIMIT 1;
SELECT DISTINCT drivers.driverId, drivers.code FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE strftime('%Y', drivers.dob) = '1971' AND results.fastestLapTime IS NOT NULL;
SELECT drivers.forename, drivers.surname, MAX(lapTimes.time) AS latest_lap_time FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'Spanish' AND strftime('%Y', drivers.dob) < '1982' GROUP BY drivers.driverId ORDER BY latest_lap_time DESC LIMIT 10;
SELECT r.year FROM results res JOIN races r ON res.raceId = r.raceId ORDER BY res.fastestLapTime LIMIT 1;
SELECT r.year FROM lapTimes l JOIN races r ON l.raceId = r.raceId ORDER BY l.time DESC LIMIT 1;
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time ASC LIMIT 5;
SELECT COUNT(*) FROM results WHERE raceId > 50 AND raceId < 100 AND statusId = 2 AND time IS NOT NULL;
SELECT location, lat, lng, COUNT(*) AS count FROM circuits WHERE country = 'Austria' GROUP BY location, lat, lng;
SELECT raceId FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY COUNT(*) DESC LIMIT 1;
SELECT d.driverRef, d.nationality, d.dob FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.q2 IS NOT NULL AND q.raceId = 23;
SELECT races.year, races.name, races.date, races.time FROM races JOIN qualifying ON races.raceId = qualifying.raceId JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.dob = (SELECT MAX(dob) FROM drivers) AND races.date = (SELECT MIN(races.date) FROM races JOIN qualifying ON races.raceId = qualifying.raceId JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.dob = (SELECT MAX(dob) FROM drivers)) LIMIT 1;
SELECT COUNT(DISTINCT drivers.driverId) FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN status ON results.statusId = status.statusId WHERE drivers.nationality = 'American' AND status.status = 'Puncture';
SELECT name, url FROM constructors WHERE nationality = 'Italian' ORDER BY (SELECT SUM(CAST(points AS FLOAT)) FROM constructorResults WHERE constructorResults.constructorId = constructors.constructorId) DESC LIMIT 1;
SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId GROUP BY c.constructorId ORDER BY CAST(SUM(cs.wins) AS FLOAT) DESC LIMIT 1;
SELECT drivers.forename, drivers.surname FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE races.name = 'French Grand Prix' AND lapTimes.lap = 3 ORDER BY lapTimes.time DESC LIMIT 1;
SELECT raceId, MIN(milliseconds) FROM lapTimes WHERE lap = 1 GROUP BY raceId ORDER BY MIN(milliseconds) LIMIT 1;
SELECT AVG(CAST(SUBSTR(fastestLapTime, 1, INSTR(fastestLapTime, ':') - 1) AS FLOAT) * 60 + CAST(SUBSTR(fastestLapTime, INSTR(fastestLapTime, ':') + 1) AS FLOAT)) FROM results JOIN races ON results.raceId = races.raceId WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND results.rank < 11;
SELECT d.forename || ' ' || d.surname AS full_name, AVG(CAST(p.duration AS FLOAT)) AS avg_duration FROM drivers d JOIN pitStops p ON d.driverId = p.driverId WHERE d.nationality = 'German' AND strftime('%Y', d.dob) BETWEEN '1980' AND '1985' GROUP BY d.driverId ORDER BY avg_duration ASC LIMIT 3;
SELECT d.forename, d.surname, r.time FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN drivers d ON r.driverId = d.driverId WHERE ra.name = 'Canadian Grand Prix' AND ra.year = 2008 AND r.positionOrder = 1;
SELECT c.constructorRef, c.url FROM results r JOIN constructors c ON r.constructorId = c.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2009 AND ra.name = 'Singapore Grand Prix' AND r.positionOrder = 1;
SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND strftime('%Y', dob) BETWEEN '1981' AND '1991';
SELECT forename || ' ' || surname AS full_name, url, dob FROM drivers WHERE nationality = 'German' AND strftime('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC;
SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';
SELECT CAST(SUM(cr.points) AS FLOAT) AS total_points, c.name, c.nationality FROM constructorResults cr JOIN races r ON cr.raceId = r.raceId JOIN constructors c ON cr.constructorId = c.constructorId WHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010 GROUP BY c.constructorId ORDER BY total_points DESC LIMIT 1;
SELECT AVG(CAST(results.points AS FLOAT)) FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Turkish Grand Prix';
SELECT AVG(CAST(race_count AS FLOAT)) FROM (SELECT COUNT(*) AS race_count FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY year);
SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT wins FROM driverStandings WHERE positionText = '91';
SELECT races.name FROM results JOIN races ON results.raceId = races.raceId WHERE results.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results);
SELECT circuits.location || ', ' || circuits.country AS full_location FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.date = (SELECT MAX(date) FROM races);
SELECT d.forename, d.surname FROM qualifying q JOIN races r ON q.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId JOIN drivers d ON q.driverId = d.driverId WHERE q.q3 = (SELECT MIN(q3) FROM qualifying WHERE raceId = r.raceId) AND r.year = 2008 AND c.name = 'Marina Bay Street Circuit';
SELECT d.forename || ' ' || d.surname AS full_name, d.nationality, r.name AS race_name FROM drivers d JOIN results res ON d.driverId = res.driverId JOIN races r ON res.raceId = r.raceId WHERE d.dob = (SELECT MAX(dob) FROM drivers) ORDER BY r.date ASC LIMIT 1;
SELECT COUNT(*) FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Canadian Grand Prix' AND results.statusId = 3 GROUP BY results.driverId ORDER BY COUNT(*) DESC LIMIT 1;
SELECT d.forename, d.surname, SUM(ds.wins) AS total_wins FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId WHERE d.dob = (SELECT MIN(dob) FROM drivers) GROUP BY d.driverId;
SELECT MAX(duration) FROM pitStops;
SELECT MIN(time) FROM lapTimes;
SELECT MAX(pitStops.duration) FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT lap FROM pitStops JOIN races ON pitStops.raceId = races.raceId JOIN drivers ON pitStops.driverId = drivers.driverId WHERE races.year = 2011 AND races.name = 'Australian Grand Prix' AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT drivers.driverId, drivers.forename, drivers.surname, pitStops.duration FROM pitStops JOIN races ON pitStops.raceId = races.raceId JOIN drivers ON pitStops.driverId = drivers.driverId WHERE races.year = 2011 AND races.name = 'Australian Grand Prix';
SELECT l.time FROM lapTimes l JOIN drivers d ON l.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY l.milliseconds ASC LIMIT 1;
SELECT drivers.forename || ' ' || drivers.surname AS full_name FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN driverStandings ON lapTimes.raceId = driverStandings.raceId AND lapTimes.driverId = driverStandings.driverId WHERE driverStandings.position <= 20 ORDER BY lapTimes.time ASC LIMIT 1;
SELECT lt.position FROM lapTimes lt JOIN drivers d ON lt.driverId = d.driverId JOIN races r ON lt.raceId = r.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' AND lt.time = (SELECT MIN(time) FROM lapTimes WHERE driverId = d.driverId);
SELECT lapTimes.time FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId WHERE races.name = 'Austrian Grand Prix' ORDER BY lapTimes.milliseconds LIMIT 1;
SELECT l.raceId, MIN(l.time) AS lap_record FROM lapTimes l JOIN races r ON l.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.country = 'Italy' GROUP BY l.raceId;
SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN lapTimes l ON r.raceId = l.raceId WHERE c.name = 'Red Bull Ring' ORDER BY l.milliseconds LIMIT 1;
WITH FastestLap AS (SELECT lt.raceId, lt.driverId, MIN(lt.time) AS fastest_time FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE c.name = 'Austrian Grand Prix' GROUP BY lt.raceId, lt.driverId) SELECT ps.duration FROM FastestLap fl JOIN pitStops ps ON fl.raceId = ps.raceId AND fl.driverId = ps.driverId WHERE fl.fastest_time = (SELECT MIN(fastest_time) FROM FastestLap) LIMIT 1;
SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE lapTimes.time = (SELECT MIN(time) FROM lapTimes lt WHERE lt.raceId = lapTimes.raceId) AND lapTimes.time = '1:29.488';
SELECT CAST(AVG(pitStops.milliseconds) AS FLOAT) FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';
SELECT AVG(CAST(lapTimes.milliseconds AS FLOAT)) FROM lapTimes JOIN races ON lapTimes.raceId = races.raceId JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy';
SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player);
SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes);
SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low';
SELECT player_api_id FROM Player_Attributes GROUP BY player_api_id ORDER BY MAX(crossing) DESC LIMIT 5;
SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY SUM(CAST(M.home_team_goal AS FLOAT) + CAST(M.away_team_goal AS FLOAT)) DESC LIMIT 1;
SELECT Team.team_long_name FROM Match JOIN Team ON Match.home_team_api_id = Team.team_api_id WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY Team.team_long_name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT DISTINCT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY penalties DESC LIMIT 10;
SELECT Team.team_long_name FROM Match JOIN League ON Match.league_id = League.id JOIN Team ON Match.away_team_api_id = Team.team_api_id WHERE League.name = 'Scotland Premier League' AND Match.season = '2009/2010' AND Match.away_team_goal > Match.home_team_goal GROUP BY Team.team_long_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT buildUpPlaySpeed FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 4;
SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY SUM(M.home_team_goal = M.away_team_goal) DESC LIMIT 1;
SELECT player_name, (CAST(strftime('%Y', 'now') AS FLOAT) - CAST(strftime('%Y', birthday) AS FLOAT)) AS age FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE sprint_speed >= 97 AND strftime('%Y', date) BETWEEN '2013' AND '2015';
SELECT L.name, COUNT(M.id) AS match_count FROM Match M JOIN League L ON M.league_id = L.id GROUP BY L.name ORDER BY match_count DESC LIMIT 1;
SELECT AVG(height) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';
SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010' AND overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010')) AND substr(date, 1, 4) = '2010';
SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60;
SELECT team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE buildUpPlayPassing > (SELECT CAST(SUM(buildUpPlayPassing) AS FLOAT) / COUNT(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL) AND strftime('%Y', date) = '2012';
SELECT CAST(SUM(pa.preferred_foot = 'left') * 100.0 AS FLOAT) / COUNT(p.player_fifa_api_id) AS percentage_left_foot FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE strftime('%Y', p.birthday) BETWEEN '1987' AND '1992';
SELECT League.name, SUM(CAST(Match.home_team_goal AS FLOAT) + CAST(Match.away_team_goal AS FLOAT)) AS total_goals FROM Match JOIN League ON Match.league_id = League.id GROUP BY League.id ORDER BY total_goals ASC LIMIT 5;
SELECT AVG(long_shots) FROM Player_Attributes WHERE player_fifa_api_id = (SELECT player_fifa_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag');
SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 GROUP BY P.player_name ORDER BY AVG(PA.heading_accuracy) DESC LIMIT 10;
SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlayDribblingClass = 'Normal' AND Team_Attributes.date >= '2014-01-01 00:00:00' AND Team_Attributes.date <= '2014-12-31 23:59:59' AND Team_Attributes.chanceCreationPassing < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE buildUpPlayDribblingClass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-12-31 23:59:59') ORDER BY Team_Attributes.chanceCreationPassing DESC;
SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2009/2010' GROUP BY L.name HAVING CAST(SUM(M.home_team_goal) AS FLOAT) / COUNT(DISTINCT M.id) > CAST(SUM(M.away_team_goal) AS FLOAT) / COUNT(DISTINCT M.id);
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';
SELECT player_name FROM Player WHERE substr(birthday, 1, 7) = '1970-10';
SELECT pa.attacking_work_rate FROM Player AS p JOIN Player_Attributes AS pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Franco Zennaro';
SELECT ta.buildUpPlayPositioningClass FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE t.team_long_name = 'ADO Den Haag';
SELECT pa.heading_accuracy FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Francois Affolter' AND pa.date = '2014-09-18 00:00:00';
SELECT pa.overall_rating FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.player_name = 'Gabriel Tamas' AND strftime('%Y', pa.date) = '2011';
SELECT COUNT(*) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Scotland Premier League' AND Match.season = '2015/2016';
SELECT Player_Attributes.preferred_foot FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player.birthday DESC LIMIT 1;
SELECT DISTINCT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE potential = (SELECT MAX(potential) FROM Player_Attributes);
SELECT COUNT(*) FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.weight < 130 AND Player_Attributes.preferred_foot = 'left';
SELECT team_short_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE chanceCreationPassingClass = 'Risky';
SELECT Player_Attributes.defensive_work_rate FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'David Wilson';
SELECT Player.birthday FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Netherlands';
SELECT AVG(home_team_goal) FROM Match JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Poland' AND season = '2010/2011';
SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player) OR height = (SELECT MIN(height) FROM Player) ORDER BY (SELECT CAST(AVG(finishing) AS FLOAT) FROM Player_Attributes WHERE player_api_id = Player.player_api_id) DESC LIMIT 1;
SELECT player_name FROM Player WHERE height > 180;
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam %' AND weight > 170;
SELECT DISTINCT P.player_name FROM Player_Attributes PA JOIN Player P ON PA.player_api_id = P.player_api_id WHERE PA.overall_rating > 80 AND strftime('%Y', PA.date) BETWEEN '2008' AND '2010';
SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran');
SELECT DISTINCT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.preferred_foot = 'left';
SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE buildUpPlaySpeedClass = 'Fast';
SELECT buildUpPlayPassingClass FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE team_short_name = 'CLB';
SELECT t.team_short_name FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE ta.buildUpPlayPassing > 70;
SELECT CAST(SUM(pa.overall_rating) AS FLOAT) / CAST(COUNT(pa.id) AS FLOAT) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE strftime('%Y', pa.date) >= '2010' AND strftime('%Y', pa.date) <= '2015' AND p.height > 170;
SELECT player_name FROM Player WHERE height = (SELECT MIN(height) FROM Player);
SELECT Country.name FROM League JOIN Country ON League.country_id = Country.id WHERE League.name = 'Italy Serie A';
SELECT t.team_short_name FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE ta.buildUpPlaySpeed = 31 AND ta.buildUpPlayDribbling = 53 AND ta.buildUpPlayPassing = 32;
SELECT AVG(overall_rating) FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Aaron Doran';
SELECT COUNT(*) FROM Match INNER JOIN League ON Match.league_id = League.id WHERE League.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', Match.date) BETWEEN '2008-08' AND '2008-10';
SELECT T.team_short_name FROM Match M JOIN Team T ON M.home_team_api_id = T.team_api_id WHERE M.home_team_goal = 10;
SELECT DISTINCT player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.potential = 61 AND pa.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61);
SELECT (CAST(SUM(CASE WHEN p.player_name = 'Abdou Diallo' THEN pa.ball_control ELSE 0 END) AS FLOAT) / COUNT(CASE WHEN p.player_name = 'Abdou Diallo' THEN pa.id ELSE NULL END)) - (CAST(SUM(CASE WHEN p.player_name = 'Aaron Appindangoye' THEN pa.ball_control ELSE 0 END) AS FLOAT) / COUNT(CASE WHEN p.player_name = 'Aaron Appindangoye' THEN pa.id ELSE NULL END)) AS difference FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id;
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';
SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday LIMIT 1;
SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);
SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';
SELECT Country.name FROM League JOIN Country ON League.country_id = Country.id WHERE League.name = 'Belgium Jupiler League';
SELECT name FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Germany');
SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 1;
SELECT COUNT(DISTINCT Player.player_api_id) FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE strftime('%Y', Player.birthday) < '1986' AND Player_Attributes.defensive_work_rate = 'high';
SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY crossing DESC LIMIT 1;
SELECT pa.heading_accuracy FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Ariel Borysiuk';
SELECT COUNT(*) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.height > 180 AND pa.volleys > 70;
SELECT DISTINCT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE pa.volleys > 70 AND pa.dribbling > 70;
SELECT COUNT(*) FROM Match INNER JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Belgium' AND Match.season = '2008/2009';
SELECT long_passing FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY Player.birthday LIMIT 1;
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League') AND SUBSTR(date, 1, 7) = '2009-04';
SELECT L.name FROM Match M JOIN League L ON M.league_id = L.id WHERE M.season = '2008/2009' GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1;
SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player WHERE strftime('%Y', birthday) < '1986');
SELECT 100 * ( ( SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk') ) - ( SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel') ) ) / CAST(( SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel') ) AS FLOAT) AS percentage_difference;
SELECT AVG(CAST(buildUpPlaySpeed AS FLOAT)) FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE team_long_name = 'Heart of Midlothian';
SELECT AVG(T1.overall_rating) FROM Player_Attributes T1 JOIN Player T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino';
SELECT SUM(crossing) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Lennox';
SELECT chanceCreationPassing AS highest_chance_creation_passing_score, chanceCreationPassingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE team_long_name = 'Ajax' ORDER BY chanceCreationPassing DESC LIMIT 1;
SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo');
SELECT MAX(T1.overall_rating) FROM Player_Attributes T1 JOIN Player T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Dorlan Pabon';
SELECT AVG(Match.away_team_goal) FROM Match JOIN Team ON Match.away_team_api_id = Team.team_api_id JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Team.team_long_name = 'Parma' AND Country.name = 'Italy';
SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE overall_rating = 77 AND date LIKE '2016-06-23%' ORDER BY birthday LIMIT 1;
SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Mooy') AND date LIKE '2016-02-04%';
SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francesco Parravicini') AND date = '2010-08-30 00:00:00';
SELECT attacking_work_rate FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE player_name = 'Francesco Migliore' AND date LIKE '2015-05-01%';
SELECT defensive_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Berigaud') AND date = '2013-02-22 00:00:00';
SELECT date FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') AND crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant')) ORDER BY date LIMIT 1;
SELECT ta.buildUpPlaySpeedClass FROM Team t JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id WHERE t.team_long_name = 'Willem II' AND ta.date = '2011-02-22 00:00:00';
SELECT buildUpPlayDribblingClass FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_short_name = 'LEI') AND date = '2015-09-10 00:00:00';
SELECT buildUpPlayPassingClass FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'FC Lorient') AND date LIKE '2010-02-22%';
SELECT TA.chanceCreationPassingClass FROM Team_Attributes TA JOIN Team T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'PEC Zwolle' AND TA.date = '2013-09-20 00:00:00';
SELECT Team_Attributes.chanceCreationCrossingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Hull City' AND Team_Attributes.date = '2010-02-22 00:00:00';
SELECT defenceAggressionClass FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Hannover 96' AND Team_Attributes.date LIKE '2015-09-10%';
SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Marko Arnautovic') AND substr(date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21';
SELECT ((CAST(ld.overall_rating AS FLOAT) - CAST(jb.overall_rating AS FLOAT)) / CAST(ld.overall_rating AS FLOAT)) * 100 AS percentage_increase FROM Player_Attributes ld JOIN Player pld ON ld.player_api_id = pld.player_api_id JOIN Player_Attributes jb ON jb.player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Jordan Bowery') AND jb.date = '2013-07-12' WHERE pld.player_name = 'Landon Donovan' AND ld.date = '2013-07-12';
SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10;
SELECT player_name FROM Player WHERE CAST((julianday('now') - julianday(birthday)) AS FLOAT)/365 > 34;
SELECT SUM(home_team_goal) FROM Match WHERE home_player_1 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_2 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_3 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_4 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_5 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_6 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_7 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_8 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_9 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_10 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_11 = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon');
SELECT SUM(away_team_goal) FROM Match WHERE away_player_1 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_1 IN (SELECT player_api_id FROM Player WHERE player_name = 'Filipe Ferreira') OR away_player_2 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_2 IN (SELECT player_api_id FROM Player WHERE player_name = 'Filipe Ferreira') OR away_player_3 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_3 IN (SELECT player_api_id FROM Player WHERE player_name = 'Filipe Ferreira') OR away_player_4 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_4 IN (SELECT player_api_id FROM Player WHERE player_name = 'Filipe Ferreira') OR away_player_5 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_5 IN (SELECT player_api_id FROM Player WHERE player_name = 'Filipe Ferreira') OR away_player_6 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_6 IN (SELECT player_api_id FROM Player WHERE player_name = 'Filipe Ferreira') OR away_player_7 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_7 IN (SELECT player_api_id FROM Player WHERE player_name = 'Filipe Ferreira') OR away_player_8 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_8 IN (SELECT player_api_id FROM Player WHERE player_name = 'Filipe Ferreira') OR away_player_9 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_9 IN (SELECT player_api_id FROM Player WHERE player_name = 'Filipe Ferreira') OR away_player_10 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_10 IN (SELECT player_api_id FROM Player WHERE player_name = 'Filipe Ferreira') OR away_player_11 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_11 IN (SELECT player_api_id FROM Player WHERE player_name = 'Filipe Ferreira');
SELECT SUM(home_team_goal) FROM Match INNER JOIN Player ON Match.home_player_1 = Player.player_api_id OR Match.home_player_2 = Player.player_api_id OR Match.home_player_3 = Player.player_api_id OR Match.home_player_4 = Player.player_api_id OR Match.home_player_5 = Player.player_api_id OR Match.home_player_6 = Player.player_api_id OR Match.home_player_7 = Player.player_api_id OR Match.home_player_8 = Player.player_api_id OR Match.home_player_9 = Player.player_api_id OR Match.home_player_10 = Player.player_api_id OR Match.home_player_11 = Player.player_api_id WHERE (strftime('%Y', 'now') - strftime('%Y', birthday)) < 31;
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 1;
SELECT DISTINCT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE potential = (SELECT MAX(potential) FROM Player_Attributes);
SELECT p.player_name FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE pa.attacking_work_rate = 'high';
SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE finishing = 1 ORDER BY datetime(birthday) LIMIT 1;
SELECT Player.player_name FROM Player INNER JOIN Match ON Player.player_api_id = Match.home_player_1 OR Player.player_api_id = Match.away_player_1 INNER JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Belgium';
SELECT DISTINCT p.player_name, c.name AS country_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id JOIN Match m ON (m.home_player_1 = p.player_api_id OR m.home_player_2 = p.player_api_id OR m.home_player_3 = p.player_api_id OR m.home_player_4 = p.player_api_id OR m.home_player_5 = p.player_api_id OR m.home_player_6 = p.player_api_id OR m.home_player_7 = p.player_api_id OR m.home_player_8 = p.player_api_id OR m.home_player_9 = p.player_api_id OR m.home_player_10 = p.player_api_id OR m.home_player_11 = p.player_api_id OR m.away_player_1 = p.player_api_id OR m.away_player_2 = p.player_api_id OR m.away_player_3 = p.player_api_id OR m.away_player_4 = p.player_api_id OR m.away_player_5 = p.player_api_id OR m.away_player_6 = p.player_api_id OR m.away_player_7 = p.player_api_id OR m.away_player_8 = p.player_api_id OR m.away_player_9 = p.player_api_id OR m.away_player_10 = p.player_api_id OR m.away_player_11 = p.player_api_id) JOIN Country c ON m.country_id = c.id WHERE pa.vision > 89;
SELECT c.name FROM Player p JOIN Match m ON p.player_api_id IN (m.home_player_1, m.home_player_2, m.home_player_3, m.home_player_4, m.home_player_5, m.home_player_6, m.home_player_7, m.home_player_8, m.home_player_9, m.home_player_10, m.home_player_11, m.away_player_1, m.away_player_2, m.away_player_3, m.away_player_4, m.away_player_5, m.away_player_6, m.away_player_7, m.away_player_8, m.away_player_9, m.away_player_10, m.away_player_11) JOIN Country c ON m.country_id = c.id GROUP BY c.name ORDER BY AVG(p.weight) DESC LIMIT 1;
SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE buildUpPlaySpeedClass = 'Slow';
SELECT team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE chanceCreationPassingClass = 'Safe';
SELECT AVG(height) FROM Player WHERE player_api_id IN (SELECT home_player_1 FROM Match WHERE country_id = (SELECT id FROM Country WHERE name = 'Italy'))
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3;
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-12-31';
SELECT CAST((SELECT jumping FROM Player_Attributes WHERE id = 6) AS FLOAT) - CAST((SELECT jumping FROM Player_Attributes WHERE id = 23) AS FLOAT) AS jumping_difference;
SELECT DISTINCT player_api_id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 5;
SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left';
SELECT (CAST(COUNT(DISTINCT player_api_id) AS FLOAT) * 100.0 / CAST((SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes) AS FLOAT)) AS percentage FROM Player_Attributes WHERE strength > 80 AND stamina > 80;
SELECT Country.name FROM League INNER JOIN Country ON League.country_id = Country.id WHERE League.name = 'Poland Ekstraklasa';
SELECT home_team_goal, away_team_goal FROM Match INNER JOIN League ON Match.league_id = League.id WHERE date LIKE '2008-09-24%' AND League.name = 'Belgium Jupiler League';
SELECT pa.sprint_speed, pa.agility, pa.acceleration FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Alexis Blin';
SELECT buildUpPlaySpeedClass FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'KSV Cercle Brugge');
SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND league_id = (SELECT id FROM League WHERE name = 'Italy Serie A');
SELECT MAX(home_team_goal) FROM Match JOIN League ON Match.league_id = League.id WHERE League.name = 'Netherlands Eredivisie';
SELECT Player_Attributes.finishing, Player_Attributes.curve FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.weight = (SELECT MAX(weight) FROM Player);
SELECT League.name FROM Match JOIN League ON Match.league_id = League.id WHERE season = '2015/2016' GROUP BY League.name ORDER BY COUNT(Match.id) DESC LIMIT 4;
SELECT Team.team_long_name FROM Match JOIN Team ON Match.away_team_api_id = Team.team_api_id ORDER BY away_team_goal DESC LIMIT 1;
SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 1;
SELECT (CAST(COUNT(CASE WHEN Player.height < 180 AND Player_Attributes.overall_rating > 70 THEN 1 END) AS FLOAT) * 100.0 / CAST(COUNT(Player.id) AS FLOAT)) AS percentage FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id;
SELECT CAST((SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '+') AS FLOAT) * 100.0 / CAST((SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '-') AS FLOAT) AS percentage_deviation;
SELECT CAST(100.0 * (SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) > '1930') AS FLOAT) / CAST((SELECT COUNT(ID) FROM Patient WHERE SEX = 'F') AS FLOAT) AS percentage;
SELECT 100.0 * CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS FLOAT) / CAST(COUNT(*) AS FLOAT) FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940';
SELECT CAST((SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '+') AS FLOAT) / CAST((SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = '-') AS FLOAT) AS inpatient_outpatient_ratio;
SELECT p.Diagnosis, l.Date FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.ID = '30609';
SELECT Patient.SEX, Patient.Birthday, Examination."Examination Date", Examination.Symptoms FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = '163109';
SELECT DISTINCT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > 500;
SELECT Patient.ID, CAST(strftime('%Y', 'now') AS FLOAT) - CAST(strftime('%Y', Patient.Birthday) AS FLOAT) AS age FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RVVT = '+';
SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2;
SELECT DISTINCT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE strftime('%Y', p.Birthday) = '1937' AND l.`T-CHO` >= 250;
SELECT p.ID, p.SEX, p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.ALB < 3.5;
SELECT (CAST(COUNT(DISTINCT Laboratory.ID) AS FLOAT) * 100.0 / CAST((SELECT COUNT(DISTINCT ID) FROM Patient WHERE SEX = 'F') AS FLOAT)) AS percentage FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND (Laboratory.TP < 6.0 OR Laboratory.TP > 8.5);
SELECT AVG(e."aCL IgG") FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Admission = '+' AND CAST((strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS FLOAT) >= 50;
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Description) = '1997' AND Admission = '-';
SELECT MIN(CAST(SUBSTR(`First Date`, 1, 4) AS FLOAT) - CAST(SUBSTR(Birthday, 1, 4) AS FLOAT)) AS age FROM Patient WHERE `First Date` >= Birthday;
SELECT COUNT(DISTINCT Examination.ID) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Thrombosis = '1' AND SEX = 'F' AND strftime('%Y', "Examination Date") = '1997';
SELECT CAST(MAX(strftime('%Y', Birthday)) AS FLOAT) - CAST(MIN(strftime('%Y', Birthday)) AS FLOAT) AS age_gap FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE TG >= 200;
SELECT e.Symptoms, e.Diagnosis FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE e.Symptoms IS NOT NULL ORDER BY p.Birthday DESC LIMIT 1;
SELECT CAST(COUNT(DISTINCT Laboratory.ID) AS FLOAT) / 12 AS average_male_patients_per_month FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'M' AND Laboratory.Date BETWEEN '1998-01-01' AND '1998-12-31';
SELECT Laboratory.Date, CAST(strftime('%Y', Patient.[First Date]) AS FLOAT) - CAST(strftime('%Y', Patient.Birthday) AS FLOAT) AS Age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'SJS' ORDER BY Patient.Birthday LIMIT 1;
SELECT CAST((SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE SEX = 'M' AND UA <= 8.0) AS FLOAT) / CAST((SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE SEX = 'F' AND UA <= 6.5) AS FLOAT) AS male_to_female_ratio;
SELECT COUNT(DISTINCT p.ID) FROM Patient p LEFT JOIN Examination e ON p.ID = e.ID WHERE e.ID IS NULL OR CAST(strftime('%Y', "e"."Examination Date") AS INTEGER) - CAST(strftime('%Y', "p"."First Date") AS INTEGER) >= 1;
SELECT COUNT(DISTINCT Examination.ID) FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE strftime('%Y', Examination.[Examination Date]) BETWEEN '1990' AND '1993' AND (CAST(strftime('%Y', Examination.[Examination Date]) AS FLOAT) - CAST(strftime('%Y', Patient.Birthday) AS FLOAT)) < 18;
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SEX = 'M' AND `T-BIL` >= '2.0';
SELECT Diagnosis FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1;
SELECT AVG(CAST(1999 - CAST(SUBSTR(Birthday, 1, 4) AS INTEGER) AS FLOAT)) AS average_age FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE Date BETWEEN '1991-10-01' AND '1991-10-30');
SELECT CAST(strftime('%Y', e."Examination Date") AS INTEGER) - CAST(strftime('%Y', p.Birthday) AS INTEGER) AS age, e.Diagnosis FROM Examination e JOIN Patient p ON e.ID = p.ID JOIN Laboratory l ON e.ID = l.ID AND e."Examination Date" = l.Date ORDER BY l.HGB DESC LIMIT 1;
SELECT ANA FROM Examination WHERE ID = 3605340 AND "Examination Date" = '1996-12-02';
SELECT "T-CHO" < 250 AS is_normal FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04';
SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' ORDER BY "First Date" LIMIT 1;
SELECT e."aCL IgM" FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Diagnosis = 'SLE' AND p.Description = '1994-02-19' AND e."Examination Date" = '1993-11-12';
SELECT SEX FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE GPT = '9' AND Date = '1992-06-12');
SELECT CAST(strftime('%Y', Date) AS FLOAT) - CAST(strftime('%Y', Birthday) AS FLOAT) AS age FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE UA = '8.4' AND Date = '1991-10-21';
SELECT COUNT(Laboratory.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.`First Date` = '1991-06-13' AND Patient.Diagnosis = 'SJS' AND Laboratory.Date LIKE '1995%';
SELECT p.Diagnosis FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Diagnosis = 'SLE' AND e.`Examination Date` = '1997-01-27' ORDER BY p.`First Date` LIMIT 1;
SELECT Symptoms FROM Examination WHERE ID = (SELECT ID FROM Patient WHERE Birthday = '1959-03-01') AND "Examination Date" = '1993-09-27';
SELECT (CAST(SUM(CASE WHEN Date LIKE '1981-12-%' THEN `T-CHO` END) AS FLOAT) - CAST(SUM(CASE WHEN Date LIKE '1981-11-%' THEN `T-CHO` END) AS FLOAT)) / CAST(SUM(CASE WHEN Date LIKE '1981-11-%' THEN `T-CHO` END) AS FLOAT) AS decrease_rate FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.Birthday = '1959-02-18';
SELECT DISTINCT e.ID FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Diagnosis = 'BEHCET' AND e."Examination Date" >= '1997-01-01' AND e."Examination Date" < '1998-01-01';
SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4;
SELECT ID FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) = '1964' AND Admission = '+';
SELECT COUNT(DISTINCT ID) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT CAST(AVG(`aCL IgM`) AS FLOAT) * 1.2 FROM Examination);
SELECT 100.0 * CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS FLOAT) / CAST(COUNT(*) AS FLOAT) AS percentage FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30;
SELECT (CAST(SUM(DIAGNOSIS = 'BEHCET') AS FLOAT) * 100.0 / CAST(COUNT(*) AS FLOAT)) AS percentage FROM Patient WHERE SEX = 'M' AND strftime('%Y', `First Date`) = '1981';
SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.Date LIKE '1991-10%' AND Laboratory."T-BIL" < 2.0;
SELECT COUNT(*) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`ANA Pattern` != 'P' AND Patient.SEX = 'F' AND strftime('%Y', Patient.Birthday) BETWEEN '1980' AND '1989';
SELECT p.SEX FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.Diagnosis = 'PSS' AND l.CRP = '2+' AND l.CRE = 1 AND l.LDH = 123;
SELECT AVG(CAST(Laboratory.ALB AS FLOAT)) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Patient.Diagnosis = 'SLE';
SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1;
SELECT Description, Diagnosis FROM Patient WHERE ID = 48473;
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';
SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE strftime('%Y', Date) = '1997' AND (TP <= 6 OR TP >= 8.5);
SELECT (CAST(SUM(Diagnosis LIKE '%SLE%') AS FLOAT) * 100.0) / NULLIF(CAST(SUM(Symptoms LIKE '%thrombocytopenia%') AS FLOAT), 0) AS proportion FROM Examination;
SELECT (CAST(SUM(SEX = 'F') AS FLOAT) * 100.0 / CAST(COUNT(SEX) AS FLOAT)) AS percentage_of_women FROM Patient WHERE strftime('%Y', Birthday) = '1980' AND Diagnosis = 'RA';
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.SEX = 'M' AND e.Diagnosis = 'Behcet' AND e.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND p.Admission = '-';
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Laboratory.WBC < 3.5;
SELECT CAST(julianday(MIN(e."Examination Date")) - julianday(p."First Date") AS FLOAT) AS days_between FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.ID = 821298;
SELECT p.ID, l.UA, p.SEX FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.ID = 57266 AND ((l.UA > 8.0 AND p.SEX = 'M') OR (l.UA > 6.5 AND p.SEX = 'F'));
SELECT Date FROM Laboratory WHERE ID = '48473' AND GOT >= 60;
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GOT < 60 AND strftime('%Y', Laboratory.Date) = '1994';
SELECT DISTINCT Laboratory.ID FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'M' AND Laboratory.GPT >= 60;
SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GPT > 60 ORDER BY Patient.Birthday ASC;
SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500;
SELECT p.ID, CAST((strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS FLOAT) AS age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.LDH BETWEEN 600 AND 800;
SELECT DISTINCT p.Admission FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.ALP < 300;
SELECT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = '1982-04-01' AND l.ALP < 300;
SELECT DISTINCT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0;
SELECT Laboratory.ID, CAST(TP AS FLOAT) - 8.5 AS TP_deviation FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND TP > 8.5;
SELECT Patient.ID, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND (Laboratory.ALB <= 3.5 OR Laboratory.ALB >= 5.5) ORDER BY Patient.Birthday DESC;
SELECT p.ID, CASE WHEN l.ALB BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END AS Albumin_Status FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE strftime('%Y', p.Birthday) = '1982';
SELECT CAST((SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SEX = 'F' AND UA > 6.5) * 100.0 AS FLOAT) / CAST(COUNT(DISTINCT ID) AS FLOAT) FROM Patient WHERE SEX = 'F';
SELECT AVG(L.UA) FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE (P.SEX = 'M' AND L.UA < 8.0 OR P.SEX = 'F' AND L.UA < 6.5) AND L.Date = (SELECT MAX(L2.Date) FROM Laboratory L2 WHERE L2.ID = L.ID);
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.UN = 29;
SELECT DISTINCT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Diagnosis = 'RA' AND l.UN < 30;
SELECT COUNT(DISTINCT l.ID) FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE p.SEX = 'M' AND l.CRE >= 1.5;
SELECT (CAST(SUM(CASE WHEN p.SEX = 'M' THEN 1 ELSE 0 END) AS FLOAT) > CAST(SUM(CASE WHEN p.SEX = 'F' THEN 1 ELSE 0 END) AS FLOAT)) AS result FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.CRE >= 1.5;
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory."T-BIL" = (SELECT MAX("T-BIL") FROM Laboratory);
SELECT SEX, GROUP_CONCAT(DISTINCT Laboratory.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE "T-BIL" >= 2.0 GROUP BY SEX;
SELECT p.ID, l."T-CHO" FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient) ORDER BY l."T-CHO" DESC LIMIT 1;
SELECT AVG(CAST((strftime('%Y', 'now') - strftime('%Y', Birthday)) AS FLOAT)) AS average_age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.`T-CHO` >= 250;
SELECT Patient.ID, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG > 300;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG >= 200 AND (CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', p.Birthday) AS INTEGER)) > 50;
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.CPK < 250;
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE strftime('%Y', Birthday) BETWEEN '1936' AND '1956' AND SEX = 'M' AND CPK >= 250;
SELECT Patient.ID, Patient.SEX, CAST((strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS FLOAT) AS age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU >= 180 AND Laboratory."T-CHO" < 250;
SELECT L.ID, L.GLU FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.GLU < 180 AND strftime('%Y', P.Description) = '1991';
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.WBC <= 3.5 OR Laboratory.WBC >= 9.0 GROUP BY Patient.ID, Patient.SEX ORDER BY Patient.Birthday ASC;
SELECT Patient.ID, Patient.Diagnosis, CAST((strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS FLOAT) AS age FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.RBC < 3.5;
SELECT p.ID, p.Admission FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'F' AND (CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', p.Birthday) AS INTEGER)) >= 50 AND (l.RBC <= 3.5 OR l.RBC >= 6.0);
SELECT DISTINCT p.ID, p.SEX FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '-' AND l.HGB < 10;
SELECT p.ID, p.SEX FROM Patient p JOIN Examination e ON p.ID = e.ID JOIN Laboratory l ON p.ID = l.ID WHERE e.Diagnosis = 'SLE' AND l.HGB > 10 AND l.HGB < 17 ORDER BY p.Birthday LIMIT 1;
SELECT p.ID, CAST((strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS FLOAT) AS age FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.HCT >= 52 GROUP BY p.ID HAVING COUNT(l.ID) > 2;
SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;
SELECT CAST((SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE PLT < 100) AS FLOAT) - CAST((SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE PLT > 400) AS FLOAT) AS calculation;
SELECT DISTINCT Patient.ID, Patient.Birthday FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE strftime('%Y', Laboratory.Date) = '1984' AND CAST(strftime('%Y', 'now') AS FLOAT) - CAST(strftime('%Y', Patient.Birthday) AS FLOAT) < 50 AND Laboratory.PLT BETWEEN 100 AND 400;
SELECT (SUM(CASE WHEN PT >= 14 AND SEX = 'F' THEN 1 ELSE 0 END) * 100.0 / CAST(SUM(CASE WHEN PT >= 14 THEN 1 ELSE 0 END) AS FLOAT)) AS female_percentage_with_abnormal_PT FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE (strftime('%Y', 'now') - strftime('%Y', Birthday)) > 55;
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE strftime('%Y', Patient.[First Date]) > '1992' AND Laboratory.PT < 14;
SELECT COUNT(*) FROM Examination INNER JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.[Examination Date] > '1997-01-01' AND Laboratory.APTT < 45;
SELECT COUNT(DISTINCT Laboratory.ID) FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.APTT > 45 AND Examination.Thrombosis = 0;
SELECT COUNT(DISTINCT L.ID) FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.SEX = 'M' AND L.WBC > 3.5 AND L.WBC < 9.0 AND (L.FG <= 150 OR L.FG >= 450);
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday > '1980-01-01' AND (Laboratory.FG < 150 OR Laboratory.FG > 450);
SELECT DISTINCT Patient.Diagnosis FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.`U-PRO` > 30;
SELECT DISTINCT l.ID FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.`U-PRO` > 0 AND l.`U-PRO` < 30 AND p.Diagnosis = 'SLE';
SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE IGG >= 2000;
SELECT COUNT(*) FROM Examination INNER JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.IGG > 900 AND Laboratory.IGG < 2000 AND Examination.Symptoms IS NOT NULL;
SELECT Patient.Diagnosis FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.IGA BETWEEN 80 AND 500 ORDER BY Laboratory.IGA DESC LIMIT 1;
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.IGA > 80 AND Laboratory.IGA < 500 AND strftime('%Y', Patient."First Date") >= '1990';
SELECT Diagnosis FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE IGM <= 40 OR IGM >= 400) GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1;
SELECT COUNT(DISTINCT L.ID) FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.CRP = '+' AND P.Description IS NULL;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.CRE >= 1.5 AND (CAST((julianday('now') - julianday(p.Birthday)) AS FLOAT) / 365.25) < 70;
SELECT COUNT(DISTINCT l.ID) FROM Laboratory l JOIN Examination e ON l.ID = e.ID WHERE l.RA IN ('-', '+-') AND e.KCT = '+';
SELECT DISTINCT P.Diagnosis FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) > '1985' AND L.RA IN ('-', '+-');
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.RF < 20 AND CAST((strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS FLOAT) > 60;
SELECT COUNT(DISTINCT l.ID) FROM Laboratory l JOIN Examination e ON l.ID = e.ID WHERE l.RF < 20 AND e.Thrombosis = '0';
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.C3 > 35 AND e.`ANA Pattern` = 'P';
SELECT E.ID FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE L.HCT <= 29 OR L.HCT >= 52 ORDER BY E.`aCL IgA` DESC LIMIT 1;
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE (e.Diagnosis LIKE '%thrombosis%' OR e.Diagnosis LIKE '%APS%' OR e.Diagnosis LIKE '%DVT%') AND l.C4 > 10;
SELECT COUNT(DISTINCT Patient.ID) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE (Laboratory.RNP = '-' OR Laboratory.RNP = '0') AND Patient.Admission = '+';
SELECT Birthday FROM Patient WHERE ID = (SELECT ID FROM Laboratory WHERE RNP NOT IN('-', '+-') ORDER BY Date DESC LIMIT 1) ORDER BY Birthday ASC LIMIT 1;
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.SM IN ('-', '0') AND e.Thrombosis = 0;
SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.SM NOT IN ('negative', '0') ORDER BY p.Birthday DESC LIMIT 3;
SELECT DISTINCT e.ID FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE e."Examination Date" > '1997-01-01' AND l.SC170 IN ('negative', '0');
SELECT COUNT(DISTINCT Examination.ID) FROM Examination JOIN Patient ON Examination.ID = Patient.ID JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.SC170 IN('negative', '0') AND Patient.SEX = 'F' AND Examination.Symptoms IS NULL;
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SSA IN ('-', '+-', '0', 'negative') AND strftime('%Y', Patient.`First Date`) < '2000';
SELECT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.SSA NOT IN('negative', '0') ORDER BY Patient.`First Date` ASC LIMIT 1;
SELECT COUNT(DISTINCT E.ID) FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE (L.SSB = '-' OR L.SSB = '+-') AND E.Diagnosis = 'SLE';
SELECT COUNT(DISTINCT Examination.ID) FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.SSB IN ('negative', '0') AND Examination.Symptoms IS NOT NULL;
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.CENTROMEA IN ('-', '+-') AND Laboratory.SSB IN ('-', '+-');
SELECT DISTINCT p.Diagnosis FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.DNA >= 8;
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.DNA < 8 AND Patient.Description IS NULL;
SELECT COUNT(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.IGG > 900 AND Laboratory.IGG < 2000 AND Patient.Admission = '+';
SELECT (CAST(COUNT(DISTINCT CASE WHEN GOT >= 60 AND Diagnosis = 'SLE' THEN Laboratory.ID END) AS FLOAT) / CAST(COUNT(DISTINCT CASE WHEN GOT >= 60 THEN Laboratory.ID END) AS FLOAT)) * 100 AS percentage FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID;
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.GOT < 60;
SELECT Birthday FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE GOT >= 60) ORDER BY Birthday DESC LIMIT 1;
SELECT Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE GPT < 60 ORDER BY GPT DESC LIMIT 3;
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GOT < 60 AND p.SEX = 'M';
SELECT MIN(Patient."First Date") FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH < 500 AND Laboratory.LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500);
SELECT MAX(L.Date) FROM Laboratory L WHERE L.LDH >= 500 AND L.ID = (SELECT P.ID FROM Patient P JOIN Laboratory L2 ON P.ID = L2.ID WHERE L2.LDH >= 500 ORDER BY P."First Date" DESC LIMIT 1);
SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP >= 300 AND Patient.Admission = '+';
SELECT COUNT(DISTINCT Laboratory.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.ALP < 300;
SELECT DISTINCT p.Diagnosis FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.TP < 6.0;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Diagnosis = 'SJS' AND l.TP > 6.0 AND l.TP < 8.5;
SELECT Date FROM Laboratory WHERE ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5);
SELECT COUNT(DISTINCT L.ID) FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.SEX = 'M' AND L.ALB > 3.5 AND L.ALB < 5.5 AND L.TP BETWEEN 6.0 AND 8.5;
SELECT e.`aCL IgG`, e.`aCL IgM`, e.`aCL IgA` FROM Examination e JOIN Patient p ON e.ID = p.ID JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'F' AND l.UA > 6.50 ORDER BY l.UA DESC LIMIT 1;
SELECT MAX(ANA) FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE CRE < 1.5;
SELECT e.ID FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.CRE < 1.5 ORDER BY e."aCL IgA" DESC LIMIT 1;
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.`T-BIL` >= 2.0 AND e.`ANA Pattern` LIKE '%P%';
SELECT ANA FROM Examination WHERE ID = (SELECT ID FROM Laboratory WHERE `T-BIL` < 2.0 ORDER BY `T-BIL` DESC LIMIT 1);
SELECT COUNT(DISTINCT e.ID) FROM Laboratory l JOIN Examination e ON l.ID = e.ID WHERE l.`T-CHO` >= 250 AND e.KCT = '-';
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.T-CHO < 250 AND e."ANA Pattern" = 'P';
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.TG < 200 AND e.Symptoms IS NOT NULL;
SELECT p.Diagnosis FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE l.TG < 200 ORDER BY l.TG DESC LIMIT 1;
SELECT DISTINCT e.ID FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE e.Thrombosis = 0 AND l.CPK < 250;
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.CPK < 250 AND (e.KCT = '+' OR e.RVVT = '+' OR e.LAC = '+');
SELECT Birthday FROM Patient WHERE ID = (SELECT ID FROM Laboratory WHERE GLU > 180 ORDER BY (SELECT Birthday FROM Patient WHERE Patient.ID = Laboratory.ID) ASC LIMIT 1);
SELECT COUNT(DISTINCT e.ID) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.GLU < 180 AND e.Thrombosis = 0;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Admission = '+' AND l.WBC BETWEEN 3.5 AND 9.0;
SELECT COUNT(DISTINCT L.ID) FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE P.Diagnosis = 'SLE' AND L.WBC BETWEEN 3.5 AND 9.0;
SELECT DISTINCT L.ID FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE (L.RBC <= 3.5 OR L.RBC >= 6.0) AND P.Admission = '-';
SELECT COUNT(DISTINCT l.ID) FROM Laboratory l JOIN Examination e ON l.ID = e.ID WHERE l.PLT > 100 AND l.PLT < 400 AND e.Diagnosis IS NOT NULL;
SELECT PLT FROM Laboratory WHERE PLT > 100 AND PLT < 400 AND ID IN (SELECT ID FROM Patient WHERE Diagnosis = 'MCTD');
SELECT AVG(CAST(Laboratory.PT AS FLOAT)) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'M' AND Laboratory.PT < 14;
SELECT COUNT(DISTINCT Examination.ID) FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Thrombosis IN (1, 2) AND Laboratory.PT < 14;
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';
SELECT first_name, last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';
SELECT COUNT(DISTINCT link_to_member) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';
SELECT member.phone FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';
SELECT COUNT(*) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer' AND member.t_shirt_size = 'Medium';
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event GROUP BY e.event_name ORDER BY COUNT(a.link_to_event) DESC LIMIT 1;
SELECT m.college FROM member mb JOIN major m ON mb.link_to_major = m.major_id WHERE mb.position = 'Vice President';
SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';
SELECT COUNT(*) FROM attendance a JOIN member m ON a.link_to_member = m.member_id JOIN event e ON a.link_to_event = e.event_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison' AND strftime('%Y', e.event_date) = '2019';
SELECT COUNT(DISTINCT e.event_id) FROM event e JOIN attendance a ON e.event_id = a.link_to_event WHERE e.type = 'Meeting' AND (SELECT COUNT(*) FROM attendance WHERE link_to_event = e.event_id) > 10;
SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_event) > 20);
SELECT AVG(CAST(attendance_count AS FLOAT)) FROM (SELECT COUNT(a.link_to_member) AS attendance_count FROM event e JOIN attendance a ON e.event_id = a.link_to_event WHERE e.type = 'Meeting' AND strftime('%Y', e.event_date) = '2020' GROUP BY e.event_name);
SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1;
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';
SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Laugh Out Loud';
SELECT member.last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';
SELECT county FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE first_name = 'Sherri' AND last_name = 'Ramsey';
SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Tyler' AND last_name = 'Hewitt');
SELECT amount FROM income JOIN member ON income.link_to_member = member.member_id WHERE position = 'Vice President';
SELECT spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Food' AND event.event_name = 'September Meeting';
SELECT z.city, z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.position = 'President';
SELECT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE z.state = 'Illinois';
SELECT spent FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE category = 'Advertisement' AND event_name = 'September Meeting';
SELECT DISTINCT m1.department FROM major m1 JOIN member mem1 ON m1.major_id = mem1.link_to_major WHERE mem1.last_name IN ('Pierce', 'Guidi');
SELECT SUM(amount) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';
SELECT e.expense_id, e.expense_description, e.approved FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08T12:00:00';
SELECT AVG(CAST(cost AS FLOAT)) FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE first_name = 'Elijah' AND last_name = 'Allen' AND (substr(expense_date, 6, 2) = '09' OR substr(expense_date, 6, 2) = '10');
SELECT CAST((SELECT COALESCE(SUM(spent), 0) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date LIKE '2019%') AS FLOAT) - CAST((SELECT COALESCE(SUM(spent), 0) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date LIKE '2020%') AS FLOAT) AS difference;
SELECT location FROM event WHERE event_name = 'Spring Budget Review';
SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04';
SELECT remaining FROM budget WHERE category = 'Food' AND amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food');
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';
SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';
SELECT z.county FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Adela' AND m.last_name = "O'Gallagher";
SELECT COUNT(*) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Meeting' AND budget.remaining < 0;
SELECT SUM(CAST(amount AS FLOAT)) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker';
SELECT b.event_status FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Post Cards, Posters' AND e.expense_date = '2019-08-20';
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';
SELECT z.type FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Christof' AND m.last_name = 'Nielson';
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';
SELECT z.state FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';
SELECT major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President';
SELECT date_received FROM income JOIN member ON income.link_to_member = member.member_id WHERE first_name = 'Connor' AND last_name = 'Hilton' AND source = 'Dues';
SELECT m.first_name, m.last_name FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.source = 'Dues' ORDER BY i.date_received LIMIT 1;
SELECT CAST((SELECT SUM(amount) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE category = 'Advertisement' AND event_name = 'Yearly Kickoff') AS FLOAT) / CAST((SELECT SUM(amount) FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE category = 'Advertisement' AND event_name = 'October Meeting') AS FLOAT);
SELECT (CAST(SUM(CASE WHEN category = 'Parking' THEN amount ELSE 0 END) AS FLOAT) / CAST(SUM(amount) AS FLOAT)) * 100 AS percentage FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event_name = 'November Speaker';
SELECT SUM(CAST(cost AS FLOAT)) FROM expense WHERE expense_description = 'Pizza';
SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';
SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT zip_code.city, zip_code.county, zip_code.state FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth';
SELECT expense_description FROM expense WHERE link_to_budget = (SELECT budget_id FROM budget ORDER BY remaining LIMIT 1);
SELECT m.* FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';
SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY COUNT(member.member_id) DESC LIMIT 1;
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event ORDER BY b.amount DESC LIMIT 1;
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President';
SELECT COUNT(DISTINCT attendance.link_to_member) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';
SELECT date_received FROM income JOIN member ON income.link_to_member = member.member_id WHERE first_name = 'Casey' AND last_name = 'Mason';
SELECT COUNT(DISTINCT member_id) FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';
SELECT COUNT(*) FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE phone = '954-555-6240');
SELECT first_name, last_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' ORDER BY (CAST(b.spent AS FLOAT) / CAST(b.amount AS FLOAT)) DESC LIMIT 1;
SELECT COUNT(*) FROM member WHERE position = 'President';
SELECT MAX(spent) FROM budget;
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020';
SELECT SUM(spent) FROM budget WHERE category = 'Food';
SELECT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member GROUP BY m.member_id HAVING COUNT(a.link_to_event) > 7;
SELECT m.first_name, m.last_name FROM member m JOIN major mj ON m.link_to_major = mj.major_id JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE mj.major_name = 'Interior Design' AND e.event_name = 'Community Theater';
SELECT first_name, last_name FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';
SELECT SUM(amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE first_name = 'Grant' AND last_name = 'Gilmour';
SELECT first_name || ' ' || last_name AS full_name FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;
SELECT SUM(cost) FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff'));
SELECT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN budget b ON m.member_id = b.budget_id JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'Yearly Kickoff';
SELECT m.first_name || ' ' || m.last_name AS full_name, i.source FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.amount = (SELECT MAX(amount) FROM income);
SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event JOIN expense ON budget.budget_id = expense.link_to_budget ORDER BY expense.cost ASC LIMIT 1;
SELECT (SUM(CASE WHEN ev.event_name = 'Yearly Kickoff' THEN e.cost ELSE 0 END) / SUM(e.cost)) * 100 AS percentage FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id;
SELECT CAST(SUM(major_name = 'Finance') AS FLOAT) / SUM(major_name = 'Physics') AS ratio FROM major INNER JOIN member ON major.major_id = member.link_to_major;
SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY amount DESC LIMIT 1;
SELECT first_name || ' ' || last_name AS full_name, email FROM member WHERE position = 'Secretary';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';
SELECT COUNT(DISTINCT attendance.link_to_member) FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND strftime('%Y', event.event_date) = '2019';
SELECT COUNT(a.link_to_event) AS event_count, m.major_name FROM member mb JOIN attendance a ON mb.member_id = a.link_to_member JOIN major m ON mb.link_to_major = m.major_id WHERE mb.first_name = 'Luisa' AND mb.last_name = 'Guidi' GROUP BY m.major_name;
SELECT CAST(SUM(spent) AS FLOAT) / CAST(COUNT(spent) AS FLOAT) AS average_spent_on_food FROM budget WHERE category = 'Food' AND event_status = 'Closed';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Advertisement' ORDER BY b.spent DESC LIMIT 1;
SELECT COUNT(*) > 0 FROM attendance a JOIN member m ON a.link_to_member = m.member_id JOIN event e ON a.link_to_event = e.event_id WHERE m.first_name = 'Maya' AND m.last_name = 'Mclean' AND e.event_name = 'Women''s Soccer';
SELECT (CAST(SUM(type = 'Community Service') AS FLOAT) / CAST(COUNT(event_id) AS FLOAT)) * 100 AS percentage_share FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';
SELECT e.cost FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE e.expense_description = 'Posters' AND ev.event_name = 'September Speaker';
SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1;
SELECT event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE status = 'Closed' AND remaining < 0 ORDER BY remaining ASC LIMIT 1;
SELECT e.expense_description, SUM(CAST(e.cost AS FLOAT)) FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND e.approved = 'true' GROUP BY e.expense_description;
SELECT category, SUM(CAST(amount AS FLOAT)) AS total_budgeted FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' GROUP BY category ORDER BY total_budgeted ASC;
SELECT * FROM budget WHERE category = 'Food' AND amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food');
SELECT * FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking';
SELECT SUM(CAST(cost AS FLOAT)) AS total_expense FROM expense WHERE expense_date = '2019-08-20';
SELECT m.first_name || ' ' || m.last_name AS full_name, CAST(SUM(e.cost) AS FLOAT) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v';
SELECT expense_description FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE first_name = 'Sacha' AND last_name = 'Harrison';
SELECT e.expense_description FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.t_shirt_size = 'X-Large';
SELECT m.zip FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost < 50;
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';
SELECT m.position FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.major_name = 'Business';
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';
SELECT DISTINCT e.type FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 30;
SELECT type FROM event WHERE location = 'MU 215';
SELECT type FROM event WHERE event_date = '2020-03-24T12:00:00';
SELECT major_name FROM major JOIN member ON major.major_id = member.link_to_major WHERE position = 'Vice President';
SELECT (SUM(CASE WHEN position = 'Member' AND major_name = 'Business' THEN 1 ELSE 0 END) * 100.0 / COUNT(member_id)) AS business_major_percentage FROM member JOIN major ON member.link_to_major = major.major_id;
SELECT DISTINCT category FROM budget JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';
SELECT COUNT(*) FROM income WHERE amount = 50;
SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';
SELECT COUNT(*) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education';
SELECT m.last_name, maj.department, maj.college FROM member m JOIN major maj ON m.link_to_major = maj.major_id WHERE maj.major_name = 'Environmental Engineering';
SELECT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0;
SELECT z.city, z.state FROM member m JOIN major j ON m.link_to_major = j.major_id JOIN zip_code z ON m.zip = z.zip_code WHERE j.department = 'Electrical and Computer Engineering Department' AND m.position = 'Member';
SELECT e.event_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE e.type = 'Social' AND m.position = 'Vice President' AND e.location = '900 E. Washington St.';
SELECT member.last_name, member.position FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE expense.expense_description = 'Pizza' AND expense.expense_date = '2019-09-10';
SELECT m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer' AND m.position = 'Member';
SELECT (COUNT(CASE WHEN i.amount = 50 THEN 1 END) * 100.0 / CAST(COUNT(m.member_id) AS FLOAT)) AS percentage FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE m.t_shirt_size = 'Medium' AND m.position = 'Member';
SELECT DISTINCT state FROM zip_code WHERE type = 'PO Box';
SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico';
SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';
SELECT DISTINCT attendance.link_to_event FROM expense JOIN attendance ON expense.link_to_member = attendance.link_to_member WHERE expense.cost > 50;
SELECT member.member_id, attendance.link_to_event FROM member INNER JOIN expense ON member.member_id = expense.link_to_member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19';
SELECT m.college FROM member mb JOIN major m ON mb.link_to_major = m.major_id WHERE mb.first_name = 'Katy' AND mb.link_to_major = 'rec1N0upiVLy5esTO';
SELECT m.phone FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Business' AND ma.college = 'College of Agriculture and Applied Sciences';
SELECT m.email FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE e.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND e.cost > 20;
SELECT COUNT(*) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Education & Human Services';
SELECT (SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) * 100.0 / CAST(COUNT(DISTINCT link_to_event) AS FLOAT)) AS percentage_over_budget FROM budget;
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';
SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50;
SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large';
SELECT CAST(SUM(type = 'PO Box') AS FLOAT) * 100 / CAST(COUNT(zip_code) AS FLOAT) FROM zip_code;
SELECT e.event_name, e.location FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.remaining > 0;
SELECT e.event_name, e.event_date FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE ex.expense_description = 'Pizza' AND ex.cost > 50 AND ex.cost < 100;
SELECT m.first_name, m.last_name, maj.major_name FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN major maj ON m.link_to_major = maj.major_id WHERE e.cost > 100;
SELECT z.city, z.county FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN income i ON b.link_to_event = e.event_id JOIN member m ON i.link_to_member = m.member_id JOIN zip_code z ON m.zip = z.zip_code GROUP BY e.event_id HAVING COUNT(i.income_id) > 40;
SELECT m.first_name, m.last_name, SUM(CAST(e.cost AS FLOAT)) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id HAVING COUNT(DISTINCT e.link_to_budget) > 1 ORDER BY total_cost DESC LIMIT 1;
SELECT AVG(cost) FROM expense JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE b.category = 'Parking' AND ex.cost < (SELECT CAST(SUM(ex2.cost) AS FLOAT) / COUNT(ex2.expense_id) FROM expense ex2 JOIN budget b2 ON ex2.link_to_budget = b2.budget_id WHERE b2.category = 'Parking');
SELECT CAST(SUM(expense.cost) AS FLOAT) / COUNT(DISTINCT event.event_id) * 100 AS percentage FROM event JOIN budget ON event.event_id = budget.link_to_event JOIN expense ON budget.budget_id = expense.link_to_budget WHERE event.type = 'Meeting';
SELECT link_to_budget FROM expense WHERE expense_description = 'Water, chips, cookies' ORDER BY cost DESC LIMIT 1;
SELECT m.first_name || ' ' || m.last_name AS full_name FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id ORDER BY MAX(e.cost) DESC LIMIT 5;
SELECT DISTINCT m.first_name, m.last_name, m.phone FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense);
SELECT (SUM(CASE WHEN z.state = 'New Jersey' THEN 1 ELSE 0 END) * 1.0 / COUNT(m.member_id)) - (SUM(CASE WHEN z.state = 'Vermont' THEN 1 ELSE 0 END) * 1.0 / COUNT(m.member_id)) AS percentage_difference FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.position = 'Member';
SELECT major.major_name, major.department FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';
SELECT m.first_name || ' ' || m.last_name AS full_name, e.cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Water, Veggie tray, supplies';
SELECT member.last_name, member.phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';
SELECT b.category, b.amount FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'January Speaker';
SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Food';
SELECT m.first_name || ' ' || m.last_name AS full_name, i.amount FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.date_received = '2019-09-09';
SELECT b.category FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Posters';
SELECT m.first_name || ' ' || m.last_name AS full_name, mj.college FROM member m JOIN major mj ON m.link_to_major = mj.major_id WHERE m.position = 'Secretary';
SELECT e.event_name, SUM(b.spent) AS total_spent FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Speaker Gifts' GROUP BY e.event_name;
SELECT z.city FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Garrett' AND m.last_name = 'Gerke';
SELECT first_name, last_name, position FROM member JOIN zip_code ON member.zip = zip_code.zip_code WHERE city = 'Lincolnton' AND state = 'North Carolina' AND member.zip = 28092;
SELECT COUNT(DISTINCT g.GasStationID) FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE' AND (p.Description = 'Premium' OR g.Segment = 'Premium');
SELECT CAST((SELECT COUNT(*) FROM customers WHERE Currency = 'EUR') AS FLOAT) / CAST((SELECT COUNT(*) FROM customers WHERE Currency = 'CZK') AS FLOAT) AS eur_to_czk_ratio;
SELECT c.CustomerID FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE substr(y.Date, 1, 6) BETWEEN '201201' AND '201212' AND c.Segment = 'LAM' ORDER BY y.Consumption ASC LIMIT 1;
SELECT CAST(AVG(Consumption) AS FLOAT) / 12 AS average_monthly_consumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND SUBSTR(yearmonth.Date, 1, 4) = '2013';
SELECT c.CustomerID FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Currency = 'CZK' AND ym.Date BETWEEN 201101 AND 201112 ORDER BY ym.Consumption DESC LIMIT 1;
SELECT COUNT(DISTINCT y.CustomerID) FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Segment = 'KAM' AND y.Consumption < 30000 AND y.Date BETWEEN 201201 AND 201212;
SELECT CAST((SELECT SUM(y.Consumption) FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'CZK' AND y.Date BETWEEN '201201' AND '201212') AS FLOAT) - CAST((SELECT SUM(y.Consumption) FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' AND y.Date BETWEEN '201201' AND '201212') AS FLOAT) AS ConsumptionDifference;
SELECT SUBSTR(y.Date, 1, 4) AS Year FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' GROUP BY Year ORDER BY CAST(SUM(y.Consumption) AS FLOAT) DESC LIMIT 1;
SELECT Segment FROM (SELECT Segment, SUM(Consumption) AS TotalConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID GROUP BY Segment) ORDER BY TotalConsumption ASC LIMIT 1;
SELECT SUBSTR(Date, 1, 4) AS Year FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'CZK' GROUP BY Year ORDER BY SUM(Consumption) DESC LIMIT 1;
SELECT SUBSTR(Date, 5, 2) AS peak_month FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND SUBSTR(Date, 1, 4) = '2013' GROUP BY peak_month ORDER BY SUM(Consumption) DESC LIMIT 1;
WITH MinConsumption AS (SELECT c.Segment, y.CustomerID, SUM(y.Consumption) AS TotalConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'CZK' AND y.Date BETWEEN '201301' AND '201312' GROUP BY c.Segment, y.CustomerID), LeastConsumption AS (SELECT Segment, MIN(TotalConsumption) AS MinTotalConsumption FROM MinConsumption GROUP BY Segment), AvgConsumption AS (SELECT mc.Segment, AVG(mc.TotalConsumption) AS AvgConsumption FROM MinConsumption mc JOIN LeastConsumption lc ON mc.Segment = lc.Segment AND mc.TotalConsumption = lc.MinTotalConsumption GROUP BY mc.Segment) SELECT c1.Segment AS Segment1, c2.Segment AS Segment2, CAST(c1.AvgConsumption AS FLOAT) - CAST(c2.AvgConsumption AS FLOAT) AS Difference FROM AvgConsumption c1 JOIN AvgConsumption c2 ON (c1.Segment = 'SME' AND c2.Segment = 'LAM') OR (c1.Segment = 'LAM' AND c2.Segment = 'KAM') OR (c1.Segment = 'KAM' AND c2.Segment = 'SME');
SELECT Segment, ((SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END)) * 100.0 / SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END)) AS Percentage_Increase FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE Currency = 'EUR' AND Segment IN ('SME', 'LAM', 'KAM') GROUP BY Segment ORDER BY Percentage_Increase DESC LIMIT 1 UNION SELECT Segment, ((SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END)) * 100.0 / SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END)) AS Percentage_Increase FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE Currency = 'EUR' AND Segment IN ('SME', 'LAM', 'KAM') GROUP BY Segment ORDER BY Percentage_Increase ASC LIMIT 1 ORDER BY Percentage_Increase DESC;
SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311';
SELECT (SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Discount') - (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND Segment = 'Discount') AS difference;
SELECT CAST((SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = 201304) AS FLOAT) - CAST((SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = 201304) AS FLOAT) AS ConsumptionDifference;
SELECT CAST((SELECT COUNT(DISTINCT CustomerID) FROM customers WHERE Segment = 'SME' AND Currency = 'CZK') AS FLOAT) - CAST((SELECT COUNT(DISTINCT CustomerID) FROM customers WHERE Segment = 'SME' AND Currency = 'EUR') AS FLOAT) AS more_smes;
SELECT y.CustomerID FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Segment = 'LAM' AND c.Currency = 'EUR' AND y.Date = 201310 ORDER BY y.Consumption DESC LIMIT 1;
SELECT CustomerID, MAX(Consumption) AS MaxConsumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'KAM') GROUP BY CustomerID ORDER BY MaxConsumption DESC LIMIT 1;
SELECT SUM(Consumption) FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'KAM' AND yearmonth.Date = 201305;
SELECT (CAST(COUNT(CASE WHEN Consumption > 46.73 THEN 1 END) AS FLOAT) * 100.0 / CAST(COUNT(*) AS FLOAT)) AS percentage FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE Segment = 'LAM';
SELECT Country, COUNT(*) AS total_value_for_money_gas_stations FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country;
SELECT (CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage_of_KAM_uses_Euro FROM customers WHERE Segment = 'KAM';
SELECT (CAST(COUNT(DISTINCT CASE WHEN Consumption > 528.3 THEN CustomerID END) AS FLOAT) * 100.0 / CAST(COUNT(DISTINCT CustomerID) AS FLOAT)) AS percentage FROM yearmonth WHERE Date LIKE '201202%';
SELECT (CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS percentage_of_premium FROM gasstations WHERE Country = 'SVK';
SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1;
SELECT Segment FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201309' GROUP BY Segment ORDER BY CAST(SUM(yearmonth.Consumption) AS FLOAT) ASC LIMIT 1;
SELECT y.CustomerID FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND y.Date = '201206' ORDER BY y.Consumption LIMIT 1;
SELECT MAX(Consumption) FROM yearmonth WHERE substr(Date, 1, 4) = '2012';
SELECT MAX(monthly_consumption) FROM (SELECT SUM(Consumption) / 12.0 AS monthly_consumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR') GROUP BY CustomerID);
SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID WHERE strftime('%Y%m', t.Date) = '201309';
SELECT DISTINCT g.Country FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN yearmonth y ON t.CustomerID = y.CustomerID WHERE y.Date LIKE '201306%' ;
SELECT DISTINCT g.ChainID FROM gasstations g JOIN transactions_1k t ON g.GasStationID = t.GasStationID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR';
SELECT p.Description FROM transactions_1k t JOIN products p ON t.ProductID = p.ProductID JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR';
SELECT AVG(CAST(Amount AS FLOAT) * CAST(Price AS FLOAT)) AS average_total_price FROM transactions_1k WHERE Date LIKE '2012-01%';
SELECT COUNT(DISTINCT y.CustomerID) FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' AND y.Consumption > 1000;
SELECT p.Description FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID JOIN products p ON t.ProductID = p.ProductID WHERE g.Country = 'CZE';
SELECT DISTINCT t.Time FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.ChainID = 11;
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Price > 1000;
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Date > '2012-01-01';
SELECT AVG(CAST(t.Amount AS FLOAT) * CAST(t.Price AS FLOAT)) AS average_total_price FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE';
SELECT AVG(CAST(t.Amount * t.Price AS FLOAT)) AS average_total_price FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR';
SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(CAST(Amount AS FLOAT) * CAST(Price AS FLOAT)) DESC LIMIT 1;
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-25' ORDER BY t.Time LIMIT 1;
SELECT c.Currency FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';
SELECT c.Segment FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-23' AND t.Time = '21:20:00';
SELECT COUNT(*) FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-26' AND t.Time < '13:00:00' AND c.Currency = 'CZK';
SELECT Segment FROM customers ORDER BY CustomerID LIMIT 1;
SELECT G.Country FROM transactions_1k T1 JOIN gasstations G ON T1.GasStationID = G.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00';
SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00';
SELECT Date, Consumption FROM yearmonth WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND CAST(Amount AS FLOAT) * CAST(Price AS FLOAT) = 124.05) AND Date LIKE '201201%' ORDER BY Date;
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-26' AND t.Time BETWEEN '08:00:00' AND '09:00:00' AND g.Country = 'CZE';
SELECT c.Currency FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE ym.Consumption = 214582.17 AND ym.Date LIKE '201306%';
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.CardID = 667467 LIMIT 1;
SELECT gs.Country FROM transactions_1k t JOIN gasstations gs ON t.GasStationID = gs.GasStationID WHERE CAST(t.Amount AS FLOAT) * CAST(t.Price AS FLOAT) = 548.4 AND t.Date = '2012-08-24';
SELECT (CAST(COUNT(DISTINCT t.CustomerID) AS FLOAT) * 100.0 / CAST((SELECT COUNT(DISTINCT CustomerID) FROM customers) AS FLOAT)) AS percentage FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' AND t.Date = '2012-08-25';
SELECT CAST((y2012.Consumption - y2013.Consumption) AS FLOAT) / CAST(y2012.Consumption AS FLOAT) AS decrease_rate FROM yearmonth y2012 JOIN yearmonth y2013 ON y2012.CustomerID = y2013.CustomerID WHERE y2012.Date LIKE '2012%' AND y2013.Date LIKE '2013%' AND y2012.CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Amount = 634.8 AND Date = '2012-08-25') LIMIT 1;
SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(CAST(Amount AS FLOAT) * CAST(Price AS FLOAT)) DESC LIMIT 1;
SELECT (CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS premium_percentage FROM gasstations WHERE Country = 'SVK';
SELECT SUM(Amount) FROM transactions_1k WHERE CustomerID = '38508' AND GasStationID IS NOT NULL AND Date BETWEEN '2012-01-01' AND '2012-01-31';
SELECT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID GROUP BY p.ProductID ORDER BY CAST(SUM(t.Amount) AS FLOAT) DESC LIMIT 5;
SELECT c.CustomerID, CAST(SUM(t.Price) AS FLOAT) / SUM(t.Amount) AS average_price_per_item, c.Currency FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID GROUP BY c.CustomerID ORDER BY SUM(t.Price) DESC LIMIT 1;
SELECT g.Country FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.ProductID = 2 ORDER BY t.Price DESC LIMIT 1;
SELECT y.Consumption FROM transactions_1k t JOIN yearmonth y ON t.CustomerID = y.CustomerID WHERE t.ProductID = 5 AND (CAST(t.Price AS FLOAT) / CAST(t.Amount AS FLOAT)) > 29.00 AND y.Date = '201208';