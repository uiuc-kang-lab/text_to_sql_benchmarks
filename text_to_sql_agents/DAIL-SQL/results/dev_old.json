{
    "26": "SELECT S.School AS SchoolName, S.Street, S.City, S.State, S.Zip FROM frpm AS F INNER JOIN schools AS S ON F.CDSCode = S.CDSCode WHERE S.County = 'Monterey' AND F.`FRPM Count (Ages 5-17)` > 800 AND S.GSoffered LIKE '%High%'\t----- bird -----\tcalifornia_schools",
    "35": "SELECT s.AdmEmail1 FROM frpm f INNER JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`Charter School (Y/N)` = 1 ORDER BY f.`Enrollment (K-12)` ASC LIMIT 1;\t----- bird -----\tcalifornia_schools",
    "42": "SELECT s.EdOpsName FROM satscores AS ss INNER JOIN schools AS s ON ss.cds = s.CDSCode ORDER BY ss.AvgScrMath DESC LIMIT 1;\t----- bird -----\tcalifornia_schools",
    "71": "SELECT District FROM schools WHERE Magnet = 0 AND City = 'Fresno';\t----- bird -----\tcalifornia_schools",
    "111": "SELECT COUNT(a.account_id) FROM account AS a INNER JOIN district AS d ON a.district_id = d.district_id WHERE d.A2 = 'Litomerice' AND YEAR(a.date) = 1996;\t----- bird -----\tfinancial",
    "119": "SELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region FROM account a JOIN trans t ON a.account_id = t.account_id JOIN district d ON a.district_id = d.district_id WHERE STRFTIME('%Y', a.date) = '1993' AND t.type = 'POPLATEK PO OBRATU';\t----- bird -----\tfinancial",
    "139": "SELECT COUNT(*) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER';\t----- bird -----\tfinancial",
    "177": "SELECT To answer the question about the sum that client number 4's account has following transaction 851 and the gender of the account owner, we need to perform a series of joins between the tables to gather the necessary information. Here's how you can construct the SQL query: 1. **Identify the account associated with transaction 851.** 2. **Find the client associated with that account.** 3. **Determine the gender of the client.** 4. **Calculate the balance after transaction 851.** Here's the SQL query to achieve this: ```sql SELECT T3.balance AS balance_after_transaction, T5.gender AS account_owner_gender FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T5 ON T4.client_id = T5.client_id WHERE\t----- bird -----\tfinancial",
    "180": "SELECT c.client_id, c.birth_date FROM client AS c INNER JOIN disp AS d ON c.client_id = d.client_id INNER JOIN account AS a ON d.account_id = a.account_id INNER JOIN district AS dist ON a.district_id = dist.district_id WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND dist.A2 = 'East Bohemia';\t----- bird -----\tfinancial",
    "226": "SELECT CAST(SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(bond_id) AS percent FROM bond WHERE molecule_id = 'TR008';\t----- bird -----\ttoxicology",
    "240": "SELECT a.element FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR004';\t----- bird -----\ttoxicology",
    "251": "SELECT a.element FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '+' GROUP BY a.element ORDER BY COUNT(a.element) ASC LIMIT 1;\t----- bird -----\ttoxicology",
    "255": "SELECT CAST(SUM(CASE WHEN M.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(B.bond_id) AS proportion FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.bond_type = '-'\t----- bird -----\ttoxicology",
    "268": "SELECT DISTINCT a.element FROM connected c INNER JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE c.bond_id = 'TR001_10_11';\t----- bird -----\ttoxicology",
    "272": "SELECT DISTINCT m.molecule_id FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id WHERE a.element = 'c' AND b.bond_type = '#' AND m.label = '-' LIMIT 2;\t----- bird -----\ttoxicology",
    "303": "SELECT COUNT(b.bond_id) AS double_bond_count, CASE WHEN m.label = '+' THEN 'Carcinogenic' WHEN m.label = '-' THEN 'Non-carcinogenic' ELSE 'Unknown' END AS carcinogenic_status FROM molecule AS m INNER JOIN bond AS b ON m.molecule_id = b.molecule_id WHERE m.molecule_id = 'TR006' AND b.bond_type = ' = ' GROUP BY m.molecule_id, m.label;\t----- bird -----\ttoxicology",
    "305": "SELECT b.bond_id, a1.atom_id AS atom1, a2.atom_id AS atom2 FROM bond b INNER JOIN connected c ON b.bond_id = c.bond_id INNER JOIN atom a1 ON c.atom_id = a1.atom_id INNER JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE b.bond_type = '-';\t----- bird -----\ttoxicology",
    "310": "SELECT COUNT(DISTINCT M.molecule_id) AS total_molecules_with_double_bond, SUM(CASE WHEN M.label = '+' THEN 1 ELSE 0 END) AS carcinogenic_molecules FROM molecule AS M INNER JOIN bond AS B ON M.molecule_id = B.molecule_id WHERE B.bond_type = ' = ';\t----- bird -----\ttoxicology",
    "327": "SELECT m.molecule_id FROM molecule AS m JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE m.label = '-' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5;\t----- bird -----\ttoxicology",
    "353": "SELECT S.name AS setName, S.totalSetSize FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.language = 'Italian';\t----- bird -----\tcard_games",
    "378": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;\t----- bird -----\tcard_games",
    "394": "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;\t----- bird -----\tcard_games",
    "406": "SELECT C.id FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.types LIKE '%Creature%' AND L.status = 'legal';\t----- bird -----\tcard_games",
    "416": "SELECT CAST(SUM(CASE WHEN fd.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*) AS percentage_french FROM cards c INNER JOIN foreign_data fd ON c.uuid = fd.uuid WHERE (c.power IS NULL OR c.power = '*')\t----- bird -----\tcard_games",
    "428": "SELECT S.name, ST.translation FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.id = 5;\t----- bird -----\tcard_games",
    "442": "SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage');\t----- bird -----\tcard_games",
    "445": "SELECT fd.language, fd.flavorText, c.type FROM cards c INNER JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.watermark = 'colorpie';\t----- bird -----\tcard_games",
    "450": "SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;\t----- bird -----\tcard_games",
    "484": "SELECT To answer the question, we need to find the Italian names of the cards in the set \"Coldsnap\" that have the highest converted mana cost. Here's how you can construct the SQL query: 1. **Join the necessary tables**: We need to join the `cards`, `foreign_data`, and `sets` tables. The `cards` table contains the `convertedManaCost` and `uuid`, the `foreign_data` table contains the `language` and `name` of the card in different languages, and the `sets` table contains the `name` of the set. 2. **Filter by set name and language**: We need to filter the results to only include cards from the set \"Coldsnap\" and where the language is \"Italian\". 3. **Find the maximum converted mana cost**: We need to find the maximum `convertedManaCost` for the cards in the set \"Coldsnap\". 4. **Select the Italian names of the cards\t----- bird -----\tcard_games",
    "491": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09';\t----- bird -----\tcard_games",
    "503": "SELECT S.type FROM cards C INNER JOIN sets S ON C.setCode = S.code WHERE C.name = 'Samite Pilgrim';\t----- bird -----\tcard_games",
    "522": "SELECT c.name, l.format FROM cards AS c INNER JOIN legalities AS l ON c.uuid = l.uuid WHERE c.edhrecRank = 1 AND l.status = 'Banned';\t----- bird -----\tcard_games",
    "528": "SELECT DISTINCT c.name, l.format FROM cards AS c INNER JOIN sets AS s ON c.setCode = s.code INNER JOIN legalities AS l ON c.uuid = l.uuid WHERE s.name = 'Hour of Devastation' AND l.status = 'Legal';\t----- bird -----\tcard_games",
    "543": "SELECT MAX(p.AnswerCount) AS MaxAnswerCount FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
    "546": "SELECT DISTINCT U.DisplayName FROM users U INNER JOIN posts P ON U.Id = P.OwnerUserId WHERE P.ClosedDate IS NOT NULL;\t----- bird -----\tcodebase_community",
    "562": "SELECT COUNT(C.Id) AS CommentCount FROM posts AS P INNER JOIN comments AS C ON P.Id = C.PostId WHERE P.ViewCount = 1910;\t----- bird -----\tcodebase_community",
    "569": "SELECT COUNT(V.Id) AS NumberOfVotes FROM posts AS P INNER JOIN votes AS V ON P.Id = V.PostId WHERE P.Title LIKE '%data visualization%'\t----- bird -----\tcodebase_community",
    "590": "SELECT Id FROM users ORDER BY Views ASC LIMIT 1;\t----- bird -----\tcodebase_community",
    "598": "SELECT (CAST(SUM(CASE WHEN strftime('%Y', Date) = '2010' AND Name = 'Student' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Name = 'Student' THEN 1 ELSE 0 END) * 100) - (CAST(SUM(CASE WHEN strftime('%Y', Date) = '2011' AND Name = 'Student' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Name = 'Student' THEN 1 ELSE 0 END) * 100) AS percentage_difference FROM badges;\t----- bird -----\tcodebase_community",
    "602": "SELECT Id AS PostID, OwnerUserId AS UserID FROM posts WHERE Score > 60;\t----- bird -----\tcodebase_community",
    "605": "SELECT COUNT(DISTINCT UserId) AS NumberOfUsers FROM badges WHERE Name = 'Announcer';\t----- bird -----\tcodebase_community",
    "607": "SELECT COUNT(Id) AS PositiveCommentCount FROM comments WHERE Score > 60;\t----- bird -----\tcodebase_community",
    "610": "SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users);\t----- bird -----\tcodebase_community",
    "620": "SELECT SUM(u.Views) AS TotalViews FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE b.Date = '2010-07-19 19:39:08.0';\t----- bird -----\tcodebase_community",
    "641": "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND strftime('%Y', Date) = '2014';\t----- bird -----\tcodebase_community",
    "646": "SELECT DISTINCT p.Title, c.UserDisplayName FROM comments AS c INNER JOIN posts AS p ON c.PostId = p.Id WHERE c.Score > 60;\t----- bird -----\tcodebase_community",
    "648": "SELECT U.DisplayName, U.WebsiteUrl FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.FavoriteCount > 150;\t----- bird -----\tcodebase_community",
    "675": "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;\t----- bird -----\tcodebase_community",
    "717": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man';\t----- bird -----\tsuperhero",
    "740": "SELECT COUNT(DISTINCT s.id) AS female_superheroes_with_strength_100 FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100;\t----- bird -----\tsuperhero",
    "772": "SELECT eye_colour.colour AS eye_colour, hair_colour.colour AS hair_colour, skin_colour.colour AS skin_colour FROM superhero AS s INNER JOIN gender AS g ON s.gender_id = g.id INNER JOIN publisher AS p ON s.publisher_id = p.id LEFT JOIN colour AS eye_colour ON s.eye_colour_id = eye_colour.id LEFT JOIN colour AS hair_colour ON s.hair_colour_id = hair_colour.id LEFT JOIN colour AS skin_colour ON s.skin_colour_id = skin_colour.id WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';\t----- bird -----\tsuperhero",
    "781": "SELECT S.height_cm FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE C.colour = 'Amber';\t----- bird -----\tsuperhero",
    "801": "SELECT CAST(SUM(CASE WHEN g.gender = 'Male' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) AS ratio FROM superhero AS s INNER JOIN gender AS g ON s.gender_id = g.id;\t----- bird -----\tsuperhero",
    "824": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name ASC;\t----- bird -----\tsuperhero",
    "829": "SELECT (SUM(CASE WHEN P.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN P.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)) AS difference FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id;\t----- bird -----\tsuperhero",
    "833": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';\t----- bird -----\tsuperhero",
    "840": "SELECT A.attribute_name, HA.attribute_value FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN attribute AS A ON HA.attribute_id = A.id WHERE S.superhero_name = 'Aquababy';\t----- bird -----\tsuperhero",
    "846": "SELECT d.driverRef FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 20 ORDER BY q.q1 DESC LIMIT 5;\t----- bird -----\tformula_1",
    "855": "SELECT R.url FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE C.name = 'Sepang International Circuit';\t----- bird -----\tformula_1",
    "864": "SELECT COUNT(DISTINCT R.driverId) AS finished_drivers FROM results AS R JOIN races AS RA ON R.raceId = RA.raceId WHERE RA.date = '2015-11-29' AND R.time IS NOT NULL;\t----- bird -----\tformula_1",
    "888": "SELECT C.country, C.name AS circuit_name, C.location FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.name LIKE '%European Grand Prix%' ORDER BY R.year ASC LIMIT 1;\t----- bird -----\tformula_1",
    "898": "SELECT forename || ' ' || surname AS full_name, STRFTIME('%Y', 'now') - STRFTIME('%Y', dob) AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;\t----- bird -----\tformula_1",
    "899": "SELECT C.name, C.location, C.country FROM circuits AS C JOIN races AS R ON C.circuitId = R.circuitId WHERE R.year BETWEEN 1990 AND 2000 GROUP BY C.circuitId HAVING COUNT(R.raceId) = 4;\t----- bird -----\tformula_1",
    "922": "SELECT r.time FROM races AS r INNER JOIN circuits AS c ON r.circuitId = c.circuitId WHERE r.year = 2010 AND c.name = 'Abu Dhabi Circuit';\t----- bird -----\tformula_1",
    "928": "SELECT d.driverRef FROM races r INNER JOIN results res ON r.raceId = res.raceId INNER JOIN drivers d ON res.driverId = d.driverId WHERE r.name = 'Canadian Grand Prix' AND r.year = 2007 AND res.positionOrder = 1;\t----- bird -----\tformula_1",
    "935": "SELECT COUNT(DISTINCT r.driverId) AS finished_drivers FROM results AS r INNER JOIN races AS ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.time IS NOT NULL;\t----- bird -----\tformula_1",
    "938": "SELECT D.forename, D.surname, D.url FROM results R INNER JOIN races RA ON R.raceId = RA.raceId INNER JOIN drivers D ON R.driverId = D.driverId WHERE RA.year = 2008 AND RA.name = 'Australian Grand Prix' AND R.positionOrder = 1;\t----- bird -----\tformula_1",
    "968": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';\t----- bird -----\tformula_1",
    "970": "SELECT d.forename, d.surname, MIN(lt.time) AS earliest_lap_time FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'German' AND STRFTIME('%Y', d.dob) BETWEEN '1980' AND '1990' GROUP BY d.driverId ORDER BY earliest_lap_time ASC LIMIT 3;\t----- bird -----\tformula_1",
    "985": "SELECT d.forename, d.surname, lt.time FROM lapTimes lt JOIN races r ON lt.raceId = r.raceId JOIN drivers d ON lt.driverId = d.driverId WHERE r.name = 'French Grand Prix' AND lt.lap = 3 ORDER BY lt.milliseconds DESC LIMIT 1;\t----- bird -----\tformula_1",
    "987": "SELECT AVG(CAST(results.fastestLapTime AS REAL)) AS average_fastest_lap_time FROM results JOIN races ON results.raceId = races.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE races.year = 2006 AND races.name = 'United States Grand Prix' AND results.rank < 11;\t----- bird -----\tformula_1",
    "1004": "SELECT d.forename, d.surname, COUNT(r.resultId) AS wins FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE d.dob = (SELECT MIN(dob) FROM drivers) AND r.positionOrder = 1 GROUP BY d.forename, d.surname;\t----- bird -----\tformula_1",
    "1039": "SELECT AVG(T2.long_shots) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.player_name = 'Ahmed Samir Farag';\t----- bird -----\teuropean_football_2",
    "1042": "SELECT L.name FROM League AS L JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal);\t----- bird -----\teuropean_football_2",
    "1048": "SELECT PA.overall_rating FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Gabriel Tamas' AND strftime('%Y', PA.date) = '2011';\t----- bird -----\teuropean_football_2",
    "1056": "SELECT L.name FROM League L INNER JOIN Country C ON L.country_id = C.id WHERE C.name = 'Netherlands';\t----- bird -----\teuropean_football_2",
    "1082": "SELECT L.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Germany';\t----- bird -----\teuropean_football_2",
    "1118": "SELECT player_name FROM Player WHERE (STRFTIME('%Y', 'now') - STRFTIME('%Y', birthday)) >= 35;\t----- bird -----\teuropean_football_2",
    "1145": "SELECT L.name FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 4;\t----- bird -----\teuropean_football_2",
    "1157": "SELECT P.ID, P.SEX, P.Diagnosis FROM Examination E INNER JOIN Patient P ON E.ID = P.ID WHERE E.Thrombosis = 2;\t----- bird -----\tthrombosis_prediction",
    "1173": "SELECT P.Diagnosis, COUNT(*) AS DiagnosisCount FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY P.Diagnosis ORDER BY DiagnosisCount DESC LIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1178": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' ORDER BY `First Date` ASC LIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1200": "SELECT CAST(SUM(CASE WHEN P.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) AS REAL) * 100.0 / SUM(CASE WHEN E.Symptoms LIKE '%thrombocytopenia%' THEN 1 ELSE 0 END) AS Proportion FROM Examination E INNER JOIN Patient P ON E.ID = P.ID WHERE E.Symptoms LIKE '%thrombocytopenia%'\t----- bird -----\tthrombosis_prediction",
    "1218": "SELECT (COUNT(CASE WHEN L.UA > 6.5 THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F';\t----- bird -----\tthrombosis_prediction",
    "1224": "SELECT P.ID, P.SEX, P.Birthday, L.`T-BIL` FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory);\t----- bird -----\tthrombosis_prediction",
    "1235": "SELECT P.ID, P.Diagnosis, STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RBC < 3.5;\t----- bird -----\tthrombosis_prediction",
    "1271": "SELECT COUNT(DISTINCT P.ID) AS num_patients FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSA IN ('-', '+-') AND STRFTIME('%Y', P.`First Date`) < '2000';\t----- bird -----\tthrombosis_prediction",
    "1272": "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSA NOT IN ('negative', '0') ORDER BY P.`First Date` ASC LIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "1279": "SELECT CAST(SUM(CASE WHEN P.Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(L.ID) AS percentage FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.GOT >= 60;\t----- bird -----\tthrombosis_prediction",
    "1280": "SELECT COUNT(DISTINCT L.ID) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'M' AND L.GOT < 60;\t----- bird -----\tthrombosis_prediction",
    "1286": "SELECT COUNT(DISTINCT P.ID) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.ALP >= 300 AND P.Admission = '+';\t----- bird -----\tthrombosis_prediction",
    "1302": "SELECT COUNT(DISTINCT L.ID) AS NumberOfPatients FROM Laboratory AS L INNER JOIN Examination AS E ON L.ID = E.ID WHERE L.CPK < 250 AND (E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+');\t----- bird -----\tthrombosis_prediction",
    "1313": "SELECT COUNT(m.member_id) FROM member AS m INNER JOIN major AS ma ON m.link_to_major = ma.major_id WHERE ma.college = 'College of Engineering';\t----- bird -----\tstudent_club",
    "1355": "SELECT Z.state FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.first_name = 'Sacha' AND M.last_name = 'Harrison';\t----- bird -----\tstudent_club",
    "1368": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360';\t----- bird -----\tstudent_club",
    "1402": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1;\t----- bird -----\tstudent_club",
    "1409": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20';\t----- bird -----\tstudent_club",
    "1514": "SELECT c.Currency FROM transactions_1k AS t INNER JOIN customers AS c ON t.CustomerID = c.CustomerID WHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';\t----- bird -----\tdebit_card_specializing",
    "1518": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00';\t----- bird -----\tdebit_card_specializing",
    "1523": "SELECT DISTINCT G.Country FROM transactions_1k AS T INNER JOIN gasstations AS G ON T.GasStationID = G.GasStationID WHERE T.CardID = 667467;\t----- bird -----\tdebit_card_specializing"
}